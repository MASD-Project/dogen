@startuml
set namespaceSeparator ::
note as N1
Orchestration-based imlementation of the Dogen product API.

UML representation:

\image html dogen.orchestration/modeling/dogen.orchestration.svg
end note

class main <<masd::entry_point, dogen::untypable>> #DDA9F3 {
}

main o-- generator: generates code using
main o-- spec_dumper: dumps specs using
main o-- converter: converts models using
main o-- initializer: initialises using

class generator <<dogen::handcrafted::typeable>> #FFFACD {
}

generator o-- transforms::code_generation_chain
generator o-- transforms::context
generator o-- transforms::context_bootstrapping_chain: bootstraps using

class spec_dumper <<dogen::handcrafted::typeable>> #FFFACD {
}

spec_dumper o-- transforms::context
spec_dumper o-- transforms::context_bootstrapping_chain: bootstraps using

class converter <<dogen::handcrafted::typeable>> #FFFACD {
}

converter o-- transforms::context
converter o-- transforms::context_bootstrapping_chain: bootstraps using

class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

namespace transforms #F2F2F2 {
    note as transforms_1
Top-level transforms for Dogen. These are the entry points to all
transformations.
    end note

    class context <<dogen::typeable, dogen::pretty_printable>> #F7E5FF {
        +{field} variability_context variability::transforms::context
        +{field} codec_context codec::transforms::context
        +{field} logical_context logical::transforms::context
        +{field} text_context text::transforms::context
        +{field} physical_context physical::transforms::context
    }

    class code_generation_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    code_generation_chain o-- physical_model_production_chain

    note top of code_generation_chain
Responsible for transforming a high-level representation of a domain into code,
in one or more primary technical spaces.

The model which one intends to transform is known as the target model. The
transform starts by invoking the correct front-end to read in the target model
and all of its dependencies. There are two types of dependencies:

- explicit: specified by the options passed in; these are models created by the
  user and any models that they, in turn, depend on.
- implicit: these are known as the system models. They are added automatically.
  Examples are built-ins, boost, std, etc.

Collectively, all implicit and explicit models are referred to as the input
models. The input models read the front-end are converted into the middle end
representation - logical models. They are then merged it into a single, unified
Yarn model, called the merged model; all dependencies are resolved and
validated.

The transform then instantiates all backends requested by the options passed in.
They use the merged model to generate source code, and then outputted it to the
desired destination.
    end note

    class physical_model_production_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    physical_model_production_chain o-- text_model_production_chain
    physical_model_production_chain o-- text_model_to_physical_model_transform
    physical_model_production_chain o-- codec_model_to_logical_model_transform

    class text_model_production_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of text_model_production_chain
Produces a text model.
    end note

    class text_model_to_physical_model_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    text_model_to_physical_model_transform o-- logical_model_to_text_model_chain

    note top of text_model_to_physical_model_transform
Converts text models into physical models.
    end note

    class codec_model_set_to_logical_input_model_set_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    codec_model_set_to_logical_input_model_set_chain o-- codec_model_to_logical_model_transform

    note top of codec_model_set_to_logical_input_model_set_chain
Converts an codec model set into a logical model set.

All codec transforms must have been applied to the codec model set.
    end note

    class codec_model_to_logical_model_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    codec_model_to_logical_model_transform o-- helpers::codec_to_logical_projector

    note top of codec_model_to_logical_model_transform
Converts an codec model into an logical representation.
    end note

    class logical_model_to_text_model_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    logical_model_to_text_model_chain o-- elements_removal_transform
    logical_model_to_text_model_chain o-- physical_to_logical_population_transform
    logical_model_to_text_model_chain o-- legacy_dependencies_transform
    logical_model_to_text_model_chain o-- helpers::codec_to_logical_projector

    note top of logical_model_to_text_model_chain
Transforms a logical model representation into a text representation, performing
an expansion into physical space.
    end note

    class physical_to_logical_population_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of physical_to_logical_population_transform
Populate logical elements that require information from the physical dimension.
    end note

    class legacy_dependencies_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    legacy_dependencies_transform o-- helpers::dependencies_builder

    note top of legacy_dependencies_transform
Finds all inclusion directives in the model, and indexes them to
logical-physical points.
    end note

    class context_factory <<dogen::handcrafted::typeable>> #FFFACD {
    }

    context_factory o-- context: builds
    context_factory o-- factory_exception: throws

    note top of context_factory
Factory that creates the transformation context.
    end note

    class context_bootstrapping_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    context_bootstrapping_chain o-- context: bootstraps
    context_bootstrapping_chain o-- context_factory: makes contexts using

    note top of context_bootstrapping_chain
Bootstraps the transforms sub-system.

This transform is responsible for running all of the first stage chains needed
by the remaining chains, and producing the top-level transform context.
    end note

    class elements_removal_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of elements_removal_transform
Remove all elements which are not required for code generation.
    end note

    class factory_exception <<masd::exception>> #E8C2F8 {
    }

    note top of factory_exception
An error occurred in the factory whilst building.
    end note

    class transform_exception <<masd::exception>> #E8C2F8 {
    }

}

namespace helpers #F2F2F2 {
    note as helpers_1
Helpers for the orchestration model.
    end note

    class codec_to_logical_projector <<dogen::handcrafted::typeable>> #FFFACD {
    }

    codec_to_logical_projector o-- projection_error: throws

    class logical_to_physical_projector <<dogen::handcrafted::typeable>> #FFFACD {
    }

    logical_to_physical_projector o-- projection_error: throws

    class projection_error <<masd::exception>> #E8C2F8 {
    }

    note top of projection_error
An error occurred whilst projecting elements from one space into another.
    end note

    class dependencies_builder <<dogen::handcrafted::typeable>> #FFFACD {
    }

    dependencies_builder o-- building_error: throws

    class building_error <<masd::exception>> #E8C2F8 {
    }

}

namespace features #F2F2F2 {
    note as features_1
Features for the orchestration model.
    end note

    class model_location <<masd::variability::feature_bundle>> #BAD7D7 {
        +{field} external_modules masd::variability::text
        +{field} model_modules masd::variability::text
    }

    note top of model_location
Feature group for model location related features.
    end note

    class initializer <<masd::variability::initializer>> #A9CDCD {
    }

}

class CMakeLists <<masd::build::cmakelists, dogen::handcrafted::cmake>> #99CB99 {
}

@enduml
