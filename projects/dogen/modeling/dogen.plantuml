@startuml
set namespaceSeparator ::
note as N1
Provides the top-level API for the dogen product.

UML representation:

\image html dogen/modeling/dogen.svg
end note

class configuration <<masd::fluent>> #F7E5FF {
    +{field} model_processing model_processing_configuration
    +{field} tracing boost::optional<tracing_configuration>
    +{field} diffing boost::optional<diffing_configuration>
    +{field} reporting boost::optional<reporting_configuration>
    +{field} byproduct_directory boost::filesystem::path
}

configuration o-- diffing_configuration
configuration o-- tracing_configuration
configuration o-- model_processing_configuration
configuration o-- reporting_configuration

class diffing_configuration <<masd::fluent>> #F7E5FF {
    +{field} destination diffing_destination
    +{field} output_directory boost::filesystem::path
}

diffing_configuration o-- diffing_destination

note top of  diffing_configuration
Configuration for diff generation.
end note

enum diffing_destination <<masd::enumeration>> #F2DAFD {
    +{field} file
    +{field} console
}

note top of  diffing_destination
Where to place the diffing results.
end note

class tracing_configuration <<masd::fluent>> #F7E5FF {
    +{field} level tracing_level
    +{field} format tracing_format
    +{field} guids_enabled bool
    +{field} logging_impact std::string
    +{field} use_short_names bool
    +{field} output_directory boost::filesystem::path
    +{field} backend tracing_backend
    +{field} run_id std::string
    +{field} filter_regexes std::vector<std::string>
}

tracing_configuration o-- tracing_level
tracing_configuration o-- tracing_format
tracing_configuration o-- tracing_backend

note top of  tracing_configuration
Configuration related to transform tracing.
end note

enum tracing_level <<masd::enumeration>> #F2DAFD {
    +{field} detail
    +{field} summary
}

note top of  tracing_level
Available levels for tracing transformation.
end note

enum tracing_format <<masd::enumeration>> #F2DAFD {
    +{field} plain
    +{field} org_mode
    +{field} graphviz
}

note top of  tracing_format
Available formats for tracing transformations.
end note

enum tracing_backend <<masd::enumeration>> #F2DAFD {
    +{field} file
}

note top of  tracing_backend
Available backends to manage tracing information.
end note

class reporting_configuration #F7E5FF {
    +{field} style reporting_style
    +{field} output_directory boost::filesystem::path
}

reporting_configuration o-- reporting_style

note top of  reporting_configuration
Configuration related to operational reports.
end note

enum reporting_style <<masd::enumeration, dogen::convertible>> #F2DAFD {
    +{field} plain
    +{field} org_mode
}

note top of  reporting_style
Available formats for operational reports.
end note

class model_processing_configuration #F7E5FF {
    +{field} compatibility_mode_enabled bool
    +{field} dry_run_mode_enabled bool
    +{field} variability_overrides std::vector<std::string>
    +{field} activity_timestamp boost::posix_time::ptime
}

note top of  model_processing_configuration
Configuration related to the behaviour of Dogen whilst processing models.
end note

class configuration_validator <<dogen::handcrafted::typeable>> #FFFACD {
}

configuration_validator o-- configuration: validates
configuration_validator o-- invalid_configuration_exception: throws

note top of  configuration_validator
Validates the Dogen configuration at the API level.
end note

class invalid_configuration_exception <<masd::exception>> #E8C2F8 {
}

note top of  invalid_configuration_exception
The values supplied for the configuration are not valid.
end note

class mock_configuration_factory <<dogen::handcrafted::typeable>> #FFFACD {
}

mock_configuration_factory o-- configuration: creates

note top of  mock_configuration_factory
Creates configurations for testing purposes.
end note

class generator <<dogen::handcrafted::typeable::header_only>> #FFFACD {
}

generator o-- configuration: configured by
generator o-- generation_exception: throws

note top of  generator
Generates code for a given target model.
end note

class generation_exception <<masd::exception>> #E8C2F8 {
}

note top of  generation_exception
Generation failures:

- Unsupported model format (target, references).
- Target could not be found, opened.
- Error parsing model. Which type caused it.
- Error outputting model.
- Error outputting tracing.
- Could not write to output directory.
- Output directory is a file.
end note

class converter <<dogen::handcrafted::typeable::header_only>> #FFFACD {
}

converter o-- configuration: configured by
converter o-- conversion_exception: throws

note top of  converter
Converts a supported model type into another.
end note

class conversion_exception <<masd::exception>> #E8C2F8 {
}

note top of  conversion_exception
Conversion failures:

- Target could not be found, opened.
- Unsupported model type.
- Could not write to output directory.
end note

class spec_dumper <<dogen::handcrafted::typeable::header_only>> #FFFACD {
}

spec_dumper o-- configuration: configured by
spec_dumper o-- dumping_exception: throws
spec_dumper o-- specs: creates

note top of  spec_dumper
Dumps internal information from Dogen.
end note

class specs #F7E5FF {
    +{field} categories std::list<spec_category>
}

specs o-- spec_category

note top of  specs
Describes details of the available functionality within this version of Dogen.
end note

class spec_category #F7E5FF {
    +{field} name std::string
    +{field} entries std::list<spec_entry>
    +{field} description std::string
}

spec_category o-- spec_entry

note top of  spec_category
Describes a category of dogen specifications.
end note

class spec_entry #F7E5FF {
    +{field} name std::string
    +{field} description std::string
}

note top of  spec_entry
Unit of functionality within Dogen.
end note

class dumping_exception <<masd::exception>> #E8C2F8 {
}

note top of  dumping_exception
An error ocurred when dumping dogen's specs.
end note

class main <<masd::entry_point, dogen::untypable>> #DDA9F3 {
}

class CMakeLists <<masd::build::cmakelists, dogen::handcrafted::cmake>> #99CB99 {
}

@enduml
