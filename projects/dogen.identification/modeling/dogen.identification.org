#+title: dogen.identification
#+options: <:nil c:nil todo:nil ^:nil d:nil date:nil author:nil
#+tags: { element(e) attribute(a) module(m) }
:PROPERTIES:
:masd.codec.dia.comment: true
:masd.codec.model_modules: dogen.identification
:masd.codec.input_technical_space: cpp
:masd.codec.reference: cpp.builtins
:masd.codec.reference: cpp.std
:masd.codec.reference: cpp.boost
:masd.codec.reference: masd
:masd.codec.reference: dogen.profiles
:masd.variability.profile: dogen.profiles.base.default_profile
:END:

Collection of types related to naming, labelling and general
identification within Dogen.

UML representation:

\image html dogen.identification/modeling/dogen.identification.svg

* entities                                                           :module:
  :PROPERTIES:
  :custom_id: O0
  :masd.codec.dia.comment: true
  :END:

Stores all of the entities related to identification
of Dogen elements.

** name                                                             :element:
   :PROPERTIES:
   :custom_id: O2
   :masd.codec.stereotypes: Nameable
   :END:

General name for modeling elements which do not need any specialisation.

*** qualified                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Qualified name for an element.

** codec provenance                                                 :element:
   :PROPERTIES:
   :custom_id: 30866ffa-2b2a-4324-9a4a-ba84c8601856
   :END:

Source of a model element in the codec dimension.

*** model type                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: model_type
    :END:

Type of the model where this element originates from.

*** model sha1 hash                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: sha1_hash
    :END:

SHA1 key of the original codec model.

*** codec id                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: codec_id
    :END:

Identifier for the modeling element in the codec dimension.

*** location                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: codec_location
    :END:

Where the element was located in the original source.

** model type                                                       :element:
   :PROPERTIES:
   :custom_id: O4
   :masd.codec.stereotypes: masd::enumeration
   :END:

Types of models with regards to the current generation taking place.

*** target                                                        :attribute:

The element is part of the target model.

*** pdm reference                                                 :attribute:

The element was part of a reference model which is a PDM.

*** non pdm reference                                             :attribute:

The element was part of a reference model which is regular dogen model.

*** not yet determined                                            :attribute:

The origin of the element is not yet known.

** sha1 hash                                                        :element:
   :PROPERTIES:
   :custom_id: O5
   :masd.primitive.underlying_element: std::string
   :masd.codec.stereotypes: masd::primitive
   :END:

Stores a SHA1 hash.

** codec id                                                         :element:
   :PROPERTIES:
   :custom_id: O6
   :masd.primitive.underlying_element: std::string
   :masd.codec.stereotypes: masd::primitive
   :END:

ID of the elment as sourced from the codec model, if any.

** logical id                                                       :element:
   :PROPERTIES:
   :custom_id: O7
   :masd.primitive.underlying_element: std::string
   :masd.codec.stereotypes: masd::primitive, dogen::hashable
   :END:

ID of the elment in the logical dimension.

** physical meta id                                                 :element:
   :PROPERTIES:
   :custom_id: O8
   :masd.primitive.underlying_element: std::string
   :masd.codec.stereotypes: masd::primitive, dogen::hashable
   :END:

ID of the meta-element in the physical dimension.

** codec location                                                   :element:
   :PROPERTIES:
   :custom_id: 9423280e-9b15-45f0-a3b3-612d9a329f36
   :END:

Location of a modeling element in the codec dimension.

*** full path                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

Full path to the file that was read, if any.

*** line                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: long
    :END:

Line number where the element was defined.

** logical provenance                                               :element:
   :PROPERTIES:
   :custom_id: O10
   :END:

Source of a model element in the logical dimension.

*** codec                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: codec_provenance
    :END:

Provenance of the current element in the codec dimension.

*** logical name                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: logical_name
    :END:

Provenance of the current element in the logical dimension.

*** logical meta name                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: logical_meta_name
    :END:

Provenance of the current element in the logical dimension as a meta-element.

** logical meta id                                                  :element:
   :PROPERTIES:
   :custom_id: O15
   :masd.primitive.underlying_element: std::string
   :masd.codec.stereotypes: masd::primitive, dogen::hashable
   :END:

ID for a logical meta-element.

** label                                                            :element:
   :PROPERTIES:
   :custom_id: O16
   :END:

A label is a key-value pair that can be used by the processing engine in a flexible way.

*** key                                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Key of the label.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Value associated with this label.

** tagged value                                                     :element:
   :PROPERTIES:
   :custom_id: O17
   :END:

Represents a tagged value in a similar spirit to UMLs.

*** tag                                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Tag name.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Value associated with this tag.

** logical name                                                     :element:
   :PROPERTIES:
   :custom_id: O18
   :masd.codec.stereotypes: Nameable, QualifiedRepresentations, dogen::hashable
   :END:

Name of an element in logical space.

A name represents a point or a region in logical space, and this point or region can
only be used by one element. Names can be uniquely identified by their qualified ID.

Name has the following properties: a) two different points or regions in logical
space cannot have the same name and b) the same point in logical space can only
have one and only one name.

Names are required in addition to just using the qualfied ID representation
because we use them to infer all sorts of properties for an element (namespaces,
naming files, etc).

*** id                                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: logical_id
    :END:

Identifier for this logical element.

*** location                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: logical_location
    :END:

Where the name is located in element space.

*** is container                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the name indicates an element that can contain other elements.

** logical location                                                 :element:
   :PROPERTIES:
   :custom_id: O19
   :masd.codec.stereotypes: dogen::hashable
   :END:

Identifies a hierarchy of containment within the logical space.

*** external modules                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:

All modules external to the model itself.

It is sometimes useful to create a model within a set of existing
modules. In this case, the model does not own the existing modules and
they are considered "external" to the model. This is useful, for
example, when declaring a model within a larger project such as @e
dogen::logical. In this case, @e dogen is the external module.

*** model modules                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:

Modules related to just the model itself.

It is only different from the model name if the model name is composite;
that is, if the model name has multiple fields separated by dots, e.g. @ a.b.

*** internal modules                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:

Sub-modules within a model.

*** element                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Name of the owning element, if any.

For coding elements which are located within other logical elements
that are not modules, such as attributes, inner classes, etc.

** qualified representations                                        :element:
   :PROPERTIES:
   :custom_id: O20
   :masd.codec.stereotypes: dogen::hashable
   :END:

All available qualified representations of a name.

*** dot                                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Qualified identifier using "." as the separator.

*** colon                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Qualified identifier using "::" as the separator.

*** identifiable                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Representation of the identifier that can usable as an identifier on all of the
supported technical spaces, using the entire name structure.

** physical meta location                                           :element:
   :PROPERTIES:
   :custom_id: O21
   :END:

Location of an entity or set of entities in the physical meta-model.

These must be populated in order, e.g. in order to have a backend we must have a
meta-model; in order to have a facet we must have a backend and in order to have a
formatter we must have a facet. We may not have any.

*** meta model                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Top-most container for the physical space.

The meta-model is always expected to be  @e masd.

*** backend                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Name of the backend where this element is located, if any.

*** part                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Name of the part where this element is located, if any.

*** facet                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Name of the facet where this element is located, if any.

*** archetype                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Name of the archetype for this element, if applicable.

** physical meta name                                               :element:
   :PROPERTIES:
   :custom_id: O22
   :masd.codec.stereotypes: Nameable
   :END:

Name of an element in physical space.

A name represents a point or a region in physical space. It can only be used by one
physical element. Names can be uniquely identified by their qualified ID.

Name has the following properties: a) two different points or regionsin physical
space cannot have the same name and b) the same point or region in physical space
can only have one and only one name.

*** id                                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: physical_meta_id
    :END:

Identifier for this physical meta-element.

*** location                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: physical_meta_location
    :END:

Location for a meta-name in physical space.

** logical meta name                                                :element:
   :PROPERTIES:
   :custom_id: O26
   :masd.codec.stereotypes: Nameable
   :END:

*** id                                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: logical_meta_id
    :END:

Identifier for this logical meta-element.

** technical space                                                  :element:
   :PROPERTIES:
   :custom_id: O27
   :masd.cpp.hash.enabled: true
   :masd.codec.stereotypes: masd::enumeration, dogen::convertible
   :END:

Models need to declare upfront the technical space they will target.

*** agnostic                                                      :attribute:

Abstract technical space which is mapped to concrete technical spaces.

*** cpp                                                           :attribute:

The C++ programming language.

*** csharp                                                        :attribute:

The C# programming language.

*** cmake                                                         :attribute:

CMake meta build system.

*** xml                                                           :attribute:

Extensible Markup Language.

*** odb                                                           :attribute:

ODB options.

*** sln                                                           :attribute:

Visual studio solution.

*** mustache                                                      :attribute:

Mustache templates.

** physical name                                                    :element:
   :PROPERTIES:
   :custom_id: O28
   :masd.codec.stereotypes: Nameable
   :END:

Name of a physical model element.

*** id                                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: physical_id
    :END:

ID for a physical element.

** Nameable                                                         :element:
   :PROPERTIES:
   :custom_id: O29
   :masd.codec.stereotypes: masd::object_template
   :END:

Ability to have a name.

*** simple                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Simple name for a modeling element.

** logical meta physical id                                         :element:
   :PROPERTIES:
   :custom_id: O30
   :masd.codec.stereotypes: dogen::hashable
   :END:

ID in the logical-physical space.

*** logical id                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: logical_id
    :END:

ID of the element in the logical dimension.

*** physical meta id                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: physical_meta_id
    :END:

ID of the element in the physical dimension.

** physical id                                                      :element:
   :PROPERTIES:
   :custom_id: O32
   :masd.primitive.underlying_element: std::string
   :masd.codec.stereotypes: masd::primitive
   :END:

ID for a physical element.

** model id                                                         :element:
   :PROPERTIES:
   :custom_id: O69
   :masd.primitive.underlying_element: std::string
   :masd.codec.stereotypes: masd::primitive
   :END:

ID for a model.

** stereotype                                                       :element:
   :PROPERTIES:
   :custom_id: O70
   :masd.primitive.underlying_element: std::string
   :masd.codec.stereotypes: masd::primitive
   :END:

Stereotype.

** logical name tree                                                :element:
   :PROPERTIES:
   :custom_id: O72
   :masd.codec.stereotypes: QualifiedRepresentations
   :END:

Adds support for name composition as a tree-like structure.

A logical name tree has the responsibility of representing an instantiation of a
generic type with all of its type parameters, which themselves can also be generic
types and so on. It may also represent the simpler case of a non-generic type, in
which case only the parent name is populated and there are no children.

*** current                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: logical_name
    :END:

Name for the current level of the tree.

*** children                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<logical_name_tree>
    :END:

Names of the child elements.

*** are children opaque                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the association with its children can be opaque.

Children are considered opaque when the parent does not require knowledge
about the childs' internal structure. This is the case, for example, with C and
C++ pointers, references and so on.

*** is circular dependency                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the presence of the current name causes a circular dependency.

*** is current simple type                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

Returns true if @e current is a simple type such as a built-in or an enumeration.

*** is floating point                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, "current" stores a floating point type.

** QualifiedRepresentations                                         :element:
   :PROPERTIES:
   :custom_id: O73
   :masd.codec.stereotypes: masd::object_template
   :END:

Name with multiple qualified representations.

*** qualified                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: qualified_representations
    :END:

Contains the name according to different representations.

** archetype name set                                               :element:
   :PROPERTIES:
   :custom_id: O95
   :END:

*** logical meta id                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: logical_meta_id
    :END:

Identifier of the meta-element in the logical dimension.

*** meta names                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<physical_meta_name>
    :END:

All meta-names that belong to this group.

*** canonical locations                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<physical_meta_id, physical_meta_id>
    :END:

Maps a concrete archetype location to its canonical form, if the canonical
form is supported. Otherwise no such mapping will exist.

*** archetype for label                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<physical_meta_id, physical_meta_id>
    :END:

Maps a label to archetype ID within the present logical manifold.

** physical meta name indices                                       :element:
   :PROPERTIES:
   :custom_id: O97
   :END:

Containing physical meta-names, indexed as required by use cases.

*** all                                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<physical_meta_name>
    :END:

All meta-names.

*** facet names by backend name                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<physical_meta_id, std::unordered_set<physical_meta_id>>
    :END:

Qualified names of facets by qualified names of backends.

*** archetype names by logical meta name                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<logical_meta_id, archetype_name_set>
    :END:

Physical meta-names by logical meta-names.

*** archetype names by backend by facet                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<physical_meta_id, std::unordered_map<physical_meta_id, std::list<physical_meta_id>>>
    :END:

Archetype names by qualified backend and facet names

*** technical space for archetype                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<physical_meta_id, technical_space>
    :END:

Resolves a given physical meta-model element ID into its technical space.

** technical space version                                          :element:
   :PROPERTIES:
   :custom_id: O102
   :masd.codec.stereotypes: masd::enumeration
   :END:

Version of the technical space to use.

*** cpp 98                                                        :attribute:

*** cpp 11                                                        :attribute:

*** cpp 14                                                        :attribute:

*** cpp 17                                                        :attribute:

* helpers                                                            :module:
  :PROPERTIES:
  :custom_id: O36
  :masd.codec.dia.comment: true
  :END:

Assorted helpers used to construct domain entities.

** identifiable factory                                             :element:
   :PROPERTIES:
   :custom_id: O37
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** building error                                                   :element:
   :PROPERTIES:
   :custom_id: O38
   :masd.codec.stereotypes: masd::exception
   :END:

An error occurred whilst building.

** qualified representations builder                                :element:
   :PROPERTIES:
   :custom_id: O39
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

*** dot printer                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: pretty_printer
    :END:

*** colon printer                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: pretty_printer
    :END:

** logical name factory                                             :element:
   :PROPERTIES:
   :custom_id: O40
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** logical name builder                                             :element:
   :PROPERTIES:
   :custom_id: O41
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

*** name                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: entities::logical_name
    :END:

** logical name flattener                                           :element:
   :PROPERTIES:
   :custom_id: O44
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** logical location builder                                         :element:
   :PROPERTIES:
   :custom_id: O45
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

*** location                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: entities::logical_location
    :END:

** flattening error                                                 :element:
   :PROPERTIES:
   :custom_id: O47
   :masd.codec.stereotypes: masd::exception
   :END:

An error occurred whilst flattening a name.

** printing error                                                   :element:
   :PROPERTIES:
   :custom_id: O48
   :masd.codec.stereotypes: masd::exception
   :END:

An error occurred whilst pretty printing.

** pretty printer                                                   :element:
   :PROPERTIES:
   :custom_id: O49
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** separators                                                       :element:
   :PROPERTIES:
   :custom_id: O50
   :masd.codec.stereotypes: masd::enumeration
   :END:

Available separators to be used by the pretty printer.

*** angle brackets                                                :attribute:

Enclose name elements in '<' and '>'.

*** double colons                                                 :attribute:

Separate name elements with a '::'.

*** dots                                                          :attribute:

Separate name elements with a '.'.

** physical meta name factory                                       :element:
   :PROPERTIES:
   :custom_id: O54
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** physical meta name builder                                       :element:
   :PROPERTIES:
   :custom_id: O55
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** physical meta id builder                                         :element:
   :PROPERTIES:
   :custom_id: O56
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** logical name tree builder                                        :element:
   :PROPERTIES:
   :custom_id: O77
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

*** names                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:

*** root                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<node>
    :END:

*** current                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<node>
    :END:

** legacy logical name tree parser                                  :element:
   :PROPERTIES:
   :custom_id: O78
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** node                                                             :element:
   :PROPERTIES:
   :custom_id: O79
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

Node in a tree of logical names.

Temporary data structure used to build trees of logical names.

*** parent                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::weak_ptr<node>
    :END:

Parent in a tree.

*** data                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: entities::logical_name
    :END:

Current node.

*** children                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<boost::shared_ptr<node>>
    :END:

Child nodes in a tree.

** new logical name tree parser                                     :element:
   :PROPERTIES:
   :custom_id: O80
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** parsing error                                                    :element:
   :PROPERTIES:
   :custom_id: O82
   :masd.codec.stereotypes: masd::exception
   :END:

A fatal error has occurred while parsing.

** physical meta name validator                                     :element:
   :PROPERTIES:
   :custom_id: O88
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** validation error                                                 :element:
   :PROPERTIES:
   :custom_id: O90
   :masd.codec.stereotypes: masd::exception
   :END:

An error occurred during validation.

** physical id factory                                              :element:
   :PROPERTIES:
   :custom_id: O93
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** meta name index builder                                          :element:
   :PROPERTIES:
   :custom_id: O99
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** logical meta name factory                                        :element:
   :PROPERTIES:
   :custom_id: O100
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

* CMakeLists                                                        :element:
  :PROPERTIES:
  :custom_id: O61
  :masd.codec.stereotypes: masd::build::cmakelists, dogen::handcrafted::cmake
  :END:

* main                                                              :element:
  :PROPERTIES:
  :custom_id: O62
  :masd.codec.stereotypes: masd::entry_point, dogen::untypable
  :END:
