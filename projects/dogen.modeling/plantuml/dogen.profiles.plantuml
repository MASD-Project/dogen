@startuml
set namespaceSeparator ::
note as N1
Top-level model in Dogen that contains all of the shared
types at the meta-model level.

This model is not intended to be generated. If generated,
should not produce any output.

You should be able to reference this model from any technical
space; keep it technical space agnostic.
end note

namespace base #F2F2F2 {
    note as base_1
The base layer profiles are designed to be applied first.
Their objective is to set the initial state from which
other layers can then configure features.
    end note

    class decoration <<masd::variability::profile>> #DDECEC {
        +{field} enabled
        +{field} licence_name
        +{field} modeline_group_name
        +{field} copyright_notice
    }

    note top of  decoration
Configuration for the decoration elements.
    end note

    class extraction <<masd::variability::profile>> #DDECEC {
        +{field} delete_extra_files
        +{field} delete_empty_directories
    }

    note top of  extraction
Configuration for extraction.
    end note

    class csharp <<masd::variability::profile>> #DDECEC {
        +{field} enabled
    }

    note top of  csharp
Configures the main options for the C# backend.
    end note

    class ignores <<masd::variability::profile>> #DDECEC {
        +{field} ignore_files_matching_regex
        +{field} ignore_files_matching_regex
        +{field} ignore_files_matching_regex
    }

    note top of  ignores
Regexes to ignore.

FIXME: we should remove all ignores related to tests and add a proper
facet for manual tests.
    end note

    class base <<masd::variability::profile>> #DDECEC {
        +{field} masd.cpp.standard
    }

    base::decoration <|-- base::base
    base::extraction <|-- base::base
    base::csharp <|-- base::base
    base::ignores <|-- base::base
    class base_profile <<masd::variability::profile>> #DDECEC {
        +{field} odb.enabled
        +{field} hash.enabled
        +{field} serialization.enabled
        +{field} lexical_cast.enabled
        +{field} tests.enabled
        +{field} test_data.enabled
    }

    base::base <|-- base::base_profile
    note top of  base_profile
Configures the main options for the C++ backend.
    end note

    class default_profile <<masd::variability::profile>> #DDECEC {
    }

    base::base_profile <|-- base::default_profile
    note top of  default_profile
Variability profile for a typical dogen model.
    end note

    class disable_all_facets <<masd::variability::profile_template>> #DDECEC {
        +{field} enabled
    }

    base::base <|-- base::disable_all_facets
    note top of  disable_all_facets
Disables all facets in the C++ backend.
    end note

    class relational_profile <<masd::variability::profile>> #DDECEC {
        +{field} odb.enabled
        +{field} build.enabled
    }

    base::base_profile <|-- base::relational_profile
    class test_all_facets <<masd::variability::profile>> #DDECEC {
        +{field} masd.decoration.marker_name
        +{field} masd.cpp.tests.main.enabled
    }

    base::base <|-- base::test_all_facets
}

namespace composable #F2F2F2 {
    note as composable_1
The composable layer is made up of profiles that
are meant to be applied on top of the base layer.
These can be used to compose the final configuration
for the element.
    end note

    class typeable <<masd::variability::profile>> #DDECEC {
        +{field} masd.cpp.types.enabled
        +{field} masd.variability.profile
    }

    note top of  typeable
Model element is defined as a type.
    end note

    class pretty_printable <<masd::variability::profile>> #DDECEC {
        +{field} enabled
    }

    note top of  pretty_printable
The element has the ability to dump itself to a stream.
    end note

    class hashable <<masd::variability::profile>> #DDECEC {
        +{field} enabled
    }

    note top of  hashable
The element has the ability to generate hashes.
    end note

    class serializable <<masd::variability::profile>> #DDECEC {
        +{field} enabled
    }

    class handcrafted <<masd::variability::profile>> #DDECEC {
        +{field} masd.variability.profile
    }

    note top of  handcrafted
Base profile for model elements that are manually generated.
    end note

    class handcrafted_pretty_printable <<masd::variability::profile>> #DDECEC {
        +{field} enabled
        +{field} overwrite
    }

    composable::handcrafted <|-- composable::handcrafted_pretty_printable
    class handcrafted_typeable <<masd::variability::profile>> #DDECEC {
        +{field} enabled
        +{field} overwrite
        +{field} class_forward_declarations.enabled
    }

    composable::handcrafted <|-- composable::handcrafted_typeable
    note top of  handcrafted_typeable
Configuration for model elements that are generated manually by the user.
    end note

    class header_only <<masd::variability::profile>> #DDECEC {
        +{field} class_implementation.enabled
    }

    composable::handcrafted_typeable <|-- composable::header_only
    note top of  header_only
This element has only a types header file.
    end note

    class inheritable <<masd::variability::profile>> #DDECEC {
        +{field} masd.generalization.is_final
    }

    class implementation_only <<masd::variability::profile>> #DDECEC {
        +{field} class_header.enabled
        +{field} class_forward_declarations.enabled
        +{field} class_implementation.enabled
    }

    composable::handcrafted_typeable <|-- composable::implementation_only
    note top of  implementation_only
This element has only a types implementation file.
    end note

    class handcrafted_serializable <<masd::variability::profile>> #DDECEC {
        +{field} enabled
        +{field} overwrite
    }

    composable::handcrafted <|-- composable::handcrafted_serializable
    class convertible <<masd::variability::profile>> #DDECEC {
        +{field} enabled
    }

    class untestable <<masd::variability::profile>> #DDECEC {
        +{field} enabled
    }

    note top of  untestable
Model element will not be tested via generated tests.
    end note

    class untypable <<masd::variability::profile>> #DDECEC {
        +{field} enabled
    }

    note top of  untypable
The element does not have a types facet.
    end note

    class handcrafted_cmake <<masd::variability::profile>> #DDECEC {
        +{field} build.enabled
        +{field} build.overwrite
    }

    class forward_declarable <<masd::variability::profile>> #DDECEC {
        +{field} class_forward_declarations.enabled
    }

    note top of  forward_declarable
Element has forward declarations.
    end note

}

class test_marker <<masd::decoration::generation_marker>> #E8D0C5 {
    +{field} add_date_time
    +{field} add_warning
    +{field} add_dogen_version
    +{field} message
}

note top of  test_marker


end note

@enduml
