#+title: dogen.logical
#+options: <:nil c:nil todo:nil ^:nil d:nil date:nil author:nil
#+tags: { element(e) attribute(a) module(m) }
:PROPERTIES:
:masd.codec.dia.comment: true
:masd.codec.model_modules: dogen.logical
:masd.codec.reference: cpp.builtins
:masd.codec.reference: cpp.std
:masd.codec.reference: cpp.boost
:masd.codec.reference: dogen
:masd.codec.reference: dogen.variability
:masd.codec.reference: dogen.tracing
:masd.codec.reference: masd
:masd.codec.reference: masd.variability
:masd.codec.reference: dogen.profiles
:masd.codec.reference: dogen.physical
:masd.codec.reference: dogen.identification
:masd.codec.input_technical_space: cpp
:masd.variability.profile: dogen.profiles.base.default_profile
:END:

The logcal model defines the core entities that live in the logical dimension of
MASD's conceptual model.

Overview

The logical model strives to provide a technical-space agnostic element
representation, designed for code generation. Codec models are obtained via
frontends and transformed into "bare" logical models, at which point they can
enter its pipeline. Within it, they are processed until they form a cohesive
whole. They are then in a suitable state for code generation.

Mission

The objectives of the logical model are:

- to represent all high-level entities that exist across a number of technical
  spaces used in software engineering. These entities are not necessarily
  limited to programming entities, though, of course, these form the core set of
  elements we're interested in. Additional entities such as build sytems and
  high-level patterns such as GoF and others are also captured.
- to provide the tooling required to combine multiple models together into a
  bigger model - called the merged model.
- to ensure the consistency of the merged model via validation rules (such as
  verifying that all types have a definitions, etc.).

UML representation:

\image html dogen.logical/modeling/dogen.logical.svg

* entities                                                           :module:
  :PROPERTIES:
  :custom_id: 4703EF8B-72BF-A854-42E3-3E2A036C5FE9
  :masd.codec.dia.comment: true
  :END:

Entities that define the logical model.

** Parameterisable                                                  :element:
   :PROPERTIES:
   :custom_id: 5CEF51C1-A7DE-EFC4-A923-39BD2A687FE9
   :masd.codec.stereotypes: masd::object_template
   :masd.codec.plantuml: Parameterisable o-- type_parameters
   :END:

*** type parameters                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: type_parameters
    :END:

** type parameters                                                  :element:
   :PROPERTIES:
   :custom_id: C31D2585-6731-A8C4-438B-98EC0378AE03
   :END:

*** variable number of parameters                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

*** count                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: unsigned int
    :END:

*** always in heap                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

** Associatable                                                     :element:
   :PROPERTIES:
   :custom_id: 2AE7E131-8ADA-77E4-E303-DD0829E14A88
   :masd.codec.stereotypes: masd::object_template
   :END:

The element has the ability to associate itself with other elements.

*** transparent associations                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_name>
    :END:

Elements that are involved in aggregation or composition relationships.

*** opaque associations                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_name>
    :END:

Elements that are involved in aggregation or composition relationships via
indirection.

This is used to break cycles where required.

*** associative container keys                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_name>
    :END:

Elements that are keys in an associative container.

** Generalizable                                                    :element:
   :PROPERTIES:
   :custom_id: CD6B5804-0CBC-1A14-56DB-27E8CB8F4808
   :masd.codec.stereotypes: masd::object_template
   :END:

The element has the ability to be part of a generalization relationship.

*** is parent                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

True if this element is the parent of one or more elements, false otherwise.

*** is child                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the element has at least one parent.

*** is leaf                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

True if the type has a parent but no children.

*** is final                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the element cannot be inherited from.

*** is final requested                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<bool>
    :END:

If present and true/false, user has requested is_final to be true/false.

If not present, user did not make any statements with regards to finality.

*** is abstract                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the type is an abstract type.

*** in inheritance relationship                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

True if the object is related to at least one other object as a parent or a child.

*** root parents                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_name>
    :END:

Top-most parents at the root of the inheritance hierarchy, if any.

*** parents                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_name>
    :END:

Direct parent of this element, if any.

*** leaves                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_name>
    :END:

Elements that are at the bottom of the inheritance tree.

*** type registrar                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<identification::entities::logical_name>
    :END:

** Visitable                                                        :element:
   :PROPERTIES:
   :custom_id: C07FD6BB-10DD-33C4-3D03-B5931BB227CE
   :masd.codec.stereotypes: masd::object_template
   :END:

The ability to handle visitation.

*** base visitor                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<identification::entities::logical_name>
    :END:

Base class of the visitor that visits the current element, if any.

*** derived visitor                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<identification::entities::logical_name>
    :END:

Derived class of the visitor that visits the current element, if any.

*** is visitation root                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

*** is visitation leaf                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

** Relatable                                                        :element:
   :PROPERTIES:
   :custom_id: EB02CA2F-34EA-15B4-A023-6CDCD276979A
   :masd.codec.parent: entities::Containable, entities::Visitable, entities::Associatable, entities::Generalizable
   :masd.codec.stereotypes: masd::object_template
   :END:

Element has the ability to have relationships with other elements.

** Containable                                                      :element:
   :PROPERTIES:
   :custom_id: 94418DCE-0B68-6F54-5E6B-406609EB3418
   :masd.codec.stereotypes: masd::object_template
   :END:

The ability to be contained inside a module.

*** contained by                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_id
    :END:

ID of the element in which we are contained, if any.

*** in global module                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the element is located in the global module.

** TechnicalSpaceRelationship                                       :element:
   :PROPERTIES:
   :custom_id: BA239DB7-6263-49D4-D2DB-55C6AEB8933E
   :masd.codec.stereotypes: masd::object_template
   :END:

*** intrinsic technical space                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::technical_space
    :END:

Describes the intrinsic nature of the modeling element with regards to technical
spaces.

If the element can be mapped to a technical space then its intrinsic nature is
agnostic. Otherwise, the element belongs to a concrete technical space.

** Provenance                                                       :element:
   :PROPERTIES:
   :custom_id: 4750770A-D660-7394-4D13-6843880FFA6F
   :masd.codec.stereotypes: masd::object_template
   :END:

Details of the origin of this model element.

*** provenance                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::codec_provenance
    :END:

Details of the provenance of this model element.

** Stereotypable                                                    :element:
   :PROPERTIES:
   :custom_id: EA9E4E85-C60E-3934-2CF3-E6FD0155850F
   :masd.codec.stereotypes: masd::object_template
   :masd.codec.plantuml: Stereotypable o-- stereotypes
   :END:

*** stereotypes                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: stereotypes
    :END:

All stereotypes associated with this element.

** stereotypes                                                      :element:
   :PROPERTIES:
   :custom_id: 5CAA14F0-5A76-76A4-D5A3-0A2CE25D11A0
   :masd.codec.plantuml: stereotypes o-- static_stereotypes
   :END:

Stereotype information associated with this element.

*** static stereotypes                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<static_stereotypes>
    :END:

Stereotypes that are part of the dogen UML profile, and so are well-known to the
model.

*** dynamic stereotypes                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::stereotype>
    :END:

Stereotypes that are not part of the masd UML profile. These are user defined.

** static stereotypes                                               :element:
   :PROPERTIES:
   :custom_id: 5EB21FF9-F912-A704-F043-70B2125E6164
   :masd.codec.stereotypes: masd::enumeration
   :END:

Lists all stereotypes defined in the masd UML profile.

*** fluent                                                        :attribute:

*** immutable                                                     :attribute:

*** visitable                                                     :attribute:

*** structural object                                             :attribute:

*** structural object template                                    :attribute:

*** structural exception                                          :attribute:

*** structural primitive                                          :attribute:

*** structural enumeration                                        :attribute:

*** structural module                                             :attribute:

*** structural builtin                                            :attribute:

*** structural entry point                                        :attribute:

*** structural assistant                                          :attribute:

*** orm object                                                    :attribute:

*** orm value                                                     :attribute:

*** decoration modeline group                                     :attribute:

*** decoration modeline                                           :attribute:

*** decoration generation marker                                  :attribute:

*** decoration licence                                            :attribute:

*** variability profile                                           :attribute:

*** variability profile template                                  :attribute:

*** variability feature bundle                                    :attribute:

*** variability feature template bundle                           :attribute:

*** variability initializer                                       :attribute:

*** mapping fixed mappable                                        :attribute:

*** mapping extensible mappable                                   :attribute:

*** templating logic less template                                :attribute:

*** serialization type registrar                                  :attribute:

*** visual studio solution                                        :attribute:

*** visual studio project                                         :attribute:

*** visual studio msbuild targets                                 :attribute:

*** orm common odb options                                        :attribute:

*** build cmakelists                                              :attribute:

*** physical backend                                              :attribute:

*** physical facet                                                :attribute:

*** physical archetype                                            :attribute:

*** physical archetype kind                                       :attribute:

*** physical part                                                 :attribute:

*** physical helper                                               :attribute:

** Documentable                                                     :element:
   :PROPERTIES:
   :custom_id: 85CC8ECB-E225-8AD4-90EB-45F0B72D176A
   :masd.codec.stereotypes: masd::object_template
   :END:

Ability to provide documentation.

*** documentation                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Code comments.

These are expected to follow the grammar of the comment processing tools
of the technical space in question, e.g. Doxygen for C++, JavaDoc for Java,
etc.

** Configurable                                                     :element:
   :PROPERTIES:
   :custom_id: E41A5990-6CA4-D134-2C93-86EF7957C258
   :masd.codec.stereotypes: masd::object_template
   :END:

Ability to have meta-data associated.

*** configuration                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<variability::entities::configuration>
    :END:

Configuration for this element.

** MetaNameable                                                     :element:
   :PROPERTIES:
   :custom_id: D422CBBA-69C2-8294-A453-096336337AF0
   :masd.codec.stereotypes: masd::object_template
   :END:

Ability to have a meta-name.

*** meta name                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_meta_name
    :END:

Name of the element in the meta-model that this instance conforms to.

** Nameable                                                         :element:
   :PROPERTIES:
   :custom_id: F708E2D2-E4DB-1954-22CB-CF879D9444BE
   :masd.codec.stereotypes: masd::object_template
   :END:

Ability to have a name.

*** name                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_name
    :END:

Fully qualified name.

** Generatable                                                      :element:
   :PROPERTIES:
   :custom_id: 559CD1AE-B7FC-5104-88F3-4A2CBD0944FE
   :masd.codec.stereotypes: masd::object_template
   :masd.codec.plantuml: Generatable o-u- generability_status
   :END:

*** generability status                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: generability_status
    :END:

The status of this element with regards to generability.

** generability status                                              :element:
   :PROPERTIES:
   :custom_id: 91BF00F9-9715-F314-50E3-9B6AFFB47CFA
   :masd.codec.stereotypes: masd::enumeration
   :END:

The status of this element with regards to generability.

*** non generatable source                                        :attribute:

The element was sourced from a non-target model.

*** generation not expected                                       :attribute:

The element is of a type that is expected to have support for generation.

*** non generatable state                                         :attribute:

The element is normally generatable, but is in a state that precludes generation.

*** generation disabled                                           :attribute:

The user requested generation to be disabled.

*** generation ignored                                            :attribute:

User requested that any changes to this element are to be ignored.

*** generatable                                                   :attribute:

The element is generatable.

** Labelable                                                        :element:
   :PROPERTIES:
   :custom_id: 5FFF82DE-828A-A2D4-E81B-7949E844308A
   :masd.codec.stereotypes: masd::object_template
   :END:

The ability to attach labels to an element.

*** labels                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::label>
    :END:

All labels associated with this element.

** Stateful                                                         :element:
   :PROPERTIES:
   :custom_id: D3BB6222-DA90-7F44-ADCB-EE9D1C89B845
   :masd.codec.stereotypes: masd::object_template
   :masd.codec.plantuml: Stateful o-u- attribute: stores state in
   :END:

Ability to have a state.

*** all attributes                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<attribute>
    :END:

All attributes associated with this type.

This is a union of the following sets:

- the set of all attributes obtained via inheritance relationships;
- the set of all attributes obtained via instantiating object templates,
  including their inheritance tree;
- the set of all attributes directly associated with the type (local).

The first and third sets are cached in this object. The second isn't as we do
not have a need for it.

*** local attributes                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<attribute>
    :END:

The set of all attributes directly associated with the type.

*** inherited attributes                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_name, std::list<attribute>>
    :END:

The set of all attributes obtained via inheritance, by parent name.

Note that we are using name as a key by design (instead of id); it is required for
formatting.

*** is immutable                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, do not generate setters for the element's attributes.

*** is fluent                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, generate fluent setters.

** attribute                                                        :element:
   :PROPERTIES:
   :custom_id: 001A2270-3BCB-A714-C483-FA1A40AC7DC3
   :masd.codec.stereotypes: Documentable, Configurable, Nameable, Stereotypable
   :END:

Represents an attribute in an object.

*** unparsed type                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Original type name as it appeared in the source, without any parsing.

Name must be in one of the supported notations.

*** parsed type                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_name_tree
    :END:

Tree of names that represent the type of the attribute, after suitable parsing.

*** is immutable                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the attribute can only be read but not set.

*** is fluent                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the attribute's setter will return the object iteself.

*** orm properties                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<orm::attribute_properties>
    :END:

*** member variable name                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Representation of the attribute name as a member variable.

Note that at present we only support a single style for naming member variables,
across all languages. This will have to be revisited in the future.

*** getter setter name                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Name to use for getter and setter.

** Element                                                          :element:
   :PROPERTIES:
   :custom_id: FB7855FA-79DF-A9C4-51FB-C6977AD36BC6
   :masd.codec.parent: entities::Nameable, entities::Documentable, entities::Provenance, entities::Containable, entities::Stereotypable, entities::MetaNameable, entities::TechnicalSpaceRelationship, entities::Configurable, entities::Labelable, entities::Generatable
   :masd.codec.stereotypes: masd::object_template
   :masd.codec.plantuml: Element <|.. element
   :END:

A unit of coding that can be code generated.

We define the Element object template purely to make our life easier when
creating the element class. It is not required for any other purpose.

** element                                                          :element:
   :PROPERTIES:
   :custom_id: 11FA3A73-F424-9174-2583-D51BFFCC94A3
   :masd.codec.stereotypes: masd::visitable, Element
   :masd.codec.plantuml: element o-- helper_properties
   :END:

Represents a generic logical construct.

An element is anything of interest in a problem domain which needs to be
expressed in code generation. It covers both types (objects, enumerations, etc),
meta-types (object templates) and non-types (modules and backend specific entities).

*** decoration                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::technical_space, boost::optional<decoration::element_properties>>
    :END:

If set, decoration to be added to each generated file.

*** helper properties                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<helper_properties>
    :END:

** model                                                            :element:
   :PROPERTIES:
   :custom_id: 3FA5A710-81C4-9874-3553-701B8E6D77AA
   :masd.codec.stereotypes: Nameable, MetaNameable, Provenance
   :masd.codec.plantuml: model o-- element
   :masd.codec.plantuml: model o-- assistant_properties
   :masd.codec.plantuml: model o-- aspect_properties
   :masd.codec.plantuml: model o-- streaming_properties
   :END:

Intermediate representation of a masd model.

*** references                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_name, identification::entities::model_type>
    :END:

All other intermediate models that this model depends on, mapped to their
origin.

*** leaves                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_name>
    :END:

All leaf types in this model.

Leaves are types concrete types which have a parent.

*** root module                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<structural::module>
    :END:

*** input technical space                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::technical_space
    :END:

Technical space in which this model was written.

*** output technical spaces                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::technical_space>
    :END:

Technical spaces into which to extract the final model.

*** all technical spaces                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::technical_space>
    :END:

Set of all technical concrete spaces involved in generating this model.

Includes the primary technical space (e.g. the output technical space) as well as
all of the secondary technical spaces. Does not include any abstract technical
spaces.

*** orm properties                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<orm::model_properties>
    :END:

*** structural elements                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: structural::element_repository
    :END:

All structural elements in this model.

*** decoration elements                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: decoration::element_repository
    :END:

All decoration elements in this model.

*** variability elements                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: variability::element_repository
    :END:

All variability elements in this model.

*** mapping elements                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: mapping::element_repository
    :END:

Model elements related to element mapping.

*** templating elements                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: templating::element_repository
    :END:

Elements related to text templates.

*** serialization elements                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: serialization::element_repository
    :END:

Elements related to serialization.

*** visual studio elements                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: visual_studio::element_repository
    :END:

*** orm elements                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: orm::element_repository
    :END:

*** build elements                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: build::element_repository
    :END:

*** physical elements                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: physical::element_repository
    :END:

*** meta names                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_meta_id, identification::entities::logical_meta_name>
    :END:

All meta-names by qualified name.

*** streaming properties                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, streaming_properties>
    :END:

*** technical space version                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::technical_space_version
    :END:

Version of the technical space we are targeting.

*** aspect properties                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, aspect_properties>
    :END:

*** assistant properties                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, assistant_properties>
    :END:

** assistant properties                                             :element:
   :PROPERTIES:
   :custom_id: 38B5C749-A7FE-C4B4-84AB-C379F15AD7D4
   :END:

*** requires assistance                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the type needs help of an assistant.

*** method postfix                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Postfix to use to call the appropriate assistant method, if required.

** aspect properties                                                :element:
   :PROPERTIES:
   :custom_id: 37EEEB28-ECF9-77C4-8C03-A839BE8FD062
   :END:

*** requires static reference equals                              :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

** streaming properties                                             :element:
   :PROPERTIES:
   :custom_id: DDACB531-582A-B374-2BDB-70E8810430CC
   :END:

*** requires quoting                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

*** string conversion method                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** remove unprintable characters                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

** output model set                                                 :element:
   :PROPERTIES:
   :custom_id: 9C3D1AF3-4670-7D04-C3AB-BF9EBC76C030
   :masd.codec.stereotypes: Nameable
   :masd.codec.plantuml: output_model_set o-- model: composed of
   :END:

Represents a set of related logical models produced as ouput of the logical
model chains.

*** models                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<model>
    :END:

All models in this model set.

** input model set                                                  :element:
   :PROPERTIES:
   :custom_id: FF74E452-91BE-2534-9BAB-2CE4F4F4130E
   :masd.codec.plantuml: input_model_set o-- model: composed of
   :END:

Represents a set of related logical models used as an input to the logical model
chains.

*** target                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: model
    :END:

*** references                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<model>
    :END:

*** fixed mappings                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<std::string, std::string>
    :END:

Maps a fixed mappable name, using the scope notation, to its destination.

** elements traversal                                               :element:
   :PROPERTIES:
   :custom_id: 04747766-0B17-5034-3D23-88B43D603F91
   :masd.codec.stereotypes: dogen::handcrafted::typeable::header_only
   :END:

** TraversalVisitor                                                 :element:
   :PROPERTIES:
   :custom_id: A2973ACD-EDD9-6B94-5F23-1F2CEC731434
   :masd.codec.stereotypes: masd::object_template
   :END:

** Container                                                        :element:
   :PROPERTIES:
   :custom_id: CA5ED297-5FC7-D244-B153-B3B6CD69EB03
   :masd.codec.stereotypes: masd::object_template
   :END:

Has the ability to contain other elements.

*** contains                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::logical_id>
    :END:

All elements contained by this element.

** meta element                                                     :element:
   :PROPERTIES:
   :custom_id: A91F2216-2BA7-21E4-E55B-38B0A810A6A8
   :masd.variability.binding_point: element
   :masd.variability.stereotype: logical::meta_element
   :masd.codec.stereotypes: masd::variability::profile
   :END:

*** masd.generalization.parent                                    :attribute:
    :PROPERTIES:
    :masd.codec.value: dogen::logical::entities::element
    :END:

** build                                                             :module:
   :PROPERTIES:
   :custom_id: A7D3787F-3228-4A54-BF73-CC3CEEC95A23
   :masd.codec.dia.comment: true
   :END:

Houses all of the meta-modeling elements related to building, which don't have
their own containing namespace.

*** element repository                                              :element:
    :PROPERTIES:
    :custom_id: EA65D802-7BB9-7984-BB03-028E28EC122B
    :masd.codec.plantuml: element_repository o-- cmakelists
    :END:

**** cmakelists                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<cmakelists>>
     :END:

*** cmakelists                                                      :element:
    :PROPERTIES:
    :custom_id: AB772720-0DD9-E8A4-ED13-B497CF97D480
    :masd.codec.stereotypes: logical::meta_element
    :END:

Represents build CMakeLists files.

**** include directory path                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** source directory name                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** header file extension                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** implementation file extension                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** odb targets                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: dogen::logical::entities::orm::odb_targets
     :END:

**** tests directory name                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

** serialization                                                     :module:
   :PROPERTIES:
   :custom_id: 42C6E19D-4921-B784-267B-9BAE81A3197B
   :masd.codec.dia.comment: true
   :END:

Houses all of the meta-modeling elements related to serialisation.

*** element repository                                              :element:
    :PROPERTIES:
    :custom_id: 3D683F25-BCF2-5714-9F4B-9710B68B1E2E
    :masd.codec.plantuml: element_repository o-- type_registrar
    :END:

**** type registrars                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<type_registrar>>
     :END:

*** type registrar                                                  :element:
    :PROPERTIES:
    :custom_id: 48C3108D-4030-A234-37F3-C542091BCBF5
    :masd.codec.stereotypes: logical::meta_element
    :END:

Responsible for registering types for serialisation purposes.

Certain libraries in certain technical spaces - such as Boost Serialisation, in C++ -
require types that are in an inheritance relationship to be made known to the
serialisation infrastructure in order for the deserialisation of base and derived
types to work. The type registrar is aware of all types with such requirements and
generates the registration code as needed.

**** leaves                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

List of all concrete classes which are part of an inheritance tree.

**** registrar dependencies                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

Registrars on other models this registrar depends on.

** templating                                                        :module:
   :PROPERTIES:
   :custom_id: F29744B2-3D6D-0CC4-22DB-5EB3133C0B89
   :masd.codec.dia.comment: true
   :END:

Meta-model elements related to templating .

*** element repository                                              :element:
    :PROPERTIES:
    :custom_id: 17843251-EC6C-49C4-AF1B-4BDEE9D5E2C2
    :masd.codec.plantuml: element_repository o-- logic_less_template
    :END:

**** logic less templates                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<logic_less_template>>
     :END:

*** logic less template                                             :element:
    :PROPERTIES:
    :custom_id: B2563E21-6259-EAB4-AF63-2C8660A570B9
    :masd.codec.stereotypes: logical::meta_element
    :END:

Represents a logic-less template.

At present the system only supports wale templates.

**** content                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

#+begin_src mustache
Content of the logic-less template.
#+end_src

** orm                                                               :module:
   :PROPERTIES:
   :custom_id: 8397ACD5-165D-9A34-53B3-B2BE1B492758
   :masd.codec.dia.comment: true
   :END:

Houses all of the properties related to ORM support in Dogen.

*** element repository                                              :element:
    :PROPERTIES:
    :custom_id: 90C029A2-2590-9ED4-C4BB-C2240B13387C
    :masd.codec.plantuml: element_repository o-- common_odb_options
    :END:

**** common odb options                                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<common_odb_options>>
     :END:

*** Mappeable                                                       :element:
    :PROPERTIES:
    :custom_id: EE14939D-6A07-C624-937B-8CDE96DBEC5A
    :masd.codec.stereotypes: masd::object_template
    :END:

**** generate mapping                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, object-relational mapping will be generated for this element.

*** OrmElement                                                      :element:
    :PROPERTIES:
    :custom_id: 195741BD-A673-1DD4-A013-C0399D56D064
    :masd.codec.parent: entities::orm::Schemable, entities::orm::Caseable, entities::orm::Mappeable, entities::orm::TypeMappable, entities::orm::OdbPragmable
    :masd.codec.stereotypes: masd::object_template
    :masd.codec.plantuml: OrmElement o-- odb_options
    :masd.codec.plantuml: OrmElement <|-- object_properties
    :masd.codec.plantuml: OrmElement <|-- primitive_properties
    :END:

**** odb options                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: odb_options
     :END:

*** OdbPragmable                                                    :element:
    :PROPERTIES:
    :custom_id: 499B8C62-AFFB-28C4-E003-34B94C21894E
    :masd.codec.stereotypes: masd::object_template
    :masd.codec.plantuml: OdbPragmable <|-- attribute_properties
    :END:

**** odb pragmas                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::string>
     :END:

Pragmas for the ODB ORM backend.

*** TypeMappable                                                    :element:
    :PROPERTIES:
    :custom_id: 3C9A74E6-C2D1-DBC4-C04B-6B053ED0DF72
    :masd.codec.stereotypes: masd::object_template
    :masd.codec.plantuml: TypeMappable o-- type_mapping
    :END:

**** type mappings                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<type_mapping>
     :END:

List of mappings of relational database types.

*** type mapping                                                    :element:
    :PROPERTIES:
    :custom_id: 059C7D14-E843-B0F4-B95B-9BBB451BCA49
    :masd.codec.plantuml: type_mapping o-- database_system
    :END:

**** source type                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Type which we intend to map from. Example: TEXT.

**** destination type                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Type we intend to map to. Example: JSONB.

**** to source type                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Function that converts into the source type.

**** to destination type                                          :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Function that converts into the destination type.

**** database                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<database_system>
     :END:

Database to which the mapping applies. If none is supplied, it will apply to all.

*** database system                                                 :element:
    :PROPERTIES:
    :custom_id: 883A57FC-AC58-E2E4-395B-A623C0EB9904
    :masd.codec.stereotypes: masd::enumeration, dogen::hashable, dogen::convertible
    :END:

**** mysql                                                        :attribute:

**** postgresql                                                   :attribute:

**** oracle                                                       :attribute:

**** sql server                                                   :attribute:

**** sqlite                                                       :attribute:

*** Overridable                                                     :element:
    :PROPERTIES:
    :custom_id: 295554D9-7B9D-F7A4-D7BB-51DF542BCAAB
    :masd.codec.stereotypes: masd::object_template
    :masd.codec.plantuml: Overridable <|-- primitive_properties
    :masd.codec.plantuml: Overridable <|-- attribute_properties
    :END:

**** type overrides                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<database_system, std::string>
     :END:

Override the default type for this attribute for a given database system.

*** Caseable                                                        :element:
    :PROPERTIES:
    :custom_id: 45A5EDEB-E293-CE64-C6B3-A2D1C962EAAE
    :masd.codec.stereotypes: masd::object_template
    :masd.codec.plantuml: Caseable o-- letter_case
    :masd.codec.plantuml: Caseable <|.. model_properties
    :masd.codec.plantuml: Caseable <|.. module_properties
    :END:

The model element supports configuration related to casing.

**** letter case                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<letter_case>
     :END:

What case to use for the database identifiers.

*** letter case                                                     :element:
    :PROPERTIES:
    :custom_id: 4C231572-A1D4-6384-049B-1743D3BD7258
    :masd.codec.stereotypes: masd::enumeration, dogen::convertible
    :END:

**** upper case                                                   :attribute:

**** lower case                                                   :attribute:

*** Schemable                                                       :element:
    :PROPERTIES:
    :custom_id: F3152A48-E3C6-3354-3F8B-BF5475F70F9C
    :masd.codec.stereotypes: masd::object_template
    :masd.codec.plantuml: Schemable <|-- model_properties
    :masd.codec.plantuml: Schemable <|-- module_properties
    :END:

Model element can belong to a relational database schema.

**** schema name                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the database schema in which to place this element.

**** capitalised schema name                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Schema name with the correct capitalisation.

*** object properties                                               :element:
    :PROPERTIES:
    :custom_id: C6077E1C-DB3F-7584-1CB3-491E706D34B8
    :masd.codec.stereotypes: OrmElement
    :END:

**** table name                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the table to map this element to.

**** is value                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, treat this object as a value type (e.g. simple type) rather than as an object.

**** has primary key                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

True if the object has an attribute marked as a primary key, false otherwise.

*** primitive properties                                            :element:
    :PROPERTIES:
    :custom_id: 0404277B-7E6A-3634-2B5B-06F90AF9BF39
    :masd.codec.stereotypes: OrmElement, Overridable
    :END:

*** model properties                                                :element:
    :PROPERTIES:
    :custom_id: BE41A8FF-5970-0164-E34B-D1879CC503BA
    :masd.codec.stereotypes: Schemable, Caseable
    :END:

**** database systems                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::vector<database_system>
     :END:

*** module properties                                               :element:
    :PROPERTIES:
    :custom_id: B2F09482-E5D8-37F4-C6F3-21080CFBE61D
    :masd.codec.stereotypes: Schemable, Caseable
    :END:

*** attribute properties                                            :element:
    :PROPERTIES:
    :custom_id: 39CF89D6-E294-6B14-8B6B-630831BD8143
    :masd.codec.stereotypes: Overridable, OdbPragmable
    :END:

**** column name                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the column to use for this attribute. If populated, will override the attribute name.

**** is primary key                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this attribute is a primary key for the relation.

**** is nullable                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<bool>
     :END:

If true, the attribute can be NULL.

**** is composite                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the value of this attribute is a composite value.

*** odb options                                                     :element:
    :PROPERTIES:
    :custom_id: F937B48E-1268-23B4-A043-0006B695F919
    :END:

**** epilogue                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** include regexes                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::string>
     :END:

**** header guard prefix                                          :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

*** common odb options                                              :element:
    :PROPERTIES:
    :custom_id: BB7EA719-F09A-0DE4-4213-B94CF058FB94
    :masd.codec.stereotypes: logical::meta_element
    :END:

**** sql name case                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** databases                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::string>
     :END:

*** odb targets                                                     :element:
    :PROPERTIES:
    :custom_id: 0CF1CF49-EBCB-BDF4-6163-03A849E26A60
    :masd.codec.plantuml: odb_targets o-- odb_target
    :END:

**** main target name                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** common odb options                                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** targets                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<odb_target>
     :END:

*** odb target                                                      :element:
    :PROPERTIES:
    :custom_id: A3DC5940-8684-8F64-AFB3-4B81B61F0CA5
    :END:

**** name                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** comment                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** output directory                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** types file                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** move parameters                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::pair<std::string, std::string>>
     :END:

**** object odb options                                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

** decoration                                                        :module:
   :PROPERTIES:
   :custom_id: B6AA1CC3-05E1-9F04-AD6B-C05216D76CB7
   :masd.codec.dia.comment: true
   :END:

Houses all of the meta-modeling elements and properties related to decorations.

*** licence                                                         :element:
    :PROPERTIES:
    :custom_id: BB342BA6-2095-D2E4-81F3-BD8669298E13
    :masd.codec.stereotypes: logical::meta_element
    :END:

Represents legal licence for software projects.

**** short form                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

#+begin_src fundamental
Short version of the licence, for inclusion in project files.
#+end_src

**** long form                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

#+begin_src fundamental
Long form of the licence text, suitable for generation of LICENCE files.
#+end_src

*** modeline group                                                  :element:
    :PROPERTIES:
    :custom_id: 8BF6CBD5-7C87-85C4-E043-61D564B364B0
    :masd.codec.stereotypes: logical::meta_element, Container
    :END:

Group of modelines, logically associated.

For example, one may choose to have a set of modelines for emacs, or for vi,
etc.

**** modelines                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<boost::shared_ptr<modeline>>
     :END:

Modelines that make up the group.

*** modeline                                                        :element:
    :PROPERTIES:
    :custom_id: 850C2BE1-C757-6B94-9613-01A6D413437E
    :masd.codec.stereotypes: logical::meta_element
    :END:

Groups all the fields representing editor variables for emacs, vi, etc.

A field is a key-value pair (KVP), where name is the first element and its value
the second.

Example: -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-

In this particular case, both prefix and postfix are "-*-"; mode is the first
field name and its value is c++; the KVP separator is ":" and the field
separator is ";".

**** editor                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: editor
     :END:

The modeline will use the syntax for this editor.

**** location                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: modeline_location
     :END:

Where to place the modeline.

**** fields                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<modeline_field>
     :END:

List of all the parameters in the preamble, in order of appearence.

**** technical space                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::technical_space
     :END:

Technical space that this modeline targets.

*** editor                                                          :element:
    :PROPERTIES:
    :custom_id: 0CA5084F-D12D-1434-C713-8D6B3B2B9C38
    :masd.codec.stereotypes: masd::enumeration, dogen::convertible
    :END:

Supported editors for modelines.

**** emacs                                                        :attribute:

The emacs editor.

**** vi                                                           :attribute:

The generic vi editor.

**** vim                                                          :attribute:

The vi-like editor vim.

**** ex                                                           :attribute:

The old ex editor.

*** modeline field                                                  :element:
    :PROPERTIES:
    :custom_id: E5888EDB-E965-AAE4-59C3-99BE001425B6
    :END:

**** name                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the field.

**** value                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Value of the field.

*** modeline location                                               :element:
    :PROPERTIES:
    :custom_id: D6998FD3-83B7-C8A4-7B6B-65991FA2203D
    :masd.codec.stereotypes: masd::enumeration, dogen::convertible
    :END:

Location in the file to place the modeline.

**** top                                                          :attribute:

Very first line in file.

**** bottom                                                       :attribute:

Very last line in file.

*** generation marker                                               :element:
    :PROPERTIES:
    :custom_id: C12FD1E2-7849-6374-41FB-6D007DA50BDB
    :masd.codec.stereotypes: logical::meta_element
    :END:

Properties of the "generation marker" to add to generated files.

These are also known as "location strings".

**** add date time                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the location strings will include the date and time of generation.

This is not recomended for models that are generated often as it will trigger
rebuilds for no good reason.

**** add dogen version                                            :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, adds the version of dogen used to generate the code.

**** add model to text transform details                          :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, adds information about the transform used to generate the file.

**** add warning                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, warns users that the file was code-generated.

**** add origin sha1 hash                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, adds the SHA1 hash of the original model to the marker.

**** message                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Custom message to add to each generated file.

*** element properties                                              :element:
    :PROPERTIES:
    :custom_id: 752FB7DA-3FC6-4604-EBEB-5B867F3D73A5
    :END:

Decoration for this element.

**** preamble                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Preamble for all artefacts created from this element.

The preamble is located at the top of an artefact and includes elements such as a
modeline, licence,  copyrights, etc.

**** postamble                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Postamble for all artefacts created from this element.

The postamble is located at the bottom of an artefact and includes elements such
as a modeline.

*** element repository                                              :element:
    :PROPERTIES:
    :custom_id: CA9787E3-9ED2-25B4-20FB-42DE30573E7C
    :END:

**** modeline groups                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<modeline_group>>
     :END:

**** modelines                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<modeline>>
     :END:

**** licences                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<licence>>
     :END:

**** generation markers                                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<generation_marker>>
     :END:

** variability                                                       :module:
   :PROPERTIES:
   :custom_id: 0058CE7E-87BA-9C04-731B-ABBA51ADB686
   :masd.codec.dia.comment: true
   :END:

Houses all of the meta-modeling elements related to variability.

There are two "kinds" of entities in this namespace:

- those that are used to model the data required to code-generate dogen's
  implementation of variability. That is to say, none of these elements are
  directly involved in the processing of variability model data (i.e. the
  current user model we are processing), but instead they generate code that
  injects variability data once compiled and integrated into dogen. These types
  setup the geometry of variability space: feature bundle and feature bundle
  templates and related types.

- those that inject variability data as part of the processing of the current
  user model. These types are responsible for instantiating configurations,
  within the prevailing geometry of variability space. Example: profile and
  profile templates.

Now, it is a bit confusing how variability interacts with the variability
meta-model elements, and it may appear that we repat ourselves quite a bit when
declaring the variability feature bundles. This is a consequence of the two
types of uses for variability types described above. Lets explore this in more
detail.

In general, we tend to declare (register) features and create the static
configuration in the same place. This works for almost all cases because we
normally declare the features where we consume them. Profiles are /different/: a
profile is making use of a feature declared for a feature (simplifying
somewhat). That is, at run time, a profile is the instantiation of a feature
defined elsewhere. Remember that features are nothing more than a type system
designed to give a "strongly typed" feel to the meta-data. Profiles are just an
instantiation of those strong types.

In theory, profile meta-data should already exist and match exactly what was
defined for features; in practice there is a mismatch, and this is due to how we
modeled features and feature bundles: to avoid repetition, we placed some
features at the top-level and others in the features themselves. This approach
does not match the shape required for profiles, so we need to redefine the
bundle. However, of course, we do not want to register the features this time
around (after all, they already exist) so we need to disable feature
registration. In the future we hope to simplify this by making the shapes
align - though perhaps it will have the underisable side-effect of hiding all of
this complexity.

*** abstract feature                                                :element:
    :PROPERTIES:
    :custom_id: 879E358E-A41D-0A24-F3C3-3EF70D03B4EC
    :masd.codec.stereotypes: Documentable, Configurable, Nameable
    :END:

Contains all of the common attributes between features and feature templates.

**** original key                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Key as it was originally provided by the user.

**** key                                                          :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Identifier of the feature, as will be seen by the end user.

**** identifiable key                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Post-processed key, suitable for use as an identifier.

**** unparsed type                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Type of the static configuration field, as read out from original model.

This is the type before mapping and parsing.

**** mapped type                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Unparsed type, after mapping has taken place.

**** parsed type                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::logical_name_tree
     :END:

Mapped type, after parsing has taken place.

**** default value                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

String representing the default value set on the model.

**** value type                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: variability::entities::value_type
     :END:

Type of the value pointed to by the feature.

By implication, this also determines the type of the default value.

**** binding point                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<variability::entities::binding_point>
     :END:

Override binding point for this feature.

If the default binding point is supplied for a bundle, the features cannot
supply individual binding points. Conversely, if not supplied, they must supply
their individual binding points.

**** is optional                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the feature generated by the feature template is optional.

**** requires optionality                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the feature's static configuration will have an optional type.

This is only required if the feature template is optional and has no default value.

*** feature template                                                :element:
    :PROPERTIES:
    :custom_id: 555BD09E-93B1-72F4-D8FB-35C5A7C1C624
    :masd.codec.parent: entities::variability::abstract_feature
    :END:

Represents a feature template in variability space.

Feature templates are expanded into features within the variability model.

**** default value overrides                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<default_value_override>
     :END:

*** initializer                                                     :element:
    :PROPERTIES:
    :custom_id: 90D6075D-A6E9-6C04-8C23-74B8AF10029B
    :masd.codec.stereotypes: logical::meta_element
    :END:

Responsible for initialising features and feature templates.

**** feature template bundles                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

Names of all the templates that this initialiser will register.

**** feature bundles                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

Names of all the features that this initialiser will register.

*** element repository                                              :element:
    :PROPERTIES:
    :custom_id: D58B304F-2FE8-20A4-E37B-9C6F8C0E2B3A
    :masd.codec.plantuml: element_repository o-u- profile_template
    :masd.codec.plantuml: element_repository o-u- profile
    :masd.codec.plantuml: element_repository o-u- feature_template_bundle
    :masd.codec.plantuml: element_repository o-u- feature_bundle
    :masd.codec.plantuml: element_repository o-- initializer
    :END:

**** profile templates                                            :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<profile_template>>
     :END:

**** profiles                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<profile>>
     :END:

**** feature template bundles                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<feature_template_bundle>>
     :END:

**** feature bundles                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<feature_bundle>>
     :END:

**** initializer                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::shared_ptr<initializer>
     :END:

*** abstract bundle                                                 :element:
    :PROPERTIES:
    :custom_id: DF223F21-5F40-B3B4-27E3-7E269D38DBAF
    :masd.codec.stereotypes: logical::meta_element, Associatable
    :END:

A feature template bundle represents an aggregation of feature templates in a
model.

The feature templates should be "semantically related", that is, belong to a
related topic. A feature template bundle is used by code generation to generate
infrastructural code to ease the creation and subsequent processing of features.

Generated code comprises of two aspects:

- the registration of the feature template for the dynamic part of the
  processing;
- the generation of a static configuration class to represent the feature once
  read out from the dynamic configuration - if requested.

**** key prefix                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Prefix to use when composing the key, if any.

**** generate registration                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, code will be generated to perform the registration of the features.

**** generate static configuration                                :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the code generator will output a class to represent the static configuration.

**** requires manual default constructor                          :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the code generated for this feature template bundle needs a manually
generated default constructor.

**** default binding point                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<variability::entities::binding_point>
     :END:

Default binding point for all feature templates in this bundle.

The binding point indicates where the feature will bind when instantiated in a
model. If the default binding point is supplied for a bundle, the templates cannot
supply individual binding points. Conversely, if not supplied, they must supply
their individual binding points.

*** feature bundle                                                  :element:
    :PROPERTIES:
    :custom_id: D5FB456E-ABCB-D9C4-C673-402AC59497AC
    :masd.codec.parent: entities::variability::abstract_bundle
    :masd.codec.plantuml: feature_bundle o-- feature
    :END:

A feature bundle represents an aggregation of features in a model.

The features should be "semantically related", that is, belong to a related
topic. A feature bundle is used by code generation to generate infrastructural
code to ease the creation and subsequent processing of features.

Generated code comprises of two aspects:

- the registration of the feature for the dynamic part of the processing;
- the generation of a static configuration class to represent the feature once
  read out from the dynamic configuration.

Both of these aspects are optional, but at least one must be chosen.

**** features                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<feature>
     :END:

Set of features associated with this feature bundle.

*** feature                                                         :element:
    :PROPERTIES:
    :custom_id: 239F99BA-6B61-0E24-C0EB-863466666F74
    :masd.codec.parent: entities::variability::abstract_feature
    :END:

Represents a feature in variability space.

*** feature template bundle                                         :element:
    :PROPERTIES:
    :custom_id: 20855E30-DAE7-9D74-5423-E5979616906A
    :masd.codec.parent: entities::variability::abstract_bundle
    :masd.codec.plantuml: feature_template_bundle o-- feature_template
    :END:

A feature template bundle represents an aggregation of feature templates in a
model.

The feature templates should be "semantically related", that is, belong to a
related topic. A feature template bundle is used by code generation to generate
infrastructural code to ease the creation and subsequent processing of features.

Generated code comprises of two aspects:

- the registration of the feature template for the dynamic part of the
  processing;
- the generation of a static configuration class to represent the feature once
  read out from the dynamic configuration.

Both of these aspects are optional, but at least one must be chosen.

**** feature templates                                            :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<feature_template>
     :END:

Set of feature templates associated with this feature template bundle.

**** instantiation domain name                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

*** abstract profile                                                :element:
    :PROPERTIES:
    :custom_id: F0D24C66-AD8F-FCC4-5BDB-10A5BA34AA4D
    :masd.codec.stereotypes: logical::meta_element
    :END:

**** stereotype                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** parents                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

Parents of this profile template.

**** key prefix                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Prefix to use when composing the key, if any.

*** profile template                                                :element:
    :PROPERTIES:
    :custom_id: 15E2604B-23BD-E2E4-B13B-A3960900307C
    :masd.codec.parent: entities::variability::abstract_profile
    :masd.codec.plantuml: profile_template o-- profile_template_entry
    :END:

**** entries                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<profile_template_entry>
     :END:

*** profile                                                         :element:
    :PROPERTIES:
    :custom_id: F08E95ED-100A-8054-302B-3F1BA37A4C67
    :masd.codec.parent: entities::variability::abstract_profile
    :masd.codec.plantuml: profile o-- profile_entry
    :END:

Represents a profile from the variability subsystem.

**** entries                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<profile_entry>
     :END:

Configuration entries in this profile.

**** binding point                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Binding point for the profile.

*** abstract profile entry                                          :element:
    :PROPERTIES:
    :custom_id: 5D9A7254-F7CA-F284-BFEB-41E3367296DE
    :masd.codec.stereotypes: Documentable, Configurable, Nameable
    :END:

**** original key                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Key as it was originally provided by the user.

**** key                                                          :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** value                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::string>
     :END:

*** profile entry                                                   :element:
    :PROPERTIES:
    :custom_id: 8BAEF006-00AA-D864-667B-A4EA0890B618
    :masd.codec.parent: entities::variability::abstract_profile_entry
    :END:

*** profile template entry                                          :element:
    :PROPERTIES:
    :custom_id: 3A77CE8A-934F-5384-8173-F2D1FF4CDFAB
    :masd.codec.parent: entities::variability::abstract_profile_entry
    :END:

**** instantiation domain name                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

*** default value override                                          :element:
    :PROPERTIES:
    :custom_id: 59B1A883-D9C4-43F4-7933-CBA2DAC820C6
    :END:

**** key ends with                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** default value                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

** structural                                                        :module:
   :PROPERTIES:
   :custom_id: 1369137D-4163-0B24-A613-C87FEFE6C773
   :masd.codec.dia.comment: true
   :END:

Houses all of the meta-modeling elements related to structural modeling.

*** object template                                                 :element:
    :PROPERTIES:
    :custom_id: 2EAC4496-AC2A-5354-9A5B-2075F3BDF4EC
    :masd.codec.stereotypes: logical::meta_element, Stateful
    :END:

Represents a structural template for masd objects.

**** parents                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

List of object templates that this object template inherits from, if any.

**** is child                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, the object template has at least one parent.

*** object                                                          :element:
    :PROPERTIES:
    :custom_id: 652BDA87-C748-4644-6353-B34C6E7C2F55
    :masd.codec.stereotypes: logical::meta_element, Stateful, Relatable, Parameterisable, TechnicalSpaceProperties
    :END:

Representation of the class notion in the OOP paradigm.

The /object/ is equivalent to a meta-class, but we decided against this name
because all elements should also have the prefix meta - after all, logical is
ameta-model. Since the word class cannot be used in c++ to name types, we
decided instead to use the word object.

**** is associative container                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

Object is an associative container.

**** object templates                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

All object templates associated with this object.

**** provides opaqueness                                          :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this type provides opaqueness to any type parameters it may have.

**** can be primitive underlier                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this object can be the underlying element of a primitive.

**** orm properties                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<dogen::logical::entities::orm::object_properties>
     :END:

*** builtin                                                         :element:
    :PROPERTIES:
    :custom_id: 83AA4B0B-8AAF-B594-128B-4798DC8DF392
    :masd.codec.stereotypes: logical::meta_element
    :END:

Represents a value type that is built-in at the hardware level.

**** is default enumeration type                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this built-in is the default type to be used on enumerations.

**** is floating point                                            :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this built-in represents a floating point number.

**** can be enumeration underlier                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this element can be the underlying element of an enumeration.

**** can be primitive underlier                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this built-in can be the underlying element of a primitive.

*** exception                                                       :element:
    :PROPERTIES:
    :custom_id: 4011EAF9-F989-DE44-20D3-99CFC49C12EB
    :masd.codec.stereotypes: logical::meta_element
    :END:

Represents an exception which can be thrown.

*** visitor                                                         :element:
    :PROPERTIES:
    :custom_id: 015406F0-7D45-4634-9893-726781C5F640
    :masd.codec.stereotypes: logical::meta_element
    :END:

**** visits                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

Elements that are visitable by the visitor.

**** parent                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<identification::entities::logical_name>
     :END:

*** primitive                                                       :element:
    :PROPERTIES:
    :custom_id: C5E195F2-5BF7-8AE4-89EB-C1376EBD46B4
    :masd.codec.stereotypes: logical::meta_element, TechnicalSpaceProperties
    :END:

Defines an element created by the user to wrap another element, most likely a built-in.

**** is nullable                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this element can be null (empty).

**** value attribute                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: attribute
     :END:

Attribute that represents the value of the primitive.

**** use type aliasing                                            :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If set to true, and if the owning technical space supports it, use type aliasing.

**** is immutable                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, do not generate modifiable operations.

**** orm properties                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<dogen::logical::entities::orm::primitive_properties>
     :END:

*** module                                                          :element:
    :PROPERTIES:
    :custom_id: 4BF45BD3-2426-CA14-8F63-775DDEC40B10
    :masd.codec.stereotypes: logical::meta_element, Container
    :END:

Container for other logical elements.

Aggregates a group of logically related elements into a unit.

**** is root                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this module is thee root module of the model.

**** is global module                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, this module is the pseudo module that models the global namespace.

**** orm properties                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<dogen::logical::entities::orm::module_properties>
     :END:

*** enumeration                                                     :element:
    :PROPERTIES:
    :custom_id: D32BE669-E4E3-B5F4-75AB-DCBABD49ECF1
    :masd.codec.stereotypes: logical::meta_element
    :END:

Defines a bounded set of logically related values for a built-in type
or a string.

**** underlying element                                           :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::logical_name
     :END:

Underlying element of each instance of the enumeration.

**** enumerators                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<enumerator>
     :END:

Enumerators for this enumeration.

**** use implementation defined underlying element                :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, we will use the implementation specific default enumeration type.

**** use implementation defined enumerator values                 :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, we will rely on compiler generated enumeration values.

**** add invalid enumerator                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, an enumerator for "invalid" will be added.

*** enumerator                                                      :element:
    :PROPERTIES:
    :custom_id: BC82D63C-ED0E-13F4-C57B-5BEBD0550B19
    :masd.codec.stereotypes: Documentable, Nameable, Configurable, Stereotypable
    :END:

One of a set of valid values that an enumeration can assume.

The enumerator defines an element in the domain of the enumeration.

**** value                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Value for the enumerator.

It must be castable to instance of the type defined in the enumeration.

*** element repository                                              :element:
    :PROPERTIES:
    :custom_id: C0811C97-86C7-4B14-415B-0470A1EFD74F
    :masd.codec.plantuml: element_repository o-u- object_template
    :masd.codec.plantuml: element_repository o-u- object
    :masd.codec.plantuml: element_repository o-u- builtin
    :masd.codec.plantuml: element_repository o-u- exception
    :masd.codec.plantuml: element_repository o-u- primitive
    :masd.codec.plantuml: element_repository o-l- visitor
    :masd.codec.plantuml: element_repository o-r- module
    :masd.codec.plantuml: element_repository o-- enumeration
    :masd.codec.plantuml: element_repository o-- enumerator
    :masd.codec.plantuml: element_repository o-- entry_point
    :masd.codec.plantuml: element_repository o-- assistant
    :END:

**** modules                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<module>>
     :END:

**** object templates                                             :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<object_template>>
     :END:

**** builtins                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<builtin>>
     :END:

**** enumerations                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<enumeration>>
     :END:

**** primitives                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<primitive>>
     :END:

**** objects                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<object>>
     :END:

**** exceptions                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<exception>>
     :END:

**** visitors                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<visitor>>
     :END:

**** entry points                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<entry_point>>
     :END:

**** assistants                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<assistant>>
     :END:

*** entry point                                                     :element:
    :PROPERTIES:
    :custom_id: D5F0CFA0-75D7-DD44-7EA3-FC05C0AD2C56
    :masd.codec.stereotypes: logical::meta_element
    :END:

Represents an entry point to a binary.

*** assistant                                                       :element:
    :PROPERTIES:
    :custom_id: 112A24BB-A6BB-BEE4-10C3-B90EA43A04C0
    :masd.codec.stereotypes: logical::meta_element
    :END:

General type to provide helpers.

*** technical space properties                                      :element:
    :PROPERTIES:
    :custom_id: 3219B1D9-3BE9-92C4-895B-366F1CC1DA5E
    :END:

**** requires manual default constructor                          :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

**** requires manual move constructor                             :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

**** requires stream manipulators                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

**** requires static reference equals                             :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

*** TechnicalSpaceProperties                                        :element:
    :PROPERTIES:
    :custom_id: 1FB7F044-60B7-C194-C55B-6B628744B701
    :masd.codec.stereotypes: masd::object_template
    :masd.codec.plantuml: TechnicalSpaceProperties o-- technical_space_properties
    :END:

**** technical space properties                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: technical_space_properties
     :END:

** mapping                                                           :module:
   :PROPERTIES:
   :custom_id: 66B5F400-B314-29A4-404B-F4B791DEB8AE
   :masd.codec.dia.comment: true
   :END:

Meta-model elements related to mapping domains.

*** extensible mappable                                             :element:
    :PROPERTIES:
    :custom_id: E4DF7B68-1886-4E34-9A83-3CB288E5479A
    :masd.codec.stereotypes: logical::meta_element
    :END:

A mappable meta-model element for the general purpose of mapping.

Mappables can be used to create a Platform Independent Model (PIM), which is then
mapped to concrete types to form a Platform Specific Model (PSM). Users can
extend the mappings as required.

**** destinations                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<destination>
     :END:

All the destinations that this source has been mapped to.

*** element repository                                              :element:
    :PROPERTIES:
    :custom_id: 396FD789-8380-8A04-5EAB-0F98C65616E7
    :END:

**** extensible mappables                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<extensible_mappable>>
     :END:

**** fixed mappables                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<fixed_mappable>>
     :END:

*** destination                                                     :element:
    :PROPERTIES:
    :custom_id: EE656384-0733-76C4-9F83-97221FB3A1E0
    :END:

**** name                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::logical_name
     :END:

**** technical space                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::technical_space
     :END:

*** fixed mappable                                                  :element:
    :PROPERTIES:
    :custom_id: 3B88EA68-90EA-1FE4-E31B-D0E4A0882036
    :masd.codec.stereotypes: logical::meta_element
    :END:

A mappable meta-model element for a special purpose.

At present, the only fixed mappables used by Dogen are related to the mapping of
variability types.

**** destination                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

** visual studio                                                     :module:
   :PROPERTIES:
   :custom_id: 5F698698-B652-A674-E9AB-8187A7E6C2DC
   :masd.codec.dia.comment: true
   :END:

Houses meta-model elements related to
build systems.

*** project                                                         :element:
    :PROPERTIES:
    :custom_id: 46C91019-88A6-8ED4-2DF3-881ECCE74075
    :masd.codec.stereotypes: logical::meta_element, UniquelyIdentifiable
    :END:

Represents a Visual Studio project.

**** type guid                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

GUID used by Visual Studio to identify projects of this type.

**** item groups                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<item_group>
     :END:

Set of item groups in the project.

**** project name                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Formatted name of the project.

*** element repository                                              :element:
    :PROPERTIES:
    :custom_id: 880329CD-30B5-B924-EE0B-54A34BBE10ED
    :END:

**** solutions                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<solution>>
     :END:

All solutions in this model.

**** projects                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<project>>
     :END:

All projects in this model.

**** msbuild targets                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<msbuild_targets>>
     :END:

*** item group                                                      :element:
    :PROPERTIES:
    :custom_id: A4A0A072-963D-F594-554B-59CF3845AC0A
    :END:

Represents an MSBuild ItemGroup.

Documented as follows: Contains a set of user-defined Item elements. Every item
used in a MSBuild project must be specified as a child of an ItemGroup element.

**** items                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<item>
     :END:

Set of MSBuild Items that make up this ItemGroup.

*** item                                                            :element:
    :PROPERTIES:
    :custom_id: 0A033F25-2907-C764-E5F3-C8687FC53B99
    :END:

Represents an MSBuild Item, used in Visual Studio projects.

Documentation:  Contains a user-defined item and its metadata. Every item that is
used in a MSBuild project must be specified as a child of an ItemGroup element.

**** name                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the item, such as "Compile", "CompileCl", etc.

Maps to a well known MSBuild target.

**** include                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the file to include.

*** solution                                                        :element:
    :PROPERTIES:
    :custom_id: F8F70694-CE4B-A134-60CB-F93C5DF54C7F
    :masd.codec.stereotypes: logical::meta_element, UniquelyIdentifiable
    :END:

**** project persistence blocks                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<project_persistence_block>
     :END:

Set of project persistence blocks in this solution.

*** project persistence block                                       :element:
    :PROPERTIES:
    :custom_id: 442D6F60-7DEE-B4F4-EEFB-6D6625549AA4
    :masd.codec.stereotypes: UniquelyIdentifiable
    :END:

**** name                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the project.

**** relative path                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::filesystem::path
     :END:

Relative path to the project file.

**** type guid                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

GUID used by Visual Studio to identify projects of this type.

*** UniquelyIdentifiable                                            :element:
    :PROPERTIES:
    :custom_id: 1D13488B-72A4-A564-E5FB-70BA5C44CE44
    :masd.codec.stereotypes: masd::object_template
    :END:

**** guid                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

GUID that uniquely identifies this element.

*** msbuild targets                                                 :element:
    :PROPERTIES:
    :custom_id: 571BB731-1FDC-EB14-20D3-278D53775C9F
    :masd.codec.stereotypes: logical::meta_element
    :END:

**** odb targets                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: dogen::logical::entities::orm::odb_targets
     :END:

** physical                                                          :module:
   :PROPERTIES:
   :custom_id: 5555EE8F-1B4E-8D94-681B-FBAAEAA7B98F
   :masd.codec.dia.comment: true
   :END:

Logical representation of elements in the physical dimension.

*** element repository                                              :element:
    :PROPERTIES:
    :custom_id: 82D70E99-CD94-8A94-1973-C3F0CD144EE0
    :END:

**** backends                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<backend>>
     :END:

**** facets                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<facet>>
     :END:

**** archetypes                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<archetype>>
     :END:

**** parts                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<part>>
     :END:

**** archetype kinds                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<archetype_kind>>
     :END:

**** helpers                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<helper>>
     :END:

*** archetype                                                       :element:
    :PROPERTIES:
    :custom_id: A1BD9C27-DAF5-B604-D6FB-CFD59B936B39
    :masd.codec.stereotypes: logical::meta_element, PhysicalElement, HasTechnicalSpace
    :END:

Represents an archetype within a facet.

**** facet name                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the facet containing this element.

**** part id                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

ID for the part this archetype belongs to.

**** logical meta element id                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::logical_meta_id
     :END:

ID of the meta-element in the logical model this archetype binds to.

**** relations                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: relations
     :END:

Relation information for this archetype.

**** text templating                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: text_templating
     :END:

Properties related to the text templating for this archetype.

**** postfix                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Default postfix to use for this archetype.

*** backend                                                         :element:
    :PROPERTIES:
    :custom_id: C4A1F908-2815-F564-169B-6552FEBAEF94
    :masd.codec.stereotypes: logical::meta_element, PhysicalElement, Container, HasTechnicalSpace
    :END:

Represents a physical backend, targetting a major technical space such as C++ or C#.

**** facets                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

All facets within this backend.

**** parts                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

All parts within this backend.

**** archetype kinds                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

Kinds of archetypes defined in this backend.

**** directory name                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Default directory name to use for this backend.

*** facet                                                           :element:
    :PROPERTIES:
    :custom_id: 82ABC960-C1BA-62D4-FF13-B2D89E7F67B1
    :masd.codec.stereotypes: logical::meta_element, PhysicalElement, Container
    :END:

Represents a facet within a backend, such as type definitions.

**** archetypes                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

All archetypes in this facet.

**** helpers                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

**** directory name                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Default directory name to use for this facet.

**** postfix                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Default postfix to use for this facet.

*** part                                                            :element:
    :PROPERTIES:
    :custom_id: E666059B-5ECE-CDA4-0A2B-05517A040230
    :masd.codec.stereotypes: logical::meta_element, PhysicalElement
    :END:

Part whithin a backend.

**** external modules path contribution                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

What kind of contribution do the external modules make to the final path.

**** model modules path contribution                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

What kind of contribution do the model modules make to the final path.

**** facet path contribution                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

What kind of contribution does the facet make to the final path.

**** internal modules path contribution                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

What kind of contribution do the internal modules make to the final path.

**** requires relative path                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: bool
     :END:

If true, a relative path should be generated for this part.

**** archetypes                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<identification::entities::logical_name>
     :END:

All archetypes in this part.

**** directory name                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Default directory name to use for this part.

*** archetype kind                                                  :element:
    :PROPERTIES:
    :custom_id: 0C56E67D-9569-29C4-FABB-C5DE9F45E007
    :masd.codec.stereotypes: logical::meta_element, PhysicalElement
    :END:

**** file extension                                               :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Extension to use for the files of this kind.

*** PhysicalElement                                                 :element:
    :PROPERTIES:
    :custom_id: 5D9C7629-70B0-6D74-7AEB-6F18A83D2843
    :masd.codec.stereotypes: masd::object_template
    :END:

**** id                                                           :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Unique identifier in physical space for this element.

**** major technical space                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: identification::entities::technical_space
     :END:

Technical space to which this physical element belongs to.

**** meta model name                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the physical meta-model containing this element.

**** backend name                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Name of the backend containing this element.

*** variable relation                                               :element:
    :PROPERTIES:
    :custom_id: 6352B407-3EDE-0A44-80EB-5D29AFE31179
    :masd.codec.stereotypes: Urnable
    :END:

**** type                                                         :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Type of the variable relation.

*** constant relation                                               :element:
    :PROPERTIES:
    :custom_id: DC3552F9-5097-5C44-247B-C1B7FE033A74
    :masd.codec.stereotypes: Urnable, Labelable
    :END:

**** logical model element id                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

*** Urnable                                                         :element:
    :PROPERTIES:
    :custom_id: 39A85836-E05F-0F14-F0CB-A75A3737A665
    :masd.codec.stereotypes: masd::object_template
    :END:

**** original urn                                                 :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

URN pointing to an archetype or a label, as it was originally created by the user.

 It must have the form "archetype:" if pointing to an archetype, or  "label:" if
pointing to a label, and then is followed by "KEY:VALUE". The label must resolve
to a unique archetype.

*** hard coded relation                                             :element:
    :PROPERTIES:
    :custom_id: 6669A7F3-F1C8-D6B4-0C33-E2CBB80BB0A1
    :END:

**** value                                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

*** relations                                                       :element:
    :PROPERTIES:
    :custom_id: CCDF33AC-A3D6-E724-DE9B-D674B22E45D4
    :END:

**** status                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Status of this archetype with regards to relations.

**** constant                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<constant_relation>
     :END:

All archetypes this archetype is related to,  over a fixed logical meta-model
element.

**** variable                                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<variable_relation>
     :END:

**** hard coded                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<hard_coded_relation>
     :END:

*** text templating                                                 :element:
    :PROPERTIES:
    :custom_id: 8AD011A7-DB37-BF84-6D3B-E439E3A5077F
    :masd.codec.stereotypes: Configurable
    :END:

Contains all the properties related to the generation of archetypes themselves.

**** stitch template content                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

#+begin_src fundamental
Content of the stitch template associated with this archetype, if any exists.
#+end_src

**** wale template                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: boost::optional<identification::entities::logical_name>
     :END:

Parsed name of the wale template linked to this archetype, if any.

**** wale template content                                        :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Content of the wale template associated with this archetype, if any exists.

**** rendered stitch template                                     :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Contains the result of the stitch template after rendering.

**** relations                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: relations
     :END:

Relation information for this archetype.

*** HasTechnicalSpace                                               :element:
    :PROPERTIES:
    :custom_id: 6C5A845F-BE71-3CD4-2A13-31B1DB1C8FA7
    :masd.codec.stereotypes: masd::object_template
    :END:

**** technical space                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

Technical space to which this physical element belongs to.

*** helper                                                          :element:
    :PROPERTIES:
    :custom_id: CCD052AF-1822-0B34-E923-68945D9CB073
    :masd.codec.stereotypes: logical::meta_element, PhysicalElement
    :END:

**** part id                                                      :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** facet name                                                   :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** family                                                       :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** owning formatters                                            :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::string>
     :END:

**** owning facets                                                :attribute:
     :PROPERTIES:
     :masd.codec.type: std::list<std::string>
     :END:

**** helper name                                                  :attribute:
     :PROPERTIES:
     :masd.codec.type: std::string
     :END:

**** text templating                                              :attribute:
     :PROPERTIES:
     :masd.codec.type: text_templating
     :END:

**** relations                                                    :attribute:
     :PROPERTIES:
     :masd.codec.type: relations
     :END:

Relation information for this helper.

** helper properties                                                :element:
   :PROPERTIES:
   :custom_id: C501CB9E-BC09-6A94-DF43-4C622140C276
   :masd.codec.plantuml: helper_properties o-- helper_descriptor
   :END:

*** current                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: helper_descriptor
    :END:

*** direct descendants                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<helper_descriptor>
    :END:

*** in inheritance relationship                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

** helper descriptor                                                :element:
   :PROPERTIES:
   :custom_id: 518521BE-AF6B-2E64-3B23-9DC22077654C
   :END:

*** family                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** namespaces                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:

*** name identifiable                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** name qualified                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** name tree qualified                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** name tree identifiable                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** streaming properties                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<streaming_properties>
    :END:

*** is simple type                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

*** requires hashing helper                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

*** is circular dependency                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

*** is pointer                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

* traits                                                            :element:
  :PROPERTIES:
  :custom_id: 71E13C4D-50FC-2C74-D053-CBD22EFACCF6
  :masd.codec.stereotypes: dogen::handcrafted::typeable
  :END:

* transforms                                                         :module:
  :PROPERTIES:
  :custom_id: DB93F2E9-DC61-DF44-B453-FD72DFFF20B2
  :masd.codec.dia.comment: true
  :END:

Houses all of the transformations supported by logical.

** context                                                          :element:
   :PROPERTIES:
   :custom_id: D7FAA9BF-FBC7-4C14-857B-1DD4008F627E
   :masd.cpp.types.class_forward_declarations.enabled: true
   :masd.codec.stereotypes: dogen::typeable, dogen::pretty_printable
   :END:

Context for all logical transformations.

Contains all of the external data required for the transformations
to execute. It's not ideal to have a huge "global" class, with lots
of unrelated state; however, over time, we found that a number of
arguments were being supplied across the call graph, resulting in a
lot of repetitive code. The context gathers together all of these.

*** compatibility mode                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

*** feature model                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<variability::entities::feature_model>
    :END:

*** physical meta model                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<physical::entities::meta_model>
    :END:

Meta-model for the physical dimension.

*** mapping repository                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<helpers::mapping_set_repository>
    :END:

*** tracer                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<tracing::tracer>
    :END:

*** activity timestamp                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Human readable timestamp of when the activity took place.

** pre assembly chain                                               :element:
   :PROPERTIES:
   :custom_id: 3B578687-D7E5-4414-007B-15F09151A46F
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** model production chain                                           :element:
   :PROPERTIES:
   :custom_id: D4086076-DE7D-1464-D0EB-62272F073369
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** assembly chain                                                   :element:
   :PROPERTIES:
   :custom_id: 2F9D8BEE-C3E2-D3B4-F90B-30BF5B5D6C8D
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** post assembly chain                                              :element:
   :PROPERTIES:
   :custom_id: 1CD6DC4E-D6A9-3394-9D1B-86C49854CB66
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** merge transform                                                  :element:
   :PROPERTIES:
   :custom_id: 5A17D1E6-C631-6FE4-9563-07B4C61247A0
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** modules transform                                                :element:
   :PROPERTIES:
   :custom_id: 40A481CA-CE82-B614-7493-E33C91274B01
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** origin transform                                                 :element:
   :PROPERTIES:
   :custom_id: 04B0E3CD-B96C-F924-8093-F2933C138E1F
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** technical space transform                                        :element:
   :PROPERTIES:
   :custom_id: ED7CD6A4-CDF9-EAD4-F2AB-FBE4E6996D11
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** type params transform                                            :element:
   :PROPERTIES:
   :custom_id: 40879B63-650E-4754-DE2B-836F6855C81B
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** parsing transform                                                :element:
   :PROPERTIES:
   :custom_id: B4D4FD7D-79A2-2FE4-FAEB-614C758D83A8
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** primitives transform                                             :element:
   :PROPERTIES:
   :custom_id: A799DFDA-CE3C-0B44-C853-5C98BCFE2A5E
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** generalization transform                                         :element:
   :PROPERTIES:
   :custom_id: 1D3C23C6-42FF-85B4-797B-FBC8E1B34502
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** stereotypes transform                                            :element:
   :PROPERTIES:
   :custom_id: FA29BF29-C2E4-6184-345B-B6D7E1ABA0F2
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** object templates transform                                       :element:
   :PROPERTIES:
   :custom_id: 798E2946-C5C0-6C44-F643-4D88C5629451
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** global module transform                                          :element:
   :PROPERTIES:
   :custom_id: 61049D6C-F6FC-D954-5A5B-3201FC01C883
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** orm transform                                                    :element:
   :PROPERTIES:
   :custom_id: 0C9E67A1-5889-E5C4-8A63-6EAA00B7F3AF
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** resolver transform                                               :element:
   :PROPERTIES:
   :custom_id: FBCD9C92-867B-7A04-57AB-76A17A90DF3F
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** attributes transform                                             :element:
   :PROPERTIES:
   :custom_id: F4221EC5-F9A5-FD14-5743-F9C022616391
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** associations transform                                           :element:
   :PROPERTIES:
   :custom_id: EE4360CD-D096-2424-36FB-FEC98DC0504F
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** transformation error                                             :element:
   :PROPERTIES:
   :custom_id: 6181CCAB-FEDA-2114-1E2B-3D4FFD7305EA
   :masd.codec.stereotypes: masd::exception
   :END:

An error occurred whilst applying a transformation.

** enumerations transform                                           :element:
   :PROPERTIES:
   :custom_id: 45F61725-F3C4-C4A4-A91B-5A53CEFC5540
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** extensible mapping transform                                     :element:
   :PROPERTIES:
   :custom_id: 2200CEAC-3FBD-8E54-4193-7EEB9CCE5918
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** meta naming transform                                            :element:
   :PROPERTIES:
   :custom_id: 2CC7E8A6-90D3-D6C4-929B-478CBBEB6AB6
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** modelines transform                                              :element:
   :PROPERTIES:
   :custom_id: 91DB66DE-3EDF-71C4-57B3-582F409D3523
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** containment transform                                            :element:
   :PROPERTIES:
   :custom_id: 0A120B50-3026-7AF4-503B-8D61552B173D
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** variability features transform                                   :element:
   :PROPERTIES:
   :custom_id: 75D62B25-31D1-7014-C1F3-ACEA1C2CA15B
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** mapping elements transform                                       :element:
   :PROPERTIES:
   :custom_id: 58A42DDD-86BF-04A4-685B-4D5AA02CFD2A
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** type registrar transform                                         :element:
   :PROPERTIES:
   :custom_id: C3964817-959F-42E4-2413-FAB6316068FD
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** visual studio transform                                          :element:
   :PROPERTIES:
   :custom_id: 2A33834A-1065-FAC4-A983-C90100EDA2B0
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** visual studio project type transform                             :element:
   :PROPERTIES:
   :custom_id: 2FB731D9-9EDF-4D84-B6E3-50EF6F0BC1D3
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** odb options transform                                            :element:
   :PROPERTIES:
   :custom_id: 42235508-2200-0A44-4183-BD97D57AD796
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** variability profiles chain                                       :element:
   :PROPERTIES:
   :custom_id: F11A6226-ADEE-7EE4-BCBB-FC430B2CF381
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** dynamic stereotypes transform                                    :element:
   :PROPERTIES:
   :custom_id: D180C96D-4E90-24C4-6AD3-9B737B8C32DB
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** variability profiles transform                                   :element:
   :PROPERTIES:
   :custom_id: B69A94DD-A3F8-75A4-D6EB-E4BB6F6DC20E
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** physical entities transform                                      :element:
   :PROPERTIES:
   :custom_id: 463BE295-9ACC-D164-4EEB-6A118A25428C
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** template rendering transform                                     :element:
   :PROPERTIES:
   :custom_id: 2056DCDC-0923-6754-B1AB-DDE30841724D
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** decoration transform                                             :element:
   :PROPERTIES:
   :custom_id: 62E0CEC5-90F1-D1D4-C8E3-3A6FD1A425DB
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** all technical spaces transform                                   :element:
   :PROPERTIES:
   :custom_id: B4F26C55-31C9-4524-733B-27A5AE7B3F87
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** labelling transform                                              :element:
   :PROPERTIES:
   :custom_id: B25F7BFD-D504-C784-8BE3-97D26974ABAC
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** generability transform                                           :element:
   :PROPERTIES:
   :custom_id: B1AC92F6-D541-A044-456B-ECCA13BD486B
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** streaming properties transform                                   :element:
   :PROPERTIES:
   :custom_id: 364B94FF-9A97-6FD4-0843-7353E5488FC3
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** technical space properties transform                             :element:
   :PROPERTIES:
   :custom_id: 30C04113-0AF5-1D04-39E3-0B883DC7D4C9
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** helper properties transform                                      :element:
   :PROPERTIES:
   :custom_id: DDF798EE-2EA1-E6C4-21FB-94E377EAD580
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** aspect properties transform                                      :element:
   :PROPERTIES:
   :custom_id: 9AC9DDC7-EB9C-EE24-132B-D368A435A2D5
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** assistant properties transform                                   :element:
   :PROPERTIES:
   :custom_id: B2254621-AD10-ACD4-8D93-2102877F23DE
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

* helpers                                                            :module:
  :PROPERTIES:
  :custom_id: B5C943B5-ABBA-3404-D91B-20ADDDFBE822
  :END:

** decomposition result                                             :element:
   :PROPERTIES:
   :custom_id: 1CBB21AA-2685-6E54-515B-AAA4DA7F23FD
   :END:

*** names                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::pair<identification::entities::logical_id, identification::entities::logical_name>>
    :END:

*** meta names                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::pair<identification::entities::logical_id, identification::entities::logical_meta_name>>
    :END:

*** name trees                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::pair<identification::entities::logical_id, identification::entities::logical_name_tree>>
    :END:

** decomposer                                                       :element:
   :PROPERTIES:
   :custom_id: D53918CE-A8BC-4E04-B1F3-AA1F1AC7D7F2
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** post assembly validator                                          :element:
   :PROPERTIES:
   :custom_id: 2562538C-2AEB-8D24-FD43-E0BBAF439EF7
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** validation error                                                 :element:
   :PROPERTIES:
   :custom_id: F7C40311-29C7-7E94-E7DB-238A2D73CA76
   :masd.codec.stereotypes: masd::exception
   :END:

An error occurred during validation.

** pre assembly validator                                           :element:
   :PROPERTIES:
   :custom_id: 23EC5A17-500E-4B74-3953-06E66F83345B
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** indices                                                          :element:
   :PROPERTIES:
   :custom_id: 94089B48-1921-2B94-4913-7727014B4A02
   :END:

*** objects always in heap                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_id>
    :END:

*** elements referable by attributes                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_id>
    :END:

*** primitive underliers                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_id>
    :END:

*** enumeration underliers                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_id>
    :END:

*** abstract elements                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_id>
    :END:

** indexing error                                                   :element:
   :PROPERTIES:
   :custom_id: C10DA716-5580-0434-4523-C0D9292C5B6C
   :masd.codec.stereotypes: masd::exception
   :END:

A fatal error has occurred while indexing.

** indexer                                                          :element:
   :PROPERTIES:
   :custom_id: D222A2E0-4A37-3C24-C113-9BB68609BDD4
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** resolver                                                         :element:
   :PROPERTIES:
   :custom_id: 69EDEF91-3404-27F4-4FEB-CEE68DB88857
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** resolution error                                                 :element:
   :PROPERTIES:
   :custom_id: B687DF30-41F2-7784-6653-CF69E6E51294
   :masd.codec.stereotypes: masd::exception
   :END:

An error occurred while trying to resolve a type.

** mapping error                                                    :element:
   :PROPERTIES:
   :custom_id: F320919E-890A-4714-CF3B-0C15A1CF6C16
   :masd.codec.stereotypes: masd::exception
   :END:

An error has occurred while mapping element names.

** mapper                                                           :element:
   :PROPERTIES:
   :custom_id: 6B9A808A-F544-0E24-7FB3-5FEE47B90937
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** mapping context                                                  :element:
   :PROPERTIES:
   :custom_id: 18D20D44-D95B-01C4-B283-93E809903E33
   :END:

*** translations                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, identification::entities::logical_name>
    :END:

*** erasures                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_id>
    :END:

*** codecs                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, identification::entities::logical_name>
    :END:

** mapping set                                                      :element:
   :PROPERTIES:
   :custom_id: 84251030-1CE8-0FB4-A963-3159D177511A
   :END:

Consistent unit of mapping that can be used to translate a model from one technical
space to another.

*** name                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** by agnostic id                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::technical_space, std::unordered_map<identification::entities::logical_id, identification::entities::logical_name>>
    :END:

*** erasures by technical space                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::technical_space, std::unordered_set<identification::entities::logical_id>>
    :END:

** mapping set repository                                           :element:
   :PROPERTIES:
   :custom_id: D9955C36-B89D-01E4-3E43-69A98BA5D5AF
   :END:

Stores all available mapping sets.

*** default mapping set                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: mapping_set
    :END:

*** by name                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<std::string, mapping_set>
    :END:

** mappings validator                                               :element:
   :PROPERTIES:
   :custom_id: A172D39C-446C-3934-5403-7E7EDB1F5949
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** mapping                                                          :element:
   :PROPERTIES:
   :custom_id: C848708F-91DD-0A84-D183-604C657E87D0
   :END:

Stores the mapping of a key (the element id) to its values, organised by technical
space.

*** agnostic id                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_id
    :END:

Technical space agnostic ID of the element we're mapping from.

*** by technical space                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::technical_space, mapping_value>
    :END:

Values of the mapping, by technical space.

** mapping value                                                    :element:
   :PROPERTIES:
   :custom_id: 02DDA0CF-9CB2-2924-C103-448113FFADC3
   :END:

Value of a mapping.

*** mapping action                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: mapping_actions
    :END:

*** default name                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<identification::entities::logical_name>
    :END:

** mapping actions                                                  :element:
   :PROPERTIES:
   :custom_id: A15B2AB1-149E-ED64-A8CB-6F4DE75BEB98
   :masd.codec.stereotypes: masd::enumeration
   :END:

*** translate                                                     :attribute:

*** erase                                                         :attribute:

** visual studio project type mapper                                :element:
   :PROPERTIES:
   :custom_id: 28DE36D6-6DC1-A594-E583-AADD428894A2
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** profile adapter                                                  :element:
   :PROPERTIES:
   :custom_id: F0E43A81-BFB9-7DE4-F7EB-E2E926E1EDD8
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** configuration model set adapter                                  :element:
   :PROPERTIES:
   :custom_id: 284167F3-575E-AB04-1ABB-36181AB34034
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** adaptation exception                                             :element:
   :PROPERTIES:
   :custom_id: 74DB8B92-97C3-6D94-917B-E49497B45841
   :masd.codec.stereotypes: masd::exception
   :END:

** decoration repository                                            :element:
   :PROPERTIES:
   :custom_id: B9A4599C-E5BB-2774-F613-221AAF24A7BE
   :END:

*** modelines by modeline group by technical space                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, std::unordered_map<identification::entities::technical_space, boost::shared_ptr<logical::entities::decoration::modeline>>>
    :END:

*** licences by name                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<logical::entities::decoration::licence>>
    :END:

*** generation markers by name                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, boost::shared_ptr<logical::entities::decoration::generation_marker>>
    :END:

** decoration repository factory                                    :element:
   :PROPERTIES:
   :custom_id: FA0338A2-7A74-A134-DEFB-BCBF746A0D33
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** decoration configuration                                         :element:
   :PROPERTIES:
   :custom_id: B8A493F9-2964-E414-B243-F9E2D8B7DA95
   :END:

*** enabled                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<bool>
    :END:

*** copyright notices                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:

*** licence name                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_id
    :END:

*** modeline group name                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_id
    :END:

*** marker name                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_id
    :END:

** decoration configuration factory                                 :element:
   :PROPERTIES:
   :custom_id: 80D85419-A415-31F4-F2EB-0689EFA33193
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** decoration factory                                               :element:
   :PROPERTIES:
   :custom_id: 844ED2D8-8B89-4FD4-6B2B-2DF8CB01CCEA
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** stereotypes helper                                               :element:
   :PROPERTIES:
   :custom_id: E8485626-EAEA-E804-31D3-108399914448
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** building error                                                   :element:
   :PROPERTIES:
   :custom_id: 8C4CB525-4077-69B4-9753-1CFDCE7234EC
   :masd.codec.stereotypes: masd::exception
   :END:

An error has occurred in a factory.

* features                                                           :module:
  :PROPERTIES:
  :custom_id: A669E847-7FA7-C994-F70B-0722157C2FA3
  :masd.codec.dia.comment: true
  :END:

Defines all features used by the logical model.

** type parameters                                                  :element:
   :PROPERTIES:
   :custom_id: 689689EA-B2A5-4B64-8ED3-949A3FC6CEA4
   :masd.variability.default_binding_point: element
   :masd.variability.key_prefix: masd.type_parameters
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Parameters to configure generic types.

*** variable number of parameters                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

*** count                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::number
    :masd.codec.value: "0"
    :END:

*** always in heap                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

** initializer                                                      :element:
   :PROPERTIES:
   :custom_id: D2E3FF6C-F16A-2CA4-FC83-8998A02E8368
   :masd.codec.stereotypes: masd::variability::initializer
   :END:

** enumeration                                                      :element:
   :PROPERTIES:
   :custom_id: 60A7765B-3CE2-F404-BD0B-E27BC195D496
   :masd.variability.default_binding_point: element
   :masd.variability.key_prefix: masd.enumeration
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Parameters related to enumerations.

*** use implementation defined underlying element                 :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, it uses the default implementation defined underlying element for the
technical space targeted.

*** underlying element                                            :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the underlying element to use for the enumeration.

*** use implementation defined enumerator values                  :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, uses the enumeration values supplied by the underlying technical space.

*** add invalid enumerator                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:

If true, adds an enumerator to represent an invalid choice.

** enumerator                                                       :element:
   :PROPERTIES:
   :custom_id: 29191532-9827-A164-D513-AF1087D1644D
   :masd.variability.default_binding_point: property
   :masd.variability.key_prefix: masd.enumerator
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Parameters related to enumerators.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Value to use for this enumerator. Must be unique for an enumeration.

** generalization                                                   :element:
   :PROPERTIES:
   :custom_id: FA5544B8-16D1-C344-399B-C8D4E6847AFE
   :masd.variability.default_binding_point: element
   :masd.variability.key_prefix: masd.generalization
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the generalization relationship.

*** is final                                                      :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::boolean
    :END:

Whether to mark a type as final or not.

*** parent                                                        :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the parent of the current element.

** origin                                                           :element:
   :PROPERTIES:
   :custom_id: 17D778FE-4DCA-64E4-9FEB-3DF52E090156
   :masd.variability.default_binding_point: global
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the origin of the model.

*** masd.codec.is proxy model                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, sets the origin of the model to "proxy model".

** output technical space                                           :element:
   :PROPERTIES:
   :custom_id: 14D792E3-609E-0164-6B4B-DBEC8168F3C0
   :masd.variability.default_binding_point: global
   :masd.variability.key_prefix: masd.physical
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the output technical space.

*** output technical space                                        :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Set of output technical spaces that this model targets.

** primitive                                                        :element:
   :PROPERTIES:
   :custom_id: 7551BABE-F5ED-2FD4-C453-191E892F1239
   :masd.variability.default_binding_point: element
   :masd.variability.key_prefix: masd.primitive
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to primitive elements.

*** underlying element                                            :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the underlying element to use for the primitive.

*** is nullable                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, the primitive can be null.

*** use type aliasing                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, use type aliasing to implement the primitive if the technical space supports
it.

** orm                                                              :element:
   :PROPERTIES:
   :custom_id: AC9BF842-2B38-02C4-BC0B-1F9193486255
   :masd.variability.key_prefix: masd.orm
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to ORM support.

*** database system                                               :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Database system to target for ORM support.

*** table name                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the database table for this element.

*** schema name                                                   :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the database schema for this modeling element.

*** is primary key                                                :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::boolean
    :END:

If true, this property will be used for the primary key.

*** column name                                                   :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Overrides the name of the column name for the database table.

*** is nullable                                                   :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::boolean
    :END:

If true, the column can be null.

*** is composite                                                  :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::boolean
    :END:

If true, the primary key is a composite key.

*** letter case                                                   :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Determines the casing to use for identifiers.

*** type override                                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Overrides to use for the relational type, for a given database system.

Note: we've set the binding point to "any" as a hack to allow for primitive support.
Should really be "property".

*** type mapping                                                  :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Type maps to create for the relational type, possibly for a given database system.

Note: we've set the binding point to "any" as a hack to allow for primitive support.
Should really be "property".

*** odb pragma                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Raw ODB pragmas that are applied as-is by the system.

Use these when you need some functionality which is not natively supported by
ORM in Dogen.

** decoration modeline                                              :element:
   :PROPERTIES:
   :custom_id: 811695B9-A29C-6544-C6EB-0E0B33993010
   :masd.variability.default_binding_point: any
   :masd.variability.key_prefix: masd.decoration.modeline
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Modeline properties.

*** editor                                                        :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Editor to use in this modeline.

*** location                                                      :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Where to place the modeline.

*** technical space                                               :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Technical space targeted by the modeline.

** variability templates                                            :element:
   :PROPERTIES:
   :custom_id: 72F426E7-B3F7-CA24-2643-8F49D48699AB
   :masd.variability.key_prefix: masd.variability
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the processing of variability for feature and profile templates.

*** binding point                                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Where does this feature bind into.

*** stereotype                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Stereotype for this profile. Must be globally unique.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Value for a facet or profile template.

Value as meta-data should be used only for collections, for single values prefer
the default value field if available.

*** is optional                                                   :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, the feature template provides an optional feature.

*** default value override                                        :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::key_value_pair
    :END:

Default values to override the "default" default value.

These match on keys ending with the specified string.

** mapping                                                          :element:
   :PROPERTIES:
   :custom_id: 3E3A3036-2786-E534-BF43-B1C3A47BD8AA
   :masd.variability.default_binding_point: any
   :masd.variability.key_prefix: masd.mapping
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Meta-data related to element mapping.

*** target                                                        :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Type that is the source of the mapping.

*** destination                                                   :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Type that is the destination of the mapping.

** variability bundle                                               :element:
   :PROPERTIES:
   :custom_id: B58A5B70-CC2F-C9A4-8113-37BCBD84E6AC
   :masd.variability.key_prefix: masd.variability
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the processing of variability for feature bundles.

*** generate registration                                         :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:

If true, generates code to register the features.

@pre Features must not already exist.

*** generate static configuration                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:

If true, generates a c++ class to contain the configuration at compile time.

*** default binding point                                         :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Where does this bundle bind to.

*** instantiation domain name                                     :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Template instantiation domain name to use when instantiating template.

*** key prefix                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Prefix to apply to construct the qualified name, if any.

** variability entry                                                :element:
   :PROPERTIES:
   :custom_id: 7B874238-F2A4-3E74-7633-76111DE31363
   :masd.variability.generate_registration: false
   :masd.variability.key_prefix: masd.variability
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the processing of variability for profiles and profile templates.

*** binding point                                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Where does this profile or profile template bind to.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: property
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Value for a facet or profile template.

Value as meta-data should be used only for collections, for single values prefer
the default value field if available.

*** instantiation domain name                                     :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Template instantiation domain name to use when instantiating template.

** variability profile                                              :element:
   :PROPERTIES:
   :custom_id: 64609B37-5D44-9634-B313-11729D83AAC2
   :masd.variability.generate_registration: false
   :masd.variability.key_prefix: masd.variability
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the processing of variability for profile entries.

*** stereotype                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Stereotype for this profile. Must be globally unique.

*** key prefix                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Prefix to apply to construct the qualified name, if any.

*** binding point                                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: any
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Where does this profile or profile template bind to.

** physical                                                         :element:
   :PROPERTIES:
   :custom_id: 15DD6C59-A907-E554-5553-6FD07F07DA79
   :masd.variability.default_binding_point: element
   :masd.variability.key_prefix: masd.physical
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features required for physical elements.

*** backend name                                                  :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Simple name of the backend.

FIXME: temporary until we rename the namespaces.

*** part id                                                       :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Fully qualified physical name of the part this artefact belongs to.

FIXME: optional for now.

*** logical meta element id                                       :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Fully qualified name of the logical model element.

FIXME: optional for now.

*** major technical space                                         :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Major technical space to which this element belongs to.

*** technical space                                               :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Technical space to which this element belongs to.

*** wale template reference                                       :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the wale template that the archetype uses.

*** directory name                                                :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the directory to use for this physical element.

*** postfix                                                       :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Postfix to use for this physical element.

** wale                                                             :element:
   :PROPERTIES:
   :custom_id: A0285AE5-4C68-D624-1FCB-89CA9C7BEA47
   :masd.variability.default_binding_point: any
   :masd.variability.key_prefix: masd.wale
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Wale related features.

*** text template                                                 :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the wale text template to instantiate, if any.

*** kvp                                                           :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::key_value_pair
    :END:

Array of wale KVPs to use in template instantiation.

** decoration                                                       :element:
   :PROPERTIES:
   :custom_id: 3C43259E-793C-2784-28E3-D3D9B6AFEFB3
   :masd.variability.default_binding_point: any
   :masd.variability.key_prefix: masd.decoration
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

*** enabled                                                       :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::boolean
    :END:

If true, decorations are enabled on this modeling element.

*** copyright notice                                              :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Copyright notices for this modeling element.

*** licence name                                                  :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the licence to use for this modeling element.

*** modeline group name                                           :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the modeline group for this modeling element.

*** marker name                                                   :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Name of the decoration marker to use for this modeling element.

** labelling                                                        :element:
   :PROPERTIES:
   :custom_id: F072CD7C-314E-D6A4-2B93-AB44966893EB
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to labels.

*** masd.label                                                    :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::key_value_pair
    :END:

Labels to attach to modeling elements. Key must be unique.

** physical relations                                               :element:
   :PROPERTIES:
   :custom_id: 770498E7-8F6E-F764-6BA3-32278EEB5A85
   :masd.variability.default_binding_point: any
   :masd.variability.key_prefix: masd.physical
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to relations at the physical level.

*** relation status                                               :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Relation status for the archetype.

*** variable relation                                             :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::comma_separated_collection
    :END:

Define a variable relation between the current archetype and another archetype.

*** constant relation                                             :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::comma_separated_collection
    :END:

Define a fixed relation between the current archetype and another archetype.

** streaming                                                        :element:
   :PROPERTIES:
   :custom_id: 33CB2465-AC69-2124-40C3-801486F226AE
   :masd.variability.key_prefix: masd.cpp.streaming
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

*** string conversion method                                      :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::text
    :masd.codec.value: ""
    :END:

Which conversion method to use to convert strings.

*** requires quoting                                              :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, streaming this type must be preceeded by quoting.

*** remove unprintable characters                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, streaming this type requires removing unprintable characters.

** technical space version                                          :element:
   :PROPERTIES:
   :custom_id: 2751BB2B-E3E8-8AF4-B59B-40FD6C70C08E
   :masd.variability.key_prefix: masd.cpp
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

*** standard                                                      :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.codec.type: masd::variability::text
    :masd.codec.value: "c++-14"
    :END:

Which version of C++ to use.

** technical space properties                                       :element:
   :PROPERTIES:
   :custom_id: 99FEB954-4D99-0684-9153-1211494B2245
   :masd.variability.key_prefix: masd
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

*** cpp.aspect.requires manual default constructor                :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, the modeling element requires a manual defaul constructor.

*** cpp.aspect.requires manual move constructor                   :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, the modeling element requires a manual move constructor.

*** cpp.aspect.requires stream manipulators                       :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, the modeling element requires stream manipulators.

** helpers                                                          :element:
   :PROPERTIES:
   :custom_id: E6A0167E-7E43-85E4-B5FB-1D0740239790
   :masd.variability.key_prefix: masd
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

*** helper.family                                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::text
    :masd.codec.value: "Default"
    :END:

Which family of helpers to use for this modeling element.

** physical helpers                                                 :element:
   :PROPERTIES:
   :custom_id: F6E6AC9D-6FE4-67C4-2593-F8FF52492BAF
   :masd.variability.default_binding_point: element
   :masd.variability.key_prefix: masd.physical.helpers
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to the helpers in physical domain.

*** family                                                        :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

*** owning formatters                                             :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

*** owning facets                                                 :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

*** wale template reference                                       :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

** aspect                                                           :element:
   :PROPERTIES:
   :custom_id: E9D31ABD-19C4-6A94-F9DB-868B89907197
   :masd.variability.key_prefix: masd.csharp.aspect
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

*** requires static reference equals                              :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:

** assistant                                                        :element:
   :PROPERTIES:
   :custom_id: 0B27AD1B-2C04-5154-8CA3-881049956CE5
   :masd.variability.key_prefix: masd.csharp.assistant
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

*** requires assistance                                           :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

*** method postfix                                                :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::text
    :END:

* registrar                                                         :element:
  :PROPERTIES:
  :custom_id: 2B993B05-8401-CCE4-950B-64260EA15EC7
  :masd.codec.stereotypes: masd::serialization::type_registrar
  :END:

* main                                                              :element:
  :PROPERTIES:
  :custom_id: A90C7CED-B418-F884-BCEB-F568C2831CBE
  :masd.codec.stereotypes: masd::entry_point, dogen::untypable
  :END:

* CMakeLists                                                        :element:
  :PROPERTIES:
  :custom_id: 0738A142-AA2E-07F4-F633-350630258F01
  :masd.codec.stereotypes: masd::build::cmakelists, dogen::handcrafted::cmake
  :END:

* formatters                                                         :module:
  :PROPERTIES:
  :custom_id: 6B874033-5D63-CEB4-9093-275D74BD7283
  :masd.codec.dia.comment: true
  :END:

Contains formatting classes for the logical model.

** decoration formatter                                             :element:
   :PROPERTIES:
   :custom_id: B079F62B-881A-56D4-1493-F0C8D680D44E
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** generation marker formatter                                      :element:
   :PROPERTIES:
   :custom_id: 40839C05-8527-93D4-853B-2D9DC3B0D378
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** modeline formatter                                               :element:
   :PROPERTIES:
   :custom_id: B5D3CC34-3C68-E8D4-868B-BCD75EA23156
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** formatting error                                                 :element:
   :PROPERTIES:
   :custom_id: 75AF90E7-B703-C614-4F5B-27863B5B2C17
   :masd.codec.stereotypes: masd::exception
   :END:

An error has occurred while formatting.
