/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * These files are code-generated via overrides to test dogen. Do not commit them.
 *
 * Generation timestamp: 2022-10-20T10:20:30
 * WARNING: do not edit this file manually.
 * Generated by MASD Dogen v1.0.33
 *
 * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */
#include <string>
#include <sstream>
#include <boost/predef.h>
#include <boost/lexical_cast.hpp>
#include <boost/test/unit_test.hpp>
#include <boost/serialization/nvp.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/archive/xml_iarchive.hpp>
#include <boost/archive/xml_oarchive.hpp>
#include <boost/archive/text_iarchive.hpp>
#include <boost/archive/text_oarchive.hpp>
#include <boost/archive/binary_iarchive.hpp>
#include <boost/archive/binary_oarchive.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/archive/polymorphic_iarchive.hpp>
#include <boost/archive/polymorphic_oarchive.hpp>
#include "dogen.logical/io/entities/static_stereotypes_io.hpp"
#include "dogen.logical/types/entities/static_stereotypes.hpp"
#include "dogen.logical/hash/entities/static_stereotypes_hash.hpp"
#include "dogen.logical/test_data/entities/static_stereotypes_td.hpp"
#include "dogen.logical/lexical_cast/entities/static_stereotypes_lc.hpp"
#include "dogen.logical/serialization/entities/static_stereotypes_ser.hpp"

BOOST_AUTO_TEST_SUITE(static_stereotypes_tests)

BOOST_AUTO_TEST_CASE(inserter_operator_produces_valid_json) {
    dogen::logical::entities::static_stereotypes_generator g;
    const auto a(g());
    std::stringstream s;
    s << a;

    boost::property_tree::ptree pt;
    BOOST_REQUIRE_NO_THROW(read_json(s, pt));
}

BOOST_AUTO_TEST_CASE(casting_valid_strings_produces_expected_enumeration) {
    using dogen::logical::entities::static_stereotypes;
    static_stereotypes r;

    r = boost::lexical_cast<static_stereotypes>(std::string("invalid"));
    BOOST_CHECK(r == static_stereotypes::invalid);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::invalid"));
    BOOST_CHECK(r == static_stereotypes::invalid);

    r = boost::lexical_cast<static_stereotypes>(std::string("fluent"));
    BOOST_CHECK(r == static_stereotypes::fluent);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::fluent"));
    BOOST_CHECK(r == static_stereotypes::fluent);

    r = boost::lexical_cast<static_stereotypes>(std::string("immutable"));
    BOOST_CHECK(r == static_stereotypes::immutable);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::immutable"));
    BOOST_CHECK(r == static_stereotypes::immutable);

    r = boost::lexical_cast<static_stereotypes>(std::string("visitable"));
    BOOST_CHECK(r == static_stereotypes::visitable);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::visitable"));
    BOOST_CHECK(r == static_stereotypes::visitable);

    r = boost::lexical_cast<static_stereotypes>(std::string("structural_object"));
    BOOST_CHECK(r == static_stereotypes::structural_object);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::structural_object"));
    BOOST_CHECK(r == static_stereotypes::structural_object);

    r = boost::lexical_cast<static_stereotypes>(std::string("structural_object_template"));
    BOOST_CHECK(r == static_stereotypes::structural_object_template);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::structural_object_template"));
    BOOST_CHECK(r == static_stereotypes::structural_object_template);

    r = boost::lexical_cast<static_stereotypes>(std::string("structural_exception"));
    BOOST_CHECK(r == static_stereotypes::structural_exception);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::structural_exception"));
    BOOST_CHECK(r == static_stereotypes::structural_exception);

    r = boost::lexical_cast<static_stereotypes>(std::string("structural_primitive"));
    BOOST_CHECK(r == static_stereotypes::structural_primitive);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::structural_primitive"));
    BOOST_CHECK(r == static_stereotypes::structural_primitive);

    r = boost::lexical_cast<static_stereotypes>(std::string("structural_enumeration"));
    BOOST_CHECK(r == static_stereotypes::structural_enumeration);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::structural_enumeration"));
    BOOST_CHECK(r == static_stereotypes::structural_enumeration);

    r = boost::lexical_cast<static_stereotypes>(std::string("structural_module"));
    BOOST_CHECK(r == static_stereotypes::structural_module);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::structural_module"));
    BOOST_CHECK(r == static_stereotypes::structural_module);

    r = boost::lexical_cast<static_stereotypes>(std::string("structural_builtin"));
    BOOST_CHECK(r == static_stereotypes::structural_builtin);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::structural_builtin"));
    BOOST_CHECK(r == static_stereotypes::structural_builtin);

    r = boost::lexical_cast<static_stereotypes>(std::string("structural_entry_point"));
    BOOST_CHECK(r == static_stereotypes::structural_entry_point);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::structural_entry_point"));
    BOOST_CHECK(r == static_stereotypes::structural_entry_point);

    r = boost::lexical_cast<static_stereotypes>(std::string("structural_assistant"));
    BOOST_CHECK(r == static_stereotypes::structural_assistant);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::structural_assistant"));
    BOOST_CHECK(r == static_stereotypes::structural_assistant);

    r = boost::lexical_cast<static_stereotypes>(std::string("orm_object"));
    BOOST_CHECK(r == static_stereotypes::orm_object);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::orm_object"));
    BOOST_CHECK(r == static_stereotypes::orm_object);

    r = boost::lexical_cast<static_stereotypes>(std::string("orm_value"));
    BOOST_CHECK(r == static_stereotypes::orm_value);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::orm_value"));
    BOOST_CHECK(r == static_stereotypes::orm_value);

    r = boost::lexical_cast<static_stereotypes>(std::string("decoration_modeline_group"));
    BOOST_CHECK(r == static_stereotypes::decoration_modeline_group);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::decoration_modeline_group"));
    BOOST_CHECK(r == static_stereotypes::decoration_modeline_group);

    r = boost::lexical_cast<static_stereotypes>(std::string("decoration_modeline"));
    BOOST_CHECK(r == static_stereotypes::decoration_modeline);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::decoration_modeline"));
    BOOST_CHECK(r == static_stereotypes::decoration_modeline);

    r = boost::lexical_cast<static_stereotypes>(std::string("decoration_generation_marker"));
    BOOST_CHECK(r == static_stereotypes::decoration_generation_marker);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::decoration_generation_marker"));
    BOOST_CHECK(r == static_stereotypes::decoration_generation_marker);

    r = boost::lexical_cast<static_stereotypes>(std::string("decoration_licence"));
    BOOST_CHECK(r == static_stereotypes::decoration_licence);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::decoration_licence"));
    BOOST_CHECK(r == static_stereotypes::decoration_licence);

    r = boost::lexical_cast<static_stereotypes>(std::string("variability_profile"));
    BOOST_CHECK(r == static_stereotypes::variability_profile);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::variability_profile"));
    BOOST_CHECK(r == static_stereotypes::variability_profile);

    r = boost::lexical_cast<static_stereotypes>(std::string("variability_profile_template"));
    BOOST_CHECK(r == static_stereotypes::variability_profile_template);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::variability_profile_template"));
    BOOST_CHECK(r == static_stereotypes::variability_profile_template);

    r = boost::lexical_cast<static_stereotypes>(std::string("variability_feature_bundle"));
    BOOST_CHECK(r == static_stereotypes::variability_feature_bundle);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::variability_feature_bundle"));
    BOOST_CHECK(r == static_stereotypes::variability_feature_bundle);

    r = boost::lexical_cast<static_stereotypes>(std::string("variability_feature_template_bundle"));
    BOOST_CHECK(r == static_stereotypes::variability_feature_template_bundle);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::variability_feature_template_bundle"));
    BOOST_CHECK(r == static_stereotypes::variability_feature_template_bundle);

    r = boost::lexical_cast<static_stereotypes>(std::string("variability_initializer"));
    BOOST_CHECK(r == static_stereotypes::variability_initializer);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::variability_initializer"));
    BOOST_CHECK(r == static_stereotypes::variability_initializer);

    r = boost::lexical_cast<static_stereotypes>(std::string("mapping_fixed_mappable"));
    BOOST_CHECK(r == static_stereotypes::mapping_fixed_mappable);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::mapping_fixed_mappable"));
    BOOST_CHECK(r == static_stereotypes::mapping_fixed_mappable);

    r = boost::lexical_cast<static_stereotypes>(std::string("mapping_extensible_mappable"));
    BOOST_CHECK(r == static_stereotypes::mapping_extensible_mappable);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::mapping_extensible_mappable"));
    BOOST_CHECK(r == static_stereotypes::mapping_extensible_mappable);

    r = boost::lexical_cast<static_stereotypes>(std::string("templating_logic_less_template"));
    BOOST_CHECK(r == static_stereotypes::templating_logic_less_template);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::templating_logic_less_template"));
    BOOST_CHECK(r == static_stereotypes::templating_logic_less_template);

    r = boost::lexical_cast<static_stereotypes>(std::string("serialization_type_registrar"));
    BOOST_CHECK(r == static_stereotypes::serialization_type_registrar);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::serialization_type_registrar"));
    BOOST_CHECK(r == static_stereotypes::serialization_type_registrar);

    r = boost::lexical_cast<static_stereotypes>(std::string("visual_studio_solution"));
    BOOST_CHECK(r == static_stereotypes::visual_studio_solution);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::visual_studio_solution"));
    BOOST_CHECK(r == static_stereotypes::visual_studio_solution);

    r = boost::lexical_cast<static_stereotypes>(std::string("visual_studio_project"));
    BOOST_CHECK(r == static_stereotypes::visual_studio_project);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::visual_studio_project"));
    BOOST_CHECK(r == static_stereotypes::visual_studio_project);

    r = boost::lexical_cast<static_stereotypes>(std::string("visual_studio_msbuild_targets"));
    BOOST_CHECK(r == static_stereotypes::visual_studio_msbuild_targets);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::visual_studio_msbuild_targets"));
    BOOST_CHECK(r == static_stereotypes::visual_studio_msbuild_targets);

    r = boost::lexical_cast<static_stereotypes>(std::string("orm_common_odb_options"));
    BOOST_CHECK(r == static_stereotypes::orm_common_odb_options);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::orm_common_odb_options"));
    BOOST_CHECK(r == static_stereotypes::orm_common_odb_options);

    r = boost::lexical_cast<static_stereotypes>(std::string("build_cmakelists"));
    BOOST_CHECK(r == static_stereotypes::build_cmakelists);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::build_cmakelists"));
    BOOST_CHECK(r == static_stereotypes::build_cmakelists);

    r = boost::lexical_cast<static_stereotypes>(std::string("physical_backend"));
    BOOST_CHECK(r == static_stereotypes::physical_backend);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::physical_backend"));
    BOOST_CHECK(r == static_stereotypes::physical_backend);

    r = boost::lexical_cast<static_stereotypes>(std::string("physical_facet"));
    BOOST_CHECK(r == static_stereotypes::physical_facet);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::physical_facet"));
    BOOST_CHECK(r == static_stereotypes::physical_facet);

    r = boost::lexical_cast<static_stereotypes>(std::string("physical_archetype"));
    BOOST_CHECK(r == static_stereotypes::physical_archetype);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::physical_archetype"));
    BOOST_CHECK(r == static_stereotypes::physical_archetype);

    r = boost::lexical_cast<static_stereotypes>(std::string("physical_archetype_kind"));
    BOOST_CHECK(r == static_stereotypes::physical_archetype_kind);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::physical_archetype_kind"));
    BOOST_CHECK(r == static_stereotypes::physical_archetype_kind);

    r = boost::lexical_cast<static_stereotypes>(std::string("physical_part"));
    BOOST_CHECK(r == static_stereotypes::physical_part);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::physical_part"));
    BOOST_CHECK(r == static_stereotypes::physical_part);

    r = boost::lexical_cast<static_stereotypes>(std::string("physical_helper"));
    BOOST_CHECK(r == static_stereotypes::physical_helper);
    r = boost::lexical_cast<static_stereotypes>(std::string("static_stereotypes::physical_helper"));
    BOOST_CHECK(r == static_stereotypes::physical_helper);
}

BOOST_AUTO_TEST_CASE(casting_invalid_string_throws) {
    using dogen::logical::entities::static_stereotypes;
    BOOST_CHECK_THROW(boost::lexical_cast<static_stereotypes>(std::string("DOGEN_THIS_IS_INVALID_DOGEN")),
        boost::bad_lexical_cast);
}

BOOST_AUTO_TEST_CASE(casting_valid_enumerations_produces_expected_strings) {
    using dogen::logical::entities::static_stereotypes;
    std::string r;

    r = boost::lexical_cast<std::string>(static_stereotypes::invalid);
    BOOST_CHECK(r == "static_stereotypes::invalid");

    r = boost::lexical_cast<std::string>(static_stereotypes::fluent);
    BOOST_CHECK(r == "static_stereotypes::fluent");

    r = boost::lexical_cast<std::string>(static_stereotypes::immutable);
    BOOST_CHECK(r == "static_stereotypes::immutable");

    r = boost::lexical_cast<std::string>(static_stereotypes::visitable);
    BOOST_CHECK(r == "static_stereotypes::visitable");

    r = boost::lexical_cast<std::string>(static_stereotypes::structural_object);
    BOOST_CHECK(r == "static_stereotypes::structural_object");

    r = boost::lexical_cast<std::string>(static_stereotypes::structural_object_template);
    BOOST_CHECK(r == "static_stereotypes::structural_object_template");

    r = boost::lexical_cast<std::string>(static_stereotypes::structural_exception);
    BOOST_CHECK(r == "static_stereotypes::structural_exception");

    r = boost::lexical_cast<std::string>(static_stereotypes::structural_primitive);
    BOOST_CHECK(r == "static_stereotypes::structural_primitive");

    r = boost::lexical_cast<std::string>(static_stereotypes::structural_enumeration);
    BOOST_CHECK(r == "static_stereotypes::structural_enumeration");

    r = boost::lexical_cast<std::string>(static_stereotypes::structural_module);
    BOOST_CHECK(r == "static_stereotypes::structural_module");

    r = boost::lexical_cast<std::string>(static_stereotypes::structural_builtin);
    BOOST_CHECK(r == "static_stereotypes::structural_builtin");

    r = boost::lexical_cast<std::string>(static_stereotypes::structural_entry_point);
    BOOST_CHECK(r == "static_stereotypes::structural_entry_point");

    r = boost::lexical_cast<std::string>(static_stereotypes::structural_assistant);
    BOOST_CHECK(r == "static_stereotypes::structural_assistant");

    r = boost::lexical_cast<std::string>(static_stereotypes::orm_object);
    BOOST_CHECK(r == "static_stereotypes::orm_object");

    r = boost::lexical_cast<std::string>(static_stereotypes::orm_value);
    BOOST_CHECK(r == "static_stereotypes::orm_value");

    r = boost::lexical_cast<std::string>(static_stereotypes::decoration_modeline_group);
    BOOST_CHECK(r == "static_stereotypes::decoration_modeline_group");

    r = boost::lexical_cast<std::string>(static_stereotypes::decoration_modeline);
    BOOST_CHECK(r == "static_stereotypes::decoration_modeline");

    r = boost::lexical_cast<std::string>(static_stereotypes::decoration_generation_marker);
    BOOST_CHECK(r == "static_stereotypes::decoration_generation_marker");

    r = boost::lexical_cast<std::string>(static_stereotypes::decoration_licence);
    BOOST_CHECK(r == "static_stereotypes::decoration_licence");

    r = boost::lexical_cast<std::string>(static_stereotypes::variability_profile);
    BOOST_CHECK(r == "static_stereotypes::variability_profile");

    r = boost::lexical_cast<std::string>(static_stereotypes::variability_profile_template);
    BOOST_CHECK(r == "static_stereotypes::variability_profile_template");

    r = boost::lexical_cast<std::string>(static_stereotypes::variability_feature_bundle);
    BOOST_CHECK(r == "static_stereotypes::variability_feature_bundle");

    r = boost::lexical_cast<std::string>(static_stereotypes::variability_feature_template_bundle);
    BOOST_CHECK(r == "static_stereotypes::variability_feature_template_bundle");

    r = boost::lexical_cast<std::string>(static_stereotypes::variability_initializer);
    BOOST_CHECK(r == "static_stereotypes::variability_initializer");

    r = boost::lexical_cast<std::string>(static_stereotypes::mapping_fixed_mappable);
    BOOST_CHECK(r == "static_stereotypes::mapping_fixed_mappable");

    r = boost::lexical_cast<std::string>(static_stereotypes::mapping_extensible_mappable);
    BOOST_CHECK(r == "static_stereotypes::mapping_extensible_mappable");

    r = boost::lexical_cast<std::string>(static_stereotypes::templating_logic_less_template);
    BOOST_CHECK(r == "static_stereotypes::templating_logic_less_template");

    r = boost::lexical_cast<std::string>(static_stereotypes::serialization_type_registrar);
    BOOST_CHECK(r == "static_stereotypes::serialization_type_registrar");

    r = boost::lexical_cast<std::string>(static_stereotypes::visual_studio_solution);
    BOOST_CHECK(r == "static_stereotypes::visual_studio_solution");

    r = boost::lexical_cast<std::string>(static_stereotypes::visual_studio_project);
    BOOST_CHECK(r == "static_stereotypes::visual_studio_project");

    r = boost::lexical_cast<std::string>(static_stereotypes::visual_studio_msbuild_targets);
    BOOST_CHECK(r == "static_stereotypes::visual_studio_msbuild_targets");

    r = boost::lexical_cast<std::string>(static_stereotypes::orm_common_odb_options);
    BOOST_CHECK(r == "static_stereotypes::orm_common_odb_options");

    r = boost::lexical_cast<std::string>(static_stereotypes::build_cmakelists);
    BOOST_CHECK(r == "static_stereotypes::build_cmakelists");

    r = boost::lexical_cast<std::string>(static_stereotypes::physical_backend);
    BOOST_CHECK(r == "static_stereotypes::physical_backend");

    r = boost::lexical_cast<std::string>(static_stereotypes::physical_facet);
    BOOST_CHECK(r == "static_stereotypes::physical_facet");

    r = boost::lexical_cast<std::string>(static_stereotypes::physical_archetype);
    BOOST_CHECK(r == "static_stereotypes::physical_archetype");

    r = boost::lexical_cast<std::string>(static_stereotypes::physical_archetype_kind);
    BOOST_CHECK(r == "static_stereotypes::physical_archetype_kind");

    r = boost::lexical_cast<std::string>(static_stereotypes::physical_part);
    BOOST_CHECK(r == "static_stereotypes::physical_part");

    r = boost::lexical_cast<std::string>(static_stereotypes::physical_helper);
    BOOST_CHECK(r == "static_stereotypes::physical_helper");
}

BOOST_AUTO_TEST_CASE(casting_invalid_enumeration_throws) {
#if BOOST_COMP_GNUC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    using dogen::logical::entities::static_stereotypes;
    const static_stereotypes r(static_cast<static_stereotypes>(49));
#if BOOST_COMP_GNUC
#pragma GCC diagnostic pop
#endif
    BOOST_CHECK_THROW(boost::lexical_cast<std::string>(r),
        boost::bad_lexical_cast);
}

BOOST_AUTO_TEST_CASE(xml_roundtrip_produces_the_same_entity) {
    dogen::logical::entities::static_stereotypes_generator g;
    const auto a(g());

    using namespace boost::archive;
    std::ostringstream os;
    {
        xml_oarchive oa(os);
        oa << BOOST_SERIALIZATION_NVP(a);
    }

    dogen::logical::entities::static_stereotypes b = dogen::logical::entities::static_stereotypes();
    std::istringstream is(os.str());
    {
        xml_iarchive ia(is);
        ia >> BOOST_SERIALIZATION_NVP(b);
    }
    BOOST_CHECK(a == b);
}

BOOST_AUTO_TEST_CASE(text_roundtrip_produces_the_same_entity) {
    dogen::logical::entities::static_stereotypes_generator g;
    const auto a(g());

    using namespace boost::archive;
    std::ostringstream os;
    {
        xml_oarchive oa(os);
        oa << BOOST_SERIALIZATION_NVP(a);
    }

    dogen::logical::entities::static_stereotypes b = dogen::logical::entities::static_stereotypes();
    std::istringstream is(os.str());
    {
        xml_iarchive ia(is);
        ia >> BOOST_SERIALIZATION_NVP(b);
    }
    BOOST_CHECK(a == b);
}

BOOST_AUTO_TEST_CASE(binary_roundtrip_produces_the_same_entity) {
    dogen::logical::entities::static_stereotypes_generator g;
    const auto a(g());

    using namespace boost::archive;
    std::ostringstream os;
    {
        text_oarchive oa(os);
        oa << a;
    }

    dogen::logical::entities::static_stereotypes b = dogen::logical::entities::static_stereotypes();
    std::istringstream is(os.str());
    {
        text_iarchive ia(is);
        ia >> b;
    }
    BOOST_CHECK(a == b);
}

BOOST_AUTO_TEST_CASE(equal_enums_generate_the_same_hash) {
    dogen::logical::entities::static_stereotypes_generator g;
    g();
    const auto a(g());
    const auto b(a);

    std::hash<dogen::logical::entities::static_stereotypes> hasher;
    BOOST_CHECK(hasher(a) == hasher(b));
}

BOOST_AUTO_TEST_CASE(different_enums_generate_different_hashes) {
    dogen::logical::entities::static_stereotypes_generator g;
    g();
    const auto a(g());
    const auto b(g());

    std::hash<dogen::logical::entities::static_stereotypes> hasher;
    BOOST_CHECK(hasher(a) != hasher(b));
}

BOOST_AUTO_TEST_SUITE_END()
