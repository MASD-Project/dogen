/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * These files are code-generated via overrides to test dogen. Do not commit them.
 *
 * Generation timestamp: 2022-10-20T10:20:30
 * WARNING: do not edit this file manually.
 * Generated by MASD Dogen v1.0.33
 *
 * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */
#include "dogen.logical/hash/entities/element_hash.hpp"
#include "dogen.logical/hash/entities/stereotypes_hash.hpp"
#include "dogen.identification/hash/entities/label_hash.hpp"
#include "dogen.identification/hash/entities/logical_id_hash.hpp"
#include "dogen.logical/hash/entities/helper_properties_hash.hpp"
#include "dogen.variability/hash/entities/configuration_hash.hpp"
#include "dogen.identification/hash/entities/logical_name_hash.hpp"
#include "dogen.logical/hash/entities/generability_status_hash.hpp"
#include "dogen.identification/hash/entities/technical_space_hash.hpp"
#include "dogen.identification/hash/entities/codec_provenance_hash.hpp"
#include "dogen.identification/hash/entities/logical_meta_name_hash.hpp"
#include "dogen.logical/hash/entities/decoration/element_properties_hash.hpp"

namespace {

template <typename HashableType>
inline void combine(std::size_t& seed, const HashableType& value) {
    std::hash<HashableType> hasher;
    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

inline std::size_t hash_boost_shared_ptr_dogen_variability_entities_configuration(const boost::shared_ptr<dogen::variability::entities::configuration>& v) {
    std::size_t seed(0);
    combine(seed, *v);
    return seed;
}

inline std::size_t hash_std_list_dogen_identification_entities_label(const std::list<dogen::identification::entities::label>& v) {
    std::size_t seed(0);
    for (const auto& i : v) {
        combine(seed, i);
    }
    return seed;
}

inline std::size_t hash_boost_optional_dogen_logical_entities_decoration_element_properties(const boost::optional<dogen::logical::entities::decoration::element_properties>& v) {
    std::size_t seed(0);

    if (!v)
        return seed;

    combine(seed, *v);
    return seed;
}

inline std::size_t hash_std_unordered_map_dogen_identification_entities_technical_space_boost_optional_dogen_logical_entities_decoration_element_properties(const std::unordered_map<dogen::identification::entities::technical_space, boost::optional<dogen::logical::entities::decoration::element_properties> >& v) {
    std::size_t seed(0);
    for (const auto& i : v) {
        combine(seed, i.first);
        combine(seed, hash_boost_optional_dogen_logical_entities_decoration_element_properties(i.second));
    }
    return seed;
}

inline std::size_t hash_std_list_dogen_logical_entities_helper_properties(const std::list<dogen::logical::entities::helper_properties>& v) {
    std::size_t seed(0);
    for (const auto& i : v) {
        combine(seed, i);
    }
    return seed;
}

}

namespace dogen::logical::entities {

std::size_t element_hasher::hash(const element& v) {
    std::size_t seed(0);

    combine(seed, v.name());
    combine(seed, v.documentation());
    combine(seed, v.provenance());
    combine(seed, v.contained_by());
    combine(seed, v.in_global_module());
    combine(seed, v.stereotypes());
    combine(seed, v.meta_name());
    combine(seed, v.intrinsic_technical_space());
    combine(seed, hash_boost_shared_ptr_dogen_variability_entities_configuration(v.configuration()));
    combine(seed, hash_std_list_dogen_identification_entities_label(v.labels()));
    combine(seed, v.generability_status());
    combine(seed, hash_std_unordered_map_dogen_identification_entities_technical_space_boost_optional_dogen_logical_entities_decoration_element_properties(v.decoration()));
    combine(seed, hash_std_list_dogen_logical_entities_helper_properties(v.helper_properties()));

    return seed;
}

}
