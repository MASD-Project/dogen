/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * These files are code-generated via overrides to test dogen. Do not commit them.
 *
 * Generation timestamp: 2022-10-20T10:20:30
 * WARNING: do not edit this file manually.
 * Generated by MASD Dogen v1.0.33
 *
 * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */
#include <boost/serialization/nvp.hpp>
#include <boost/serialization/list.hpp>
#include <boost/archive/xml_iarchive.hpp>
#include <boost/archive/xml_oarchive.hpp>
#include <boost/archive/text_iarchive.hpp>
#include <boost/archive/text_oarchive.hpp>
#include <boost/serialization/optional.hpp>
#include <boost/archive/binary_iarchive.hpp>
#include <boost/archive/binary_oarchive.hpp>
#include <boost/serialization/shared_ptr.hpp>
#include <boost/serialization/unordered_map.hpp>
#include <boost/serialization/unordered_set.hpp>
#include <boost/archive/polymorphic_iarchive.hpp>
#include <boost/archive/polymorphic_oarchive.hpp>
#include "dogen.logical/serialization/entities/model_ser.hpp"
#include "dogen.identification/serialization/entities/logical_id_ser.hpp"
#include "dogen.identification/serialization/entities/model_type_ser.hpp"
#include "dogen.logical/serialization/entities/aspect_properties_ser.hpp"
#include "dogen.logical/serialization/entities/structural/module_ser.hpp"
#include "dogen.identification/serialization/entities/logical_name_ser.hpp"
#include "dogen.logical/serialization/entities/assistant_properties_ser.hpp"
#include "dogen.logical/serialization/entities/orm/model_properties_ser.hpp"
#include "dogen.logical/serialization/entities/streaming_properties_ser.hpp"
#include "dogen.identification/serialization/entities/logical_meta_id_ser.hpp"
#include "dogen.identification/serialization/entities/technical_space_ser.hpp"
#include "dogen.logical/serialization/entities/orm/element_repository_ser.hpp"
#include "dogen.identification/serialization/entities/codec_provenance_ser.hpp"
#include "dogen.identification/serialization/entities/logical_meta_name_ser.hpp"
#include "dogen.logical/serialization/entities/build/element_repository_ser.hpp"
#include "dogen.logical/serialization/entities/mapping/element_repository_ser.hpp"
#include "dogen.logical/serialization/entities/physical/element_repository_ser.hpp"
#include "dogen.logical/serialization/entities/decoration/element_repository_ser.hpp"
#include "dogen.logical/serialization/entities/structural/element_repository_ser.hpp"
#include "dogen.logical/serialization/entities/templating/element_repository_ser.hpp"
#include "dogen.identification/serialization/entities/technical_space_version_ser.hpp"
#include "dogen.logical/serialization/entities/variability/element_repository_ser.hpp"
#include "dogen.logical/serialization/entities/serialization/element_repository_ser.hpp"
#include "dogen.logical/serialization/entities/visual_studio/element_repository_ser.hpp"

namespace boost {
namespace serialization {

template<typename Archive>
void save(Archive& ar,
    const dogen::logical::entities::model& v,
    const unsigned int /*version*/) {
    ar << make_nvp("name", v.name_);
    ar << make_nvp("meta_name", v.meta_name_);
    ar << make_nvp("provenance", v.provenance_);
    ar << make_nvp("references", v.references_);
    ar << make_nvp("leaves", v.leaves_);
    ar << make_nvp("root_module", v.root_module_);
    ar << make_nvp("input_technical_space", v.input_technical_space_);
    ar << make_nvp("output_technical_spaces", v.output_technical_spaces_);
    ar << make_nvp("all_technical_spaces", v.all_technical_spaces_);
    ar << make_nvp("orm_properties", v.orm_properties_);
    ar << make_nvp("structural_elements", v.structural_elements_);
    ar << make_nvp("decoration_elements", v.decoration_elements_);
    ar << make_nvp("variability_elements", v.variability_elements_);
    ar << make_nvp("mapping_elements", v.mapping_elements_);
    ar << make_nvp("templating_elements", v.templating_elements_);
    ar << make_nvp("serialization_elements", v.serialization_elements_);
    ar << make_nvp("visual_studio_elements", v.visual_studio_elements_);
    ar << make_nvp("orm_elements", v.orm_elements_);
    ar << make_nvp("build_elements", v.build_elements_);
    ar << make_nvp("physical_elements", v.physical_elements_);
    ar << make_nvp("meta_names", v.meta_names_);
    ar << make_nvp("streaming_properties", v.streaming_properties_);
    ar << make_nvp("technical_space_version", v.technical_space_version_);
    ar << make_nvp("aspect_properties", v.aspect_properties_);
    ar << make_nvp("assistant_properties", v.assistant_properties_);
}

template<typename Archive>
void load(Archive& ar,
    dogen::logical::entities::model& v,
    const unsigned int /*version*/) {
    ar >> make_nvp("name", v.name_);
    ar >> make_nvp("meta_name", v.meta_name_);
    ar >> make_nvp("provenance", v.provenance_);
    ar >> make_nvp("references", v.references_);
    ar >> make_nvp("leaves", v.leaves_);
    ar >> make_nvp("root_module", v.root_module_);
    ar >> make_nvp("input_technical_space", v.input_technical_space_);
    ar >> make_nvp("output_technical_spaces", v.output_technical_spaces_);
    ar >> make_nvp("all_technical_spaces", v.all_technical_spaces_);
    ar >> make_nvp("orm_properties", v.orm_properties_);
    ar >> make_nvp("structural_elements", v.structural_elements_);
    ar >> make_nvp("decoration_elements", v.decoration_elements_);
    ar >> make_nvp("variability_elements", v.variability_elements_);
    ar >> make_nvp("mapping_elements", v.mapping_elements_);
    ar >> make_nvp("templating_elements", v.templating_elements_);
    ar >> make_nvp("serialization_elements", v.serialization_elements_);
    ar >> make_nvp("visual_studio_elements", v.visual_studio_elements_);
    ar >> make_nvp("orm_elements", v.orm_elements_);
    ar >> make_nvp("build_elements", v.build_elements_);
    ar >> make_nvp("physical_elements", v.physical_elements_);
    ar >> make_nvp("meta_names", v.meta_names_);
    ar >> make_nvp("streaming_properties", v.streaming_properties_);
    ar >> make_nvp("technical_space_version", v.technical_space_version_);
    ar >> make_nvp("aspect_properties", v.aspect_properties_);
    ar >> make_nvp("assistant_properties", v.assistant_properties_);
}

} }

namespace boost {
namespace serialization {

template void save(archive::polymorphic_oarchive& ar, const dogen::logical::entities::model& v, unsigned int version);
template void load(archive::polymorphic_iarchive& ar, dogen::logical::entities::model& v, unsigned int version);

template void save(archive::text_oarchive& ar, const dogen::logical::entities::model& v, unsigned int version);
template void load(archive::text_iarchive& ar, dogen::logical::entities::model& v, unsigned int version);

template void save(archive::binary_oarchive& ar, const dogen::logical::entities::model& v, unsigned int version);
template void load(archive::binary_iarchive& ar, dogen::logical::entities::model& v, unsigned int version);

template void save(archive::xml_oarchive& ar, const dogen::logical::entities::model& v, unsigned int version);
template void load(archive::xml_iarchive& ar, dogen::logical::entities::model& v, unsigned int version);

} }
