/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * These files are code-generated via overrides to test dogen. Do not commit them.
 *
 * Generation timestamp: 2022-10-20T10:20:30
 * WARNING: do not edit this file manually.
 * Generated by MASD Dogen v1.0.33
 *
 * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */
#include <boost/archive/xml_iarchive.hpp>
#include <boost/archive/xml_oarchive.hpp>
#include <boost/archive/text_iarchive.hpp>
#include <boost/archive/text_oarchive.hpp>
#include <boost/archive/binary_iarchive.hpp>
#include <boost/archive/binary_oarchive.hpp>
#include <boost/archive/polymorphic_iarchive.hpp>
#include <boost/archive/polymorphic_oarchive.hpp>
#include "dogen.logical/serialization/registrar_ser.hpp"
#include "dogen.physical/serialization/registrar_ser.hpp"
#include "dogen.variability/serialization/registrar_ser.hpp"
#include "dogen.logical/serialization/entities/physical/part_ser.hpp"
#include "dogen.logical/serialization/entities/physical/facet_ser.hpp"
#include "dogen.logical/serialization/entities/physical/helper_ser.hpp"
#include "dogen.logical/serialization/entities/build/cmakelists_ser.hpp"
#include "dogen.logical/serialization/entities/physical/backend_ser.hpp"
#include "dogen.logical/serialization/entities/structural/module_ser.hpp"
#include "dogen.logical/serialization/entities/structural/object_ser.hpp"
#include "dogen.logical/serialization/entities/decoration/licence_ser.hpp"
#include "dogen.logical/serialization/entities/physical/archetype_ser.hpp"
#include "dogen.logical/serialization/entities/structural/builtin_ser.hpp"
#include "dogen.logical/serialization/entities/structural/visitor_ser.hpp"
#include "dogen.logical/serialization/entities/decoration/modeline_ser.hpp"
#include "dogen.logical/serialization/entities/variability/feature_ser.hpp"
#include "dogen.logical/serialization/entities/variability/profile_ser.hpp"
#include "dogen.logical/serialization/entities/structural/assistant_ser.hpp"
#include "dogen.logical/serialization/entities/structural/exception_ser.hpp"
#include "dogen.logical/serialization/entities/structural/primitive_ser.hpp"
#include "dogen.logical/serialization/entities/visual_studio/project_ser.hpp"
#include "dogen.logical/serialization/entities/mapping/fixed_mappable_ser.hpp"
#include "dogen.logical/serialization/entities/orm/common_odb_options_ser.hpp"
#include "dogen.logical/serialization/entities/structural/entry_point_ser.hpp"
#include "dogen.logical/serialization/entities/structural/enumeration_ser.hpp"
#include "dogen.logical/serialization/entities/visual_studio/solution_ser.hpp"
#include "dogen.logical/serialization/entities/physical/archetype_kind_ser.hpp"
#include "dogen.logical/serialization/entities/variability/initializer_ser.hpp"
#include "dogen.logical/serialization/entities/decoration/modeline_group_ser.hpp"
#include "dogen.logical/serialization/entities/variability/profile_entry_ser.hpp"
#include "dogen.logical/serialization/entities/structural/object_template_ser.hpp"
#include "dogen.logical/serialization/entities/variability/feature_bundle_ser.hpp"
#include "dogen.logical/serialization/entities/mapping/extensible_mappable_ser.hpp"
#include "dogen.logical/serialization/entities/decoration/generation_marker_ser.hpp"
#include "dogen.logical/serialization/entities/serialization/type_registrar_ser.hpp"
#include "dogen.logical/serialization/entities/variability/feature_template_ser.hpp"
#include "dogen.logical/serialization/entities/variability/profile_template_ser.hpp"
#include "dogen.logical/serialization/entities/visual_studio/msbuild_targets_ser.hpp"
#include "dogen.logical/serialization/entities/templating/logic_less_template_ser.hpp"
#include "dogen.logical/serialization/entities/variability/profile_template_entry_ser.hpp"
#include "dogen.logical/serialization/entities/variability/feature_template_bundle_ser.hpp"

namespace dogen::logical {

template<typename Archive>
void registrar::register_types(Archive& ar) {
    dogen::physical::registrar::register_types(ar);
    dogen::variability::registrar::register_types(ar);

    ar.template register_type<dogen::logical::entities::build::cmakelists>();
    ar.template register_type<dogen::logical::entities::decoration::generation_marker>();
    ar.template register_type<dogen::logical::entities::decoration::licence>();
    ar.template register_type<dogen::logical::entities::decoration::modeline>();
    ar.template register_type<dogen::logical::entities::decoration::modeline_group>();
    ar.template register_type<dogen::logical::entities::mapping::extensible_mappable>();
    ar.template register_type<dogen::logical::entities::mapping::fixed_mappable>();
    ar.template register_type<dogen::logical::entities::orm::common_odb_options>();
    ar.template register_type<dogen::logical::entities::physical::archetype>();
    ar.template register_type<dogen::logical::entities::physical::archetype_kind>();
    ar.template register_type<dogen::logical::entities::physical::backend>();
    ar.template register_type<dogen::logical::entities::physical::facet>();
    ar.template register_type<dogen::logical::entities::physical::helper>();
    ar.template register_type<dogen::logical::entities::physical::part>();
    ar.template register_type<dogen::logical::entities::serialization::type_registrar>();
    ar.template register_type<dogen::logical::entities::structural::assistant>();
    ar.template register_type<dogen::logical::entities::structural::builtin>();
    ar.template register_type<dogen::logical::entities::structural::entry_point>();
    ar.template register_type<dogen::logical::entities::structural::enumeration>();
    ar.template register_type<dogen::logical::entities::structural::exception>();
    ar.template register_type<dogen::logical::entities::structural::module>();
    ar.template register_type<dogen::logical::entities::structural::object>();
    ar.template register_type<dogen::logical::entities::structural::object_template>();
    ar.template register_type<dogen::logical::entities::structural::primitive>();
    ar.template register_type<dogen::logical::entities::structural::visitor>();
    ar.template register_type<dogen::logical::entities::templating::logic_less_template>();
    ar.template register_type<dogen::logical::entities::variability::feature>();
    ar.template register_type<dogen::logical::entities::variability::feature_bundle>();
    ar.template register_type<dogen::logical::entities::variability::feature_template>();
    ar.template register_type<dogen::logical::entities::variability::feature_template_bundle>();
    ar.template register_type<dogen::logical::entities::variability::initializer>();
    ar.template register_type<dogen::logical::entities::variability::profile>();
    ar.template register_type<dogen::logical::entities::variability::profile_entry>();
    ar.template register_type<dogen::logical::entities::variability::profile_template>();
    ar.template register_type<dogen::logical::entities::variability::profile_template_entry>();
    ar.template register_type<dogen::logical::entities::visual_studio::msbuild_targets>();
    ar.template register_type<dogen::logical::entities::visual_studio::project>();
    ar.template register_type<dogen::logical::entities::visual_studio::solution>();
}

template void registrar::register_types(boost::archive::polymorphic_oarchive& ar);
template void registrar::register_types(boost::archive::polymorphic_iarchive& ar);

template void registrar::register_types(boost::archive::text_oarchive& ar);
template void registrar::register_types(boost::archive::text_iarchive& ar);

template void registrar::register_types(boost::archive::binary_oarchive& ar);
template void registrar::register_types(boost::archive::binary_iarchive& ar);

template void registrar::register_types(boost::archive::xml_oarchive& ar);
template void registrar::register_types(boost::archive::xml_iarchive& ar);

}
