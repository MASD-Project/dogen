/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * These files are code-generated via overrides to test dogen. Do not commit them.
 *
 * Generation timestamp: 2022-10-20T10:20:30
 * WARNING: do not edit this file manually.
 * Generated by MASD Dogen v1.0.33
 *
 * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */
#include <sstream>
#include "dogen.logical/test_data/entities/element_td.hpp"
#include "dogen.logical/test_data/entities/stereotypes_td.hpp"
#include "dogen.identification/test_data/entities/label_td.hpp"
#include "dogen.logical/test_data/entities/physical/part_td.hpp"
#include "dogen.logical/test_data/entities/physical/facet_td.hpp"
#include "dogen.logical/test_data/entities/physical/helper_td.hpp"
#include "dogen.logical/test_data/entities/build/cmakelists_td.hpp"
#include "dogen.logical/test_data/entities/physical/backend_td.hpp"
#include "dogen.identification/test_data/entities/logical_id_td.hpp"
#include "dogen.logical/test_data/entities/helper_properties_td.hpp"
#include "dogen.logical/test_data/entities/structural/module_td.hpp"
#include "dogen.logical/test_data/entities/structural/object_td.hpp"
#include "dogen.variability/test_data/entities/configuration_td.hpp"
#include "dogen.logical/test_data/entities/decoration/licence_td.hpp"
#include "dogen.logical/test_data/entities/physical/archetype_td.hpp"
#include "dogen.logical/test_data/entities/structural/builtin_td.hpp"
#include "dogen.logical/test_data/entities/structural/visitor_td.hpp"
#include "dogen.identification/test_data/entities/logical_name_td.hpp"
#include "dogen.logical/test_data/entities/decoration/modeline_td.hpp"
#include "dogen.logical/test_data/entities/generability_status_td.hpp"
#include "dogen.logical/test_data/entities/variability/profile_td.hpp"
#include "dogen.logical/test_data/entities/structural/assistant_td.hpp"
#include "dogen.logical/test_data/entities/structural/exception_td.hpp"
#include "dogen.logical/test_data/entities/structural/primitive_td.hpp"
#include "dogen.logical/test_data/entities/visual_studio/project_td.hpp"
#include "dogen.identification/test_data/entities/technical_space_td.hpp"
#include "dogen.logical/test_data/entities/mapping/fixed_mappable_td.hpp"
#include "dogen.logical/test_data/entities/orm/common_odb_options_td.hpp"
#include "dogen.logical/test_data/entities/structural/entry_point_td.hpp"
#include "dogen.logical/test_data/entities/structural/enumeration_td.hpp"
#include "dogen.logical/test_data/entities/visual_studio/solution_td.hpp"
#include "dogen.identification/test_data/entities/codec_provenance_td.hpp"
#include "dogen.logical/test_data/entities/physical/archetype_kind_td.hpp"
#include "dogen.logical/test_data/entities/variability/initializer_td.hpp"
#include "dogen.identification/test_data/entities/logical_meta_name_td.hpp"
#include "dogen.logical/test_data/entities/decoration/modeline_group_td.hpp"
#include "dogen.logical/test_data/entities/structural/object_template_td.hpp"
#include "dogen.logical/test_data/entities/variability/feature_bundle_td.hpp"
#include "dogen.logical/test_data/entities/mapping/extensible_mappable_td.hpp"
#include "dogen.logical/test_data/entities/decoration/generation_marker_td.hpp"
#include "dogen.logical/test_data/entities/serialization/type_registrar_td.hpp"
#include "dogen.logical/test_data/entities/variability/profile_template_td.hpp"
#include "dogen.logical/test_data/entities/decoration/element_properties_td.hpp"
#include "dogen.logical/test_data/entities/visual_studio/msbuild_targets_td.hpp"
#include "dogen.logical/test_data/entities/templating/logic_less_template_td.hpp"
#include "dogen.logical/test_data/entities/variability/feature_template_bundle_td.hpp"

namespace {

dogen::identification::entities::logical_name
create_dogen_identification_entities_logical_name(const unsigned int position) {
    return dogen::identification::entities::logical_name_generator::create(position);
}

std::string create_std_string(const unsigned int position) {
    std::ostringstream s;
    s << "a_string_" << position;
    return s.str();
}

dogen::identification::entities::codec_provenance
create_dogen_identification_entities_codec_provenance(const unsigned int position) {
    return dogen::identification::entities::codec_provenance_generator::create(position);
}

dogen::identification::entities::logical_id
create_dogen_identification_entities_logical_id(const unsigned int position) {
    return dogen::identification::entities::logical_id_generator::create(position);
}

bool create_bool(const unsigned int position) {
    return (position % 2) != 0;
}

dogen::logical::entities::stereotypes
create_dogen_logical_entities_stereotypes(const unsigned int position) {
    return dogen::logical::entities::stereotypes_generator::create(position);
}

dogen::identification::entities::logical_meta_name
create_dogen_identification_entities_logical_meta_name(const unsigned int position) {
    return dogen::identification::entities::logical_meta_name_generator::create(position);
}

dogen::identification::entities::technical_space
create_dogen_identification_entities_technical_space(const unsigned int position) {
    return dogen::identification::entities::technical_space_generator::create(position);
}

dogen::variability::entities::configuration*
create_dogen_variability_entities_configuration_ptr(const unsigned int position) {
    return dogen::variability::entities::configuration_generator::create_ptr(position);
}

boost::shared_ptr<dogen::variability::entities::configuration>
create_boost_shared_ptr_dogen_variability_entities_configuration(unsigned int position) {
    boost::shared_ptr<dogen::variability::entities::configuration> r(
        create_dogen_variability_entities_configuration_ptr(position));
    return r;
}

dogen::identification::entities::label
create_dogen_identification_entities_label(const unsigned int position) {
    return dogen::identification::entities::label_generator::create(position);
}

std::list<dogen::identification::entities::label> create_std_list_dogen_identification_entities_label(unsigned int position) {
    std::list<dogen::identification::entities::label> r;
    for (unsigned int i(0); i < 4; ++i) {
        r.push_back(create_dogen_identification_entities_label(position + i));
    }
    return r;
}

dogen::logical::entities::generability_status
create_dogen_logical_entities_generability_status(const unsigned int position) {
    return dogen::logical::entities::generability_status_generator::create(position);
}

dogen::logical::entities::decoration::element_properties
create_dogen_logical_entities_decoration_element_properties(const unsigned int position) {
    return dogen::logical::entities::decoration::element_properties_generator::create(position);
}

boost::optional<dogen::logical::entities::decoration::element_properties>
create_boost_optional_dogen_logical_entities_decoration_element_properties(unsigned int position) {
    boost::optional<dogen::logical::entities::decoration::element_properties> r(
        create_dogen_logical_entities_decoration_element_properties(position));
    return r;
}

std::unordered_map<dogen::identification::entities::technical_space, boost::optional<dogen::logical::entities::decoration::element_properties> > create_std_unordered_map_dogen_identification_entities_technical_space_boost_optional_dogen_logical_entities_decoration_element_properties(unsigned int position) {
    std::unordered_map<dogen::identification::entities::technical_space, boost::optional<dogen::logical::entities::decoration::element_properties> > r;
    for (unsigned int i(0); i < 4; ++i) {
        r.insert(std::make_pair(create_dogen_identification_entities_technical_space(position + i), create_boost_optional_dogen_logical_entities_decoration_element_properties(position + i)));
    }
    return r;
}

dogen::logical::entities::helper_properties
create_dogen_logical_entities_helper_properties(const unsigned int position) {
    return dogen::logical::entities::helper_properties_generator::create(position);
}

std::list<dogen::logical::entities::helper_properties> create_std_list_dogen_logical_entities_helper_properties(unsigned int position) {
    std::list<dogen::logical::entities::helper_properties> r;
    for (unsigned int i(0); i < 4; ++i) {
        r.push_back(create_dogen_logical_entities_helper_properties(position + i));
    }
    return r;
}

}

namespace dogen::logical::entities {

void element_generator::
populate(const unsigned int position, result_type& v) {
    v.name(create_dogen_identification_entities_logical_name(position + 0));
    v.documentation(create_std_string(position + 1));
    v.provenance(create_dogen_identification_entities_codec_provenance(position + 2));
    v.contained_by(create_dogen_identification_entities_logical_id(position + 3));
    v.in_global_module(create_bool(position + 4));
    v.stereotypes(create_dogen_logical_entities_stereotypes(position + 5));
    v.meta_name(create_dogen_identification_entities_logical_meta_name(position + 6));
    v.intrinsic_technical_space(create_dogen_identification_entities_technical_space(position + 7));
    v.configuration(create_boost_shared_ptr_dogen_variability_entities_configuration(position + 8));
    v.labels(create_std_list_dogen_identification_entities_label(position + 9));
    v.generability_status(create_dogen_logical_entities_generability_status(position + 10));
    v.decoration(create_std_unordered_map_dogen_identification_entities_technical_space_boost_optional_dogen_logical_entities_decoration_element_properties(position + 11));
    v.helper_properties(create_std_list_dogen_logical_entities_helper_properties(position + 12));
}

element_generator::result_type*
element_generator::create_ptr(const unsigned int position) {
    if ((position % 33) == 0)
        return dogen::logical::entities::decoration::generation_marker_generator::create_ptr(position);
    if ((position % 33) == 1)
        return dogen::logical::entities::decoration::licence_generator::create_ptr(position);
    if ((position % 33) == 2)
        return dogen::logical::entities::decoration::modeline_generator::create_ptr(position);
    if ((position % 33) == 3)
        return dogen::logical::entities::decoration::modeline_group_generator::create_ptr(position);
    if ((position % 33) == 4)
        return dogen::logical::entities::mapping::extensible_mappable_generator::create_ptr(position);
    if ((position % 33) == 5)
        return dogen::logical::entities::mapping::fixed_mappable_generator::create_ptr(position);
    if ((position % 33) == 6)
        return dogen::logical::entities::orm::common_odb_options_generator::create_ptr(position);
    if ((position % 33) == 7)
        return dogen::logical::entities::physical::archetype_generator::create_ptr(position);
    if ((position % 33) == 8)
        return dogen::logical::entities::physical::archetype_kind_generator::create_ptr(position);
    if ((position % 33) == 9)
        return dogen::logical::entities::physical::backend_generator::create_ptr(position);
    if ((position % 33) == 10)
        return dogen::logical::entities::physical::facet_generator::create_ptr(position);
    if ((position % 33) == 11)
        return dogen::logical::entities::physical::helper_generator::create_ptr(position);
    if ((position % 33) == 12)
        return dogen::logical::entities::physical::part_generator::create_ptr(position);
    if ((position % 33) == 13)
        return dogen::logical::entities::serialization::type_registrar_generator::create_ptr(position);
    if ((position % 33) == 14)
        return dogen::logical::entities::structural::assistant_generator::create_ptr(position);
    if ((position % 33) == 15)
        return dogen::logical::entities::structural::builtin_generator::create_ptr(position);
    if ((position % 33) == 16)
        return dogen::logical::entities::structural::entry_point_generator::create_ptr(position);
    if ((position % 33) == 17)
        return dogen::logical::entities::structural::enumeration_generator::create_ptr(position);
    if ((position % 33) == 18)
        return dogen::logical::entities::structural::exception_generator::create_ptr(position);
    if ((position % 33) == 19)
        return dogen::logical::entities::structural::module_generator::create_ptr(position);
    if ((position % 33) == 20)
        return dogen::logical::entities::structural::object_generator::create_ptr(position);
    if ((position % 33) == 21)
        return dogen::logical::entities::structural::object_template_generator::create_ptr(position);
    if ((position % 33) == 22)
        return dogen::logical::entities::structural::primitive_generator::create_ptr(position);
    if ((position % 33) == 23)
        return dogen::logical::entities::structural::visitor_generator::create_ptr(position);
    if ((position % 33) == 24)
        return dogen::logical::entities::templating::logic_less_template_generator::create_ptr(position);
    if ((position % 33) == 25)
        return dogen::logical::entities::variability::feature_bundle_generator::create_ptr(position);
    if ((position % 33) == 26)
        return dogen::logical::entities::variability::feature_template_bundle_generator::create_ptr(position);
    if ((position % 33) == 27)
        return dogen::logical::entities::variability::initializer_generator::create_ptr(position);
    if ((position % 33) == 28)
        return dogen::logical::entities::variability::profile_generator::create_ptr(position);
    if ((position % 33) == 29)
        return dogen::logical::entities::variability::profile_template_generator::create_ptr(position);
    if ((position % 33) == 30)
        return dogen::logical::entities::visual_studio::msbuild_targets_generator::create_ptr(position);
    if ((position % 33) == 31)
        return dogen::logical::entities::visual_studio::project_generator::create_ptr(position);
    if ((position % 33) == 32)
        return dogen::logical::entities::visual_studio::solution_generator::create_ptr(position);
    return dogen::logical::entities::build::cmakelists_generator::create_ptr(position);
}

}
