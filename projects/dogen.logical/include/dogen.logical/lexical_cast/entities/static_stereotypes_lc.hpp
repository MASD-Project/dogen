/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * These files are code-generated via overrides to test dogen. Do not commit them.
 *
 * Generation timestamp: 2022-10-20T10:20:30
 * WARNING: do not edit this file manually.
 * Generated by MASD Dogen v1.0.33
 *
 * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */
#ifndef DOGEN_LOGICAL_LEXICAL_CAST_ENTITIES_STATIC_STEREOTYPES_LC_HPP
#define DOGEN_LOGICAL_LEXICAL_CAST_ENTITIES_STATIC_STEREOTYPES_LC_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma once
#endif

#include <boost/lexical_cast.hpp>
#include "dogen.logical/types/entities/static_stereotypes.hpp"

namespace boost {

template<>
inline std::string lexical_cast(const dogen::logical::entities::static_stereotypes& v) {
    using dogen::logical::entities::static_stereotypes;

    switch (v) {
    case static_stereotypes::invalid:
        return "static_stereotypes::invalid";
    case static_stereotypes::fluent:
        return "static_stereotypes::fluent";
    case static_stereotypes::immutable:
        return "static_stereotypes::immutable";
    case static_stereotypes::visitable:
        return "static_stereotypes::visitable";
    case static_stereotypes::structural_object:
        return "static_stereotypes::structural_object";
    case static_stereotypes::structural_object_template:
        return "static_stereotypes::structural_object_template";
    case static_stereotypes::structural_exception:
        return "static_stereotypes::structural_exception";
    case static_stereotypes::structural_primitive:
        return "static_stereotypes::structural_primitive";
    case static_stereotypes::structural_enumeration:
        return "static_stereotypes::structural_enumeration";
    case static_stereotypes::structural_module:
        return "static_stereotypes::structural_module";
    case static_stereotypes::structural_builtin:
        return "static_stereotypes::structural_builtin";
    case static_stereotypes::structural_entry_point:
        return "static_stereotypes::structural_entry_point";
    case static_stereotypes::structural_assistant:
        return "static_stereotypes::structural_assistant";
    case static_stereotypes::orm_object:
        return "static_stereotypes::orm_object";
    case static_stereotypes::orm_value:
        return "static_stereotypes::orm_value";
    case static_stereotypes::decoration_modeline_group:
        return "static_stereotypes::decoration_modeline_group";
    case static_stereotypes::decoration_modeline:
        return "static_stereotypes::decoration_modeline";
    case static_stereotypes::decoration_generation_marker:
        return "static_stereotypes::decoration_generation_marker";
    case static_stereotypes::decoration_licence:
        return "static_stereotypes::decoration_licence";
    case static_stereotypes::variability_profile:
        return "static_stereotypes::variability_profile";
    case static_stereotypes::variability_profile_template:
        return "static_stereotypes::variability_profile_template";
    case static_stereotypes::variability_feature_bundle:
        return "static_stereotypes::variability_feature_bundle";
    case static_stereotypes::variability_feature_template_bundle:
        return "static_stereotypes::variability_feature_template_bundle";
    case static_stereotypes::variability_initializer:
        return "static_stereotypes::variability_initializer";
    case static_stereotypes::mapping_fixed_mappable:
        return "static_stereotypes::mapping_fixed_mappable";
    case static_stereotypes::mapping_extensible_mappable:
        return "static_stereotypes::mapping_extensible_mappable";
    case static_stereotypes::templating_logic_less_template:
        return "static_stereotypes::templating_logic_less_template";
    case static_stereotypes::serialization_type_registrar:
        return "static_stereotypes::serialization_type_registrar";
    case static_stereotypes::visual_studio_solution:
        return "static_stereotypes::visual_studio_solution";
    case static_stereotypes::visual_studio_project:
        return "static_stereotypes::visual_studio_project";
    case static_stereotypes::visual_studio_msbuild_targets:
        return "static_stereotypes::visual_studio_msbuild_targets";
    case static_stereotypes::orm_common_odb_options:
        return "static_stereotypes::orm_common_odb_options";
    case static_stereotypes::build_cmakelists:
        return "static_stereotypes::build_cmakelists";
    case static_stereotypes::physical_backend:
        return "static_stereotypes::physical_backend";
    case static_stereotypes::physical_facet:
        return "static_stereotypes::physical_facet";
    case static_stereotypes::physical_archetype:
        return "static_stereotypes::physical_archetype";
    case static_stereotypes::physical_archetype_kind:
        return "static_stereotypes::physical_archetype_kind";
    case static_stereotypes::physical_part:
        return "static_stereotypes::physical_part";
    case static_stereotypes::physical_helper:
        return "static_stereotypes::physical_helper";
    default:
        throw boost::bad_lexical_cast();
    }
}

template<>
inline dogen::logical::entities::static_stereotypes lexical_cast(const std::string & s) {
    using dogen::logical::entities::static_stereotypes;

    if (s == "invalid" || s == "static_stereotypes::invalid")
        return static_stereotypes::invalid;
    if (s == "fluent" || s == "static_stereotypes::fluent")
        return static_stereotypes::fluent;
    if (s == "immutable" || s == "static_stereotypes::immutable")
        return static_stereotypes::immutable;
    if (s == "visitable" || s == "static_stereotypes::visitable")
        return static_stereotypes::visitable;
    if (s == "structural_object" || s == "static_stereotypes::structural_object")
        return static_stereotypes::structural_object;
    if (s == "structural_object_template" || s == "static_stereotypes::structural_object_template")
        return static_stereotypes::structural_object_template;
    if (s == "structural_exception" || s == "static_stereotypes::structural_exception")
        return static_stereotypes::structural_exception;
    if (s == "structural_primitive" || s == "static_stereotypes::structural_primitive")
        return static_stereotypes::structural_primitive;
    if (s == "structural_enumeration" || s == "static_stereotypes::structural_enumeration")
        return static_stereotypes::structural_enumeration;
    if (s == "structural_module" || s == "static_stereotypes::structural_module")
        return static_stereotypes::structural_module;
    if (s == "structural_builtin" || s == "static_stereotypes::structural_builtin")
        return static_stereotypes::structural_builtin;
    if (s == "structural_entry_point" || s == "static_stereotypes::structural_entry_point")
        return static_stereotypes::structural_entry_point;
    if (s == "structural_assistant" || s == "static_stereotypes::structural_assistant")
        return static_stereotypes::structural_assistant;
    if (s == "orm_object" || s == "static_stereotypes::orm_object")
        return static_stereotypes::orm_object;
    if (s == "orm_value" || s == "static_stereotypes::orm_value")
        return static_stereotypes::orm_value;
    if (s == "decoration_modeline_group" || s == "static_stereotypes::decoration_modeline_group")
        return static_stereotypes::decoration_modeline_group;
    if (s == "decoration_modeline" || s == "static_stereotypes::decoration_modeline")
        return static_stereotypes::decoration_modeline;
    if (s == "decoration_generation_marker" || s == "static_stereotypes::decoration_generation_marker")
        return static_stereotypes::decoration_generation_marker;
    if (s == "decoration_licence" || s == "static_stereotypes::decoration_licence")
        return static_stereotypes::decoration_licence;
    if (s == "variability_profile" || s == "static_stereotypes::variability_profile")
        return static_stereotypes::variability_profile;
    if (s == "variability_profile_template" || s == "static_stereotypes::variability_profile_template")
        return static_stereotypes::variability_profile_template;
    if (s == "variability_feature_bundle" || s == "static_stereotypes::variability_feature_bundle")
        return static_stereotypes::variability_feature_bundle;
    if (s == "variability_feature_template_bundle" || s == "static_stereotypes::variability_feature_template_bundle")
        return static_stereotypes::variability_feature_template_bundle;
    if (s == "variability_initializer" || s == "static_stereotypes::variability_initializer")
        return static_stereotypes::variability_initializer;
    if (s == "mapping_fixed_mappable" || s == "static_stereotypes::mapping_fixed_mappable")
        return static_stereotypes::mapping_fixed_mappable;
    if (s == "mapping_extensible_mappable" || s == "static_stereotypes::mapping_extensible_mappable")
        return static_stereotypes::mapping_extensible_mappable;
    if (s == "templating_logic_less_template" || s == "static_stereotypes::templating_logic_less_template")
        return static_stereotypes::templating_logic_less_template;
    if (s == "serialization_type_registrar" || s == "static_stereotypes::serialization_type_registrar")
        return static_stereotypes::serialization_type_registrar;
    if (s == "visual_studio_solution" || s == "static_stereotypes::visual_studio_solution")
        return static_stereotypes::visual_studio_solution;
    if (s == "visual_studio_project" || s == "static_stereotypes::visual_studio_project")
        return static_stereotypes::visual_studio_project;
    if (s == "visual_studio_msbuild_targets" || s == "static_stereotypes::visual_studio_msbuild_targets")
        return static_stereotypes::visual_studio_msbuild_targets;
    if (s == "orm_common_odb_options" || s == "static_stereotypes::orm_common_odb_options")
        return static_stereotypes::orm_common_odb_options;
    if (s == "build_cmakelists" || s == "static_stereotypes::build_cmakelists")
        return static_stereotypes::build_cmakelists;
    if (s == "physical_backend" || s == "static_stereotypes::physical_backend")
        return static_stereotypes::physical_backend;
    if (s == "physical_facet" || s == "static_stereotypes::physical_facet")
        return static_stereotypes::physical_facet;
    if (s == "physical_archetype" || s == "static_stereotypes::physical_archetype")
        return static_stereotypes::physical_archetype;
    if (s == "physical_archetype_kind" || s == "static_stereotypes::physical_archetype_kind")
        return static_stereotypes::physical_archetype_kind;
    if (s == "physical_part" || s == "static_stereotypes::physical_part")
        return static_stereotypes::physical_part;
    if (s == "physical_helper" || s == "static_stereotypes::physical_helper")
        return static_stereotypes::physical_helper;
    throw boost::bad_lexical_cast();
}

}

#endif
