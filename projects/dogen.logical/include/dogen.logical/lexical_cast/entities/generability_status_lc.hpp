/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * These files are code-generated via overrides to test dogen. Do not commit them.
 *
 * Generation timestamp: 2022-10-20T10:20:30
 * WARNING: do not edit this file manually.
 * Generated by MASD Dogen v1.0.33
 *
 * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */
#ifndef DOGEN_LOGICAL_LEXICAL_CAST_ENTITIES_GENERABILITY_STATUS_LC_HPP
#define DOGEN_LOGICAL_LEXICAL_CAST_ENTITIES_GENERABILITY_STATUS_LC_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma once
#endif

#include <boost/lexical_cast.hpp>
#include "dogen.logical/types/entities/generability_status.hpp"

namespace boost {

template<>
inline std::string lexical_cast(const dogen::logical::entities::generability_status& v) {
    using dogen::logical::entities::generability_status;

    switch (v) {
    case generability_status::invalid:
        return "generability_status::invalid";
    case generability_status::non_generatable_source:
        return "generability_status::non_generatable_source";
    case generability_status::generation_not_expected:
        return "generability_status::generation_not_expected";
    case generability_status::non_generatable_state:
        return "generability_status::non_generatable_state";
    case generability_status::generation_disabled:
        return "generability_status::generation_disabled";
    case generability_status::generation_ignored:
        return "generability_status::generation_ignored";
    case generability_status::generatable:
        return "generability_status::generatable";
    default:
        throw boost::bad_lexical_cast();
    }
}

template<>
inline dogen::logical::entities::generability_status lexical_cast(const std::string & s) {
    using dogen::logical::entities::generability_status;

    if (s == "invalid" || s == "generability_status::invalid")
        return generability_status::invalid;
    if (s == "non_generatable_source" || s == "generability_status::non_generatable_source")
        return generability_status::non_generatable_source;
    if (s == "generation_not_expected" || s == "generability_status::generation_not_expected")
        return generability_status::generation_not_expected;
    if (s == "non_generatable_state" || s == "generability_status::non_generatable_state")
        return generability_status::non_generatable_state;
    if (s == "generation_disabled" || s == "generability_status::generation_disabled")
        return generability_status::generation_disabled;
    if (s == "generation_ignored" || s == "generability_status::generation_ignored")
        return generability_status::generation_ignored;
    if (s == "generatable" || s == "generability_status::generatable")
        return generability_status::generatable;
    throw boost::bad_lexical_cast();
}

}

#endif
