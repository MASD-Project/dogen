@startuml
set namespaceSeparator ::
note as N1
Provides support for encoding and decoding of external models.

There are only two formats supported as external models:

- org-mode, the main format used by Dogen;
- PlantUML, used to generate UML diagrams.

External models are converted into an intermediate format called the codec
model, because it is the original entry point into the dogen processing
pipeline. It also reflects the notion that we are injecting external technical
spaces into the MASD technical technical space. The object model is
codec-agnostic but aims to provide a representation of the core entities needed
by all codecs. Not all codecs will make use of all entities.

A codec must be created for each external model that is to be injected,
providing a transformation between the native formats and the codec model. The
codecs are created as transforms in the present model, and should reuse common
infrastructure where possible. There should also be a "native" model
representing the original codec format as much as possible (e.g. "dogen.org").
The idea for those models is just to provide a faithful representation of the
native codec domain model (though it may not necessarily be complete).

In general, codecs use file extensions to determine the type of the codec.

UML representation:

\image html dogen.codec/modeling/dogen.codec.svg
end note

namespace entities #F2F2F2 {
    note as entities_1
Object model that is codec-agnostic but aims to provide
a representation of the core entities needed by all codecs.

Not all codecs will make use of all entities.
    end note

    class Taggable <<masd::object_template>> #E3B6F6 {
        +{field} tagged_values std::list<identification::entities::tagged_value>
    }

    Taggable <|.. comment

    note top of Taggable
Ability to contain tagged values.
    end note

    class TaggableOverridable <<masd::object_template>> #E3B6F6 {
        +{field} tagged_values_overrides std::list<identification::entities::tagged_value>
    }

    note top of TaggableOverridable
Ability to contain tagged values.
    end note

    class Nameable <<masd::object_template>> #E3B6F6 {
        +{field} name identification::entities::name
    }

    note top of Nameable
Ability to have a name.
    end note

    class Commentable <<masd::object_template>> #E3B6F6 {
        +{field} comment comment
    }

    Commentable o-u- comment

    note top of Commentable
Has the ability to have an associated comment.
    end note

    class comment <<Taggable>> #F7E5FF {
        +{field} applies_to_container bool
        +{field} original_content std::string
        +{field} documentation std::string
    }

    note top of comment
Represents a comment block as read out from the codec representation.
    end note

    class Stereotypable <<masd::object_template>> #E3B6F6 {
        +{field} stereotypes std::list<identification::entities::stereotype>
        +{field} templates std::list<identification::entities::stereotype>
        +{field} configurations std::list<identification::entities::stereotype>
    }

    note top of Stereotypable
Ability to have stereotypes.
    end note

    class Configurable <<masd::object_template>> #E3B6F6 {
        +{field} configuration boost::shared_ptr<variability::entities::configuration>
    }

    note top of Configurable
Ability to have meta-data associated.
    end note

    class DeterminableOrigin <<masd::object_template>> #E3B6F6 {
        +{field} provenance identification::entities::codec_provenance
    }

    note top of DeterminableOrigin
Properties related to the origin of the modeling element.
    end note

    class Element <<masd::object_template>> #E3B6F6 {
    }

    Element <|.. element
    Element <|.. attribute
    Element <|.. model

    entities::Taggable <|-- entities::Element
    entities::Stereotypable <|-- entities::Element
    entities::Nameable <|-- entities::Element
    entities::Configurable <|-- entities::Element
    entities::DeterminableOrigin <|-- entities::Element
    entities::TaggableOverridable <|-- entities::Element
    entities::Commentable <|-- entities::Element
    note top of Element
Consolidates a number of related object templates.
    end note

    class element <<Element>> #F7E5FF {
        +{field} parents std::list<std::string>
        +{field} attributes std::list<attribute>
        +{field} fallback_element_type std::string
        +{field} can_be_primitive_underlier bool
        +{field} in_global_module bool
        +{field} can_be_enumeration_underlier bool
        +{field} is_default_enumeration_type bool
        +{field} is_associative_container bool
        +{field} is_floating_point bool
        +{field} containing_element_id identification::entities::codec_id
        +{field} plantuml std::list<std::string>
    }

    element o-- attribute: composed of

    note top of element
Represents an element from an external model.
    end note

    class attribute <<Element>> #F7E5FF {
        +{field} type std::string
        +{field} value std::string
    }

    class model <<Element>> #F7E5FF {
        +{field} elements std::list<element>
        +{field} input_technical_space std::string
        +{field} references std::list<std::string>
        +{field} processed_variability_overrides std::unordered_set<std::string>
    }

    model o-- element: composed of

    note top of model
Represents an external model.
    end note

    class model_set #F7E5FF {
        +{field} target model
        +{field} references std::list<model>
        +{field} reference_graph_data reference_graph_data
    }

    model_set o-- model: aggregates different kinds of
    model_set o-- reference_graph_data

    class reference_graph_data #F7E5FF {
        +{field} root std::string
        +{field} edges_per_model std::unordered_map<std::string, std::list<std::string>>
    }

    note top of reference_graph_data
Contains all the data required to build the graph of references.
    end note

    class artefact #F7E5FF {
        +{field} path boost::filesystem::path
        +{field} codec_name std::string
        +{field} content std::string
    }

}

namespace transforms #F2F2F2 {
    class transformation_error <<masd::exception>> #E8C2F8 {
    }

    class context <<dogen::typeable, dogen::pretty_printable>> #F7E5FF {
        +{field} data_directories std::vector<boost::filesystem::path>
        +{field} feature_model boost::shared_ptr<variability::entities::feature_model>
        +{field} tracer boost::shared_ptr<tracing::tracer>
        +{field} compatibility_mode bool
        +{field} variability_overrides std::vector<std::string>
    }

    class context_bootstrapping_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    context_bootstrapping_chain o-- context

    note top of context_bootstrapping_chain
Trivial transform that bootstraps the codec context.
    end note

    class model_set_production_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    model_set_production_chain o-- entities::model_set: produces
    model_set_production_chain o-- model_production_chain: produces models using
    model_set_production_chain o-- model_set_production_chain: recursive
    model_set_production_chain o-u- reference_graph_data_transform: obtains references
    model_set_production_chain o-u- helpers::references_validator: validates references
    model_set_production_chain o-u- helpers::references_resolver: resolves references

    note top of model_set_production_chain
Produces a codec model set.

This chain loads every model and obtains their model set, and so forth,
recursively. However, for the top-most model - which we know is the target
model - it assembles the moodel sets in the correct order. That is, a direct
reference of a reference becomes a transitive reference for the target.

It must also determine if a model has already been loaded, and, if so, ignore
it.
    end note

    class reference_graph_data_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    reference_graph_data_transform o-- entities::reference_graph_data

    class model_production_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    model_production_chain o-- entities::model: produces
    model_production_chain o-u-- references_transform
    model_production_chain o-u- configuration_transform
    model_production_chain o-u- input_technical_space_transform
    model_production_chain o-u- provenance_transform
    model_production_chain o-- meta_data_transform
    model_production_chain o-- tagged_values_overrides_transform
    model_production_chain o-- file_to_artefact_transform
    model_production_chain o-- artefact_to_model_chain

    note top of model_production_chain
Given the location of a supported external model, it obtains it and transforms
it into an codec model.
    end note

    class references_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of references_transform
Reads the model references from the annotation.
    end note

    class configuration_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of configuration_transform
Transforms the tagged values as read from the external model into a
configuration. No profile binding is made at this point, just a type
transformation into variability types.

Requires tagged values to have been populated by the decoding codec.
    end note

    class input_technical_space_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of input_technical_space_transform
Reads the input technical space from the model.

Annotations transform must have been applied.
    end note

    class provenance_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of provenance_transform
Computes the SHA1 hash for a model content and updates the model with this
value.
    end note

    class meta_data_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of meta_data_transform
Reads assorted meta-data.
    end note

    class tagged_values_overrides_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of tagged_values_overrides_transform
Uses the variability overrides to generate the tagged values overrides for the
appropriate modeling elements.
    end note

    class file_to_artefact_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of file_to_artefact_transform
Reads a file at a given path and creates an artefact from it. The file extension
is used to populate the artefact type.
    end note

    class artefact_to_model_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    artefact_to_model_chain o-- org_artefact_to_model_transform

    note top of artefact_to_model_chain
Applies the codec transform for the supplied artefact, if one exists.

Transforms the external model in whatever supported external representation it
may be in into the internal representation of a codec model.
    end note

    class org_artefact_to_model_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of org_artefact_to_model_transform
Processes the artefact as if encoded as an org-mode document, and converts it
into an instance of the codec model.
    end note

    class model_to_model_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    model_to_model_chain o-- file_to_file_chain

    note top of model_to_model_chain
Applies the codec transform for the supplied model, if one exists.
    end note

    class file_to_file_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    file_to_file_chain o-u- file_to_artefact_transform
    file_to_file_chain o-- artefact_to_artefact_chain
    file_to_file_chain o-u- artefact_to_file_transform

    note top of file_to_file_chain
Converts an external model of a given type into another external model of
another type in the filesystem.
    end note

    class artefact_to_artefact_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    artefact_to_artefact_chain o-- artefact_to_model_chain
    artefact_to_artefact_chain o-u- documentation_trimming_transform
    artefact_to_artefact_chain o-- model_to_artefact_chain

    note top of artefact_to_artefact_chain
Converts an external model of a given type into another external model of
another type and writes it to the filesystem.
    end note

    class artefact_to_file_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of artefact_to_file_transform
Writes the artefact to the filesystem.
    end note

    class documentation_trimming_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of documentation_trimming_transform
Removes any leading and trailing whitespace from all the documentation.
    end note

    class model_to_artefact_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    model_to_artefact_chain o-- model_to_org_artefact_transform
    model_to_artefact_chain o-- model_to_plantuml_artefact_transform

    note top of model_to_artefact_chain
Transforms the supplied codec model into an artefact.
    end note

    class model_to_org_artefact_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of model_to_org_artefact_transform
Processes the artefact as if encoded as a org-mode document, converting it into
an instance of the codec model.
    end note

    class model_to_plantuml_artefact_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    note top of model_to_plantuml_artefact_transform
Transforms a codec model into an artefact in PlantUML syntax.
    end note

}

namespace helpers #F2F2F2 {
    class references_validator <<dogen::handcrafted::typeable>> #FFFACD {
    }

    references_validator o-- reference_validation_error

    note top of references_validator
Checks that there are no cycles in the references graph.
    end note

    class reference_validation_error <<masd::exception>> #E8C2F8 {
    }

    note top of reference_validation_error
A cycle was detected in the references graph.
    end note

    class references_resolver <<dogen::handcrafted::typeable>> #FFFACD {
    }

    references_resolver o-- reference_resolution_exception

    note top of references_resolver
Trivial struct that records all the data we need for our little DFS excursion.
    end note

    class reference_resolution_exception <<masd::exception>> #E8C2F8 {
    }

}

namespace features #F2F2F2 {
    note as features_1
Defines all of the features and feature groups used by the codec model.
    end note

    class input_technical_space <<masd::variability::feature_bundle>> #BAD7D7 {
        +{field} input_technical_space masd::variability::text
    }

    note top of input_technical_space
Feature bundle for the input technical space.
    end note

    class reference <<masd::variability::feature_bundle>> #BAD7D7 {
        +{field} reference masd::variability::text_collection
    }

    note top of reference
Features related to model referencing.
    end note

    class initializer <<masd::variability::initializer>> #A9CDCD {
    }

    class meta_data <<masd::variability::feature_bundle>> #BAD7D7 {
        +{field} association masd::variability::comma_separated_collection
        +{field} aggregation masd::variability::comma_separated_collection
        +{field} composition masd::variability::comma_separated_collection
        +{field} stereotypes masd::variability::comma_separated
        +{field} templates masd::variability::comma_separated
        +{field} configurations masd::variability::comma_separated
        +{field} type masd::variability::text
        +{field} value masd::variability::text
        +{field} parent masd::variability::comma_separated
        +{field} can_be_primitive_underlier masd::variability::boolean
        +{field} in_global_module masd::variability::boolean
        +{field} can_be_enumeration_underlier masd::variability::boolean
        +{field} is_default_enumeration_type masd::variability::boolean
        +{field} is_associative_container masd::variability::boolean
        +{field} is_floating_point masd::variability::boolean
        +{field} preserve_original masd::variability::boolean
        +{field} plantuml masd::variability::text_collection
    }

    note top of meta_data
Assorted meta-data.
    end note

}

class registrar <<masd::serialization::type_registrar>> #00FF00 {
}

class main <<masd::entry_point, dogen::untypable>> #DDA9F3 {
}

class CMakeLists <<masd::build::cmakelists, dogen::handcrafted::cmake>> #99CB99 {
}

@enduml
