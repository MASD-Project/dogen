@startuml
set namespaceSeparator ::
note as N1
The varibility model is responsible for managing variation in MASD.

One of the core principles of MASD is to enable the development of
"families" of software products; that is, sets of products which share
similar "traits". Those traits are encoded as "configuration" so that
we can talk about them at a higher level of abstraction. This approach
is often referred to in the literature as Software Product Line
Engineering (SPLE). MASD takes a very simplistic view of SPLE,
allowing a very restricted form of variation across a set of
well-defined features. The present model provides the basic
infrastructure required to define features, as well as to read those
features from dynamic data structures.

Note that the present model only concerns itself with the low-level
implementation of variability. You can think of it as a stack, with
this model sitting at the bottom. Above it lie the logical
representation of variability, which enables the code generator to
generate code that makes use of the infrastructure provided by this
model. But the present model is designed to be understood in complete
isolation from the layers above (and in fact, precedes the generalised
approach).

The variability space is indirectly connected to the physical dimension.
The main reason why is because we need to instantiate features across
the geometry of physical space (e.g. "for every facet...", "for every
archetype...", etc). However, we have tried to avoid coupling these two
models together because we do not think that conceptually this coupling
makes sense. That is, it just happens that we instantiate features across
the geometry of physical space, but this is not a concern o veriability -
only of its user. This decoupling was achieved by creating the concept
of template instantiation domains, which are just sets. These are mapped
elsewhere from the geometry of physical space.

UML representation:

\image html dogen.variability/modeling/dogen.variability.svg
end note

namespace entities #F2F2F2 {
    class element <<Element>> #F7E5FF {
    }

note top of  element
Represents an element modeling some aspect of variability.
end note

    class feature <<FeatureElement>> #F7E5FF {
        +{field} is_partially_matchable bool
    }

entities::element <|-- entities::feature
note top of  feature
Unit of configuration within Dogen. Defines the domain of values.
end note

    enum binding_point <<masd::enumeration, dogen::convertible>> #F2DAFD {
        +{field} any
        +{field} global
        +{field} element
        +{field} property
        +{field} operation
    }

note top of  binding_point
Determines how a feature can be bound to a modeling element.
end note

    class feature_model #F7E5FF {
        +{field} all std::list<feature>
        +{field} by_name std::unordered_map<std::string, feature>
        +{field} partially_matchable std::unordered_map<std::string, feature>
    }

note top of  feature_model
Container of all available features, organised for querying.
end note

    class feature_template <<FeatureElement, Templateable>> #F7E5FF {
        +{field} default_value_overrides std::list<default_value_override>
    }

entities::element <|-- entities::feature_template
note top of  feature_template
Defines a template that can be used to instantiate features.
end note

    enum value_type <<masd::enumeration, dogen::convertible>> #F2DAFD {
        +{field} text
        +{field} text_collection
        +{field} number
        +{field} boolean
        +{field} key_value_pair
        +{field} comma_separated
        +{field} comma_separated_collection
    }

note top of  value_type
What values can a feature have.
end note

    class profile_template <<Profilable>> #F7E5FF {
        +{field} templates std::list<configuration_point_template>
    }

entities::element <|-- entities::profile_template
note top of  profile_template
Holds a set of templates for configuration points.
end note

    class configuration_point_template <<Templateable>> #F7E5FF {
        +{field} untyped_value std::list<std::string>
    }

entities::element <|-- entities::configuration_point_template
    class value <<masd::visitable>> #F7E5FF {
    }

note top of  value
Base class of all value types.

Represents a value for a configuration point, a default value for a feature, etc.
end note

    class number #F7E5FF {
        +{field} content int
    }

entities::value <|-- entities::number
note top of  number
Represents a numeric integral value.
end note

    class text #F7E5FF {
        +{field} content std::string
    }

entities::value <|-- entities::text
note top of  text
Represents a text value.
end note

    class text_collection #F7E5FF {
        +{field} content std::list<std::string>
    }

entities::value <|-- entities::text_collection
note top of  text_collection
Represents a collection of text values.
end note

    class boolean #F7E5FF {
        +{field} content bool
    }

entities::value <|-- entities::boolean
note top of  boolean
Represents a boolean value.
end note

    class key_value_pair #F7E5FF {
        +{field} content std::list<std::pair<std::string, std::string>>
    }

entities::value <|-- entities::key_value_pair
note top of  key_value_pair
Represents a pair of key and value.
end note

    class configuration <<ConfigurationStore>> #F7E5FF {
        +{field} profile_bindings std::list<potential_binding>
        +{field} configuration_bindings std::list<potential_binding>
        +{field} source_binding_point binding_point
        +{field} from_target bool
    }

entities::element <|-- entities::configuration
    class configuration_point <<Valuable>> #F7E5FF {
    }

entities::element <|-- entities::configuration_point
note top of  configuration_point
Maps a feature name to an instance value
end note

    class Nameable <<masd::object_template>> #E3B6F6 {
        +{field} name identification::entities::name
    }

note top of  Nameable
Elements with the ability of being named.
end note

    class Describable <<masd::object_template>> #E3B6F6 {
        +{field} description std::string
    }

    class Element <<masd::object_template>> #E3B6F6 {
    }

entities::Nameable <|-- entities::Element
entities::Describable <|-- entities::Element
    class Defaultable <<masd::object_template>> #E3B6F6 {
        +{field} default_value boost::shared_ptr<value>
    }

    class Typeable <<masd::object_template>> #E3B6F6 {
        +{field} value_type value_type
    }

    class BindActionable <<masd::object_template>> #E3B6F6 {
        +{field} profile_binding_action binding_action
        +{field} configuration_binding_action binding_action
    }

    class Bindable <<masd::object_template>> #E3B6F6 {
        +{field} binding_point binding_point
    }

    class FeatureElement <<masd::object_template>> #E3B6F6 {
    }

entities::Element <|-- entities::FeatureElement
entities::Defaultable <|-- entities::FeatureElement
entities::Typeable <|-- entities::FeatureElement
entities::BindActionable <|-- entities::FeatureElement
entities::Bindable <|-- entities::FeatureElement
    class Templateable <<masd::object_template>> #E3B6F6 {
        +{field} instantiation_domain_name std::string
    }

    class Valuable <<masd::object_template>> #E3B6F6 {
        +{field} value boost::shared_ptr<value>
    }

    class ConfigurationStore <<masd::object_template>> #E3B6F6 {
        +{field} configuration_points std::unordered_map<std::string, configuration_point>
    }

    class profile <<ConfigurationStore, Profilable>> #F7E5FF {
        +{field} merged bool
        +{field} base_layer_profile std::string
    }

entities::element <|-- entities::profile
    enum binding_action <<masd::enumeration>> #F2DAFD {
        +{field} ignore
        +{field} copy
    }

note top of  binding_action
What action to take when binding.
end note

    class profile_repository #F7E5FF {
        +{field} by_name std::unordered_map<std::string, profile>
        +{field} by_stereotype std::unordered_map<std::string, profile>
    }

    class configuration_model_set #F7E5FF {
        +{field} models std::list<configuration_model>
    }

    class configuration_model #F7E5FF {
        +{field} global boost::shared_ptr<configuration>
        +{field} local std::unordered_map<std::string, boost::shared_ptr<configuration>>
    }

    class profile_template_repository #F7E5FF {
        +{field} templates std::list<profile_template>
    }

    class potential_binding #F7E5FF {
        +{field} name std::string
        +{field} realized bool
    }

note top of  potential_binding
Contains information about a potential binding.
end note

    class feature_template_repository #F7E5FF {
        +{field} templates std::list<feature_template>
    }

note top of  feature_template_repository
Stores a set of feature templates.
end note

    class feature_repository #F7E5FF {
        +{field} features std::list<feature>
    }

note top of  feature_repository
Stores a set of features.
end note

    class default_value_override #F7E5FF {
        +{field} key_ends_with std::string
        +{field} default_value boost::shared_ptr<value>
    }

note top of  default_value_override
Stores an override for a default value.
end note

    class Generalizable <<masd::object_template>> #E3B6F6 {
        +{field} parents std::list<std::string>
    }

    class Stereotypable <<masd::object_template>> #E3B6F6 {
        +{field} stereotype std::string
    }

    class Profilable <<masd::object_template>> #E3B6F6 {
    }

entities::Bindable <|-- entities::Profilable
entities::Generalizable <|-- entities::Profilable
entities::Stereotypable <|-- entities::Profilable
    class comma_separated #F7E5FF {
        +{field} content std::list<std::string>
    }

entities::value <|-- entities::comma_separated
note top of  comma_separated
Represents a CSV input that is split into a collection of text values.
end note

    class comma_separated_collection #F7E5FF {
        +{field} content std::list<std::list<std::string>>
    }

entities::value <|-- entities::comma_separated_collection
note top of  comma_separated_collection
Represents a collection of CSV input that is split into a collection of text values.
end note

}

note top of  entities
Contains all of the types describing variability
with Masd.
end note

namespace helpers #F2F2F2 {
    class feature_selector <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class configuration_factory <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class configuration_point_merger <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class value_factory <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class building_exception <<masd::exception>> #E8C2F8 {
    }

    class selection_exception <<masd::exception>> #E8C2F8 {
    }

    class configuration_selector <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class template_instantiator <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class instantiation_exception <<masd::exception>> #E8C2F8 {
    }

note top of  instantiation_exception
An error occurred whilst instantiating templates.
end note

    class registrar <<dogen::handcrafted::typeable>> #FFFACD {
        +{field} templates_repository entities::feature_template_repository
        +{field} features_repository entities::feature_repository
    }

    class enum_mapper <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class enum_mapping_exception <<masd::exception>> #E8C2F8 {
    }

note top of  enum_mapping_exception
An error occurred whilst mapping enums to or from strings.
end note

    class relational_adapter <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class adaption_exception <<masd::exception>> #E8C2F8 {
    }

note top of  adaption_exception
An error occurred whilst adapting a model.
end note

    class configuration_points_factory <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class merging_exception <<masd::exception>> #E8C2F8 {
    }

note top of  merging_exception
An error occurred whilst merging.
end note

}

namespace transforms #F2F2F2 {
    class feature_model_production_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class feature_template_instantiation_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class feature_model_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class profile_repository_production_chain <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class profile_template_instantiation_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class profile_binding_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class context <<dogen::typeable, dogen::pretty_printable>> #F7E5FF {
        +{field} compatibility_mode bool
        +{field} template_instantiation_domains std::unordered_map<std::string, std::vector<std::string>>
        +{field} tracer boost::shared_ptr<tracing::tracer>
    }

note top of  context
Context for transformations.
end note

    class profile_merging_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class transformation_error <<masd::exception>> #E8C2F8 {
    }

note top of  transformation_error
An error occurred whilst applying a transformation.
end note

    class global_configuration_binding_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    class profile_repository_inputs #F7E5FF {
        +{field} profiles std::list<entities::profile>
        +{field} templates std::list<entities::profile_template>
    }

}

namespace features #F2F2F2 {
    class profile <<masd::variability::feature_bundle>> #BAD7D7 {
        +{field} profile masd::variability::text
    }

note top of  profile
Features related to profile processing.
end note

    class initializer <<masd::variability::initializer>> #A9CDCD {
    }

}

note top of  features
Features used by the variability model.
end note

class registrar <<masd::serialization::type_registrar>> #00FF00 {
}

class main <<masd::entry_point, dogen::untypable>> #DDA9F3 {
}

class CMakeLists <<masd::build::cmakelists, dogen::handcrafted::cmake>> #99CB99 {
}

@enduml
