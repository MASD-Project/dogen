/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * These files are code-generated via overrides to test dogen. Do not commit them.
 *
 * Generation timestamp: 2022-10-20T10:20:30
 * WARNING: do not edit this file manually.
 * Generated by MASD Dogen v1.0.33
 *
 * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */
#include "dogen.variability/hash/entities/element_hash.hpp"
#include "dogen.variability/hash/entities/binding_point_hash.hpp"
#include "dogen.variability/hash/entities/configuration_hash.hpp"
#include "dogen.variability/hash/entities/potential_binding_hash.hpp"
#include "dogen.variability/hash/entities/configuration_point_hash.hpp"

namespace {

template <typename HashableType>
inline void combine(std::size_t& seed, const HashableType& value) {
    std::hash<HashableType> hasher;
    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

inline std::size_t hash_std_unordered_map_std_string_dogen_variability_entities_configuration_point(const std::unordered_map<std::string, dogen::variability::entities::configuration_point>& v) {
    std::size_t seed(0);
    for (const auto& i : v) {
        combine(seed, i.first);
        combine(seed, i.second);
    }
    return seed;
}

inline std::size_t hash_std_list_dogen_variability_entities_potential_binding(const std::list<dogen::variability::entities::potential_binding>& v) {
    std::size_t seed(0);
    for (const auto& i : v) {
        combine(seed, i);
    }
    return seed;
}

}

namespace dogen::variability::entities {

std::size_t configuration_hasher::hash(const configuration& v) {
    std::size_t seed(0);

    combine(seed, dynamic_cast<const dogen::variability::entities::element&>(v));

    combine(seed, hash_std_unordered_map_std_string_dogen_variability_entities_configuration_point(v.configuration_points()));
    combine(seed, hash_std_list_dogen_variability_entities_potential_binding(v.profile_bindings()));
    combine(seed, hash_std_list_dogen_variability_entities_potential_binding(v.configuration_bindings()));
    combine(seed, v.source_binding_point());
    combine(seed, v.from_target());

    return seed;
}

}
