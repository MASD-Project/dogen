@startuml
set namespaceSeparator ::
note as N1
Represents the domain of the Dia diagram editor.

UML representation:

\image html dogen.dia/modeling/dogen.dia.svg
end note

namespace entities #F2F2F2 {
    class diagram #F7E5FF {
        +{field} diagram_data diagram_data
        +{field} layers std::vector<layer>
    }

    diagram o-- layer: composed of
    diagram o-- diagram_data: meta-data

    note top of  diagram
        Represents a diagram in Dia.
    end note

    class layer #F7E5FF {
        +{field} name std::string
        +{field} visible bool
        +{field} active bool
        +{field} objects std::vector<object>
    }

    layer o-- object: composed of

    note top of  layer
        Represents a layer in a Dia diagram.
    end note

    class diagram_data #F7E5FF {
        +{field} attributes std::vector<attribute>
    }

    diagram_data o-- attribute

    note top of  diagram_data
        Represents a all the data associated with a diagram.
    end note

    class object #F7E5FF {
        +{field} id std::string
        +{field} type std::string
        +{field} version int
        +{field} connections std::vector<connection>
        +{field} child_node boost::optional<child_node>
        +{field} attributes std::vector<attribute>
    }

    object o-u- connection
    object o-u- child_node
    object o-- attribute

    note top of  object
        Represents a Dia object.
    end note

    class connection #F7E5FF {
        +{field} handle std::string
        +{field} to std::string
        +{field} connection_slot std::string
    }

    note top of  connection
        Connection between entities in a Dia diagram.
    end note

    class child_node #F7E5FF {
        +{field} parent std::string
    }

    note top of  child_node
        Represents a child_node in a diagram.

Child nodes are used in Dia to represent the relationship between a package and the entities it contains.
For example, if class O1 is inside package O0 then class O1 will have a child node element with a parent
pointing to O0.
    end note

    class attribute #F7E5FF {
        +{field} name std::string
        +{field} values std::vector<boost::variant<color,real,integer,font,boolean,point,string,enumeration,rectangle,composite>>
    }

    attribute o-u- font
    attribute o-- composite
    attribute o-u- color
    attribute o-u- real
    attribute o-u- integer
    attribute o-u- boolean
    attribute o-- point
    attribute o-- enumeration
    attribute o-- string
    attribute o-- rectangle

    note top of  attribute
        Attribute in a Dia diagram.
    end note

    class composite <<dogen::untestable>> #ED8181 {
        +{field} type std::string
        +{field} value std::vector<boost::shared_ptr<attribute>>
        +{field} inner_composite boost::shared_ptr<composite>
    }

    composite o-- attribute
    composite o-- composite: recursive

    note top of  composite
        Attribute value which is made up of other attributes.
    end note

    class font #F7E5FF {
        +{field} family std::string
        +{field} style std::string
        +{field} name std::string
    }

    note top of  font
        Represents a font in a diagram.
    end note

    class color #F7E5FF {
        +{field} value std::string
    }

    note top of  color
        Represents a color in a diagram.
    end note

    class real #F7E5FF {
        +{field} value std::string
    }

    note top of  real
        Represents a real value.
    end note

    class integer #F7E5FF {
        +{field} value std::string
    }

    note top of  integer
        Represents an integer value.
    end note

    class boolean #F7E5FF {
        +{field} value std::string
    }

    note top of  boolean
        Represents a boolean value.
    end note

    class point #F7E5FF {
        +{field} value std::string
    }

    note top of  point
        Represents a point in a diagram.
    end note

    class enumeration #F7E5FF {
        +{field} value std::string
    }

    note top of  enumeration
        Represents a enumeration in a diagram.
    end note

    class string #F7E5FF {
        +{field} value std::string
    }

    note top of  string
        Represents a string value.
    end note

    class rectangle #F7E5FF {
        +{field} value std::string
    }

    note top of  rectangle
        Represents a rectangle in a diagram.
    end note

}

note top of  entities
    Contains all the entities required by Dogen from the domain of the Dia diagram
editor.
end note

namespace transforms #F2F2F2 {
    class string_to_diagram_transform <<dogen::handcrafted::typeable>> #FFFACD {
    }

    string_to_diagram_transform o-d- entities::diagram
    string_to_diagram_transform o-u- transformation_error

    class transformation_error <<masd::exception>> #E8C2F8 {
    }

    note top of  transformation_error
        An error occurred whilst applying a transformation.
    end note

}

class main <<masd::entry_point, dogen::untypable>> #DDA9F3 {
}

class CMakeLists <<masd::build::cmakelists, dogen::handcrafted::cmake>> #99CB99 {
}

@enduml
