#+title: dogen.physical
#+options: <:nil c:nil todo:nil ^:nil d:nil date:nil author:nil
#+tags: { element(e) attribute(a) module(m) }
:PROPERTIES:
:masd.codec.dia.comment: true
:masd.codec.model_modules: dogen.physical
:masd.codec.input_technical_space: cpp
:masd.codec.reference: cpp.builtins
:masd.codec.reference: cpp.std
:masd.codec.reference: cpp.boost
:masd.codec.reference: dogen.tracing
:masd.codec.reference: dogen.variability
:masd.codec.reference: dogen
:masd.codec.reference: masd
:masd.codec.reference: masd.variability
:masd.codec.reference: dogen.profiles
:masd.variability.profile: dogen.profiles.base.default_profile
:END:

The pysical model defines the core entities that make up the
physical dimension of MASD conceptual space.

UML representation:

\image html dogen.physical/modeling/dogen.physical.svg

* main                                                              :element:
  :PROPERTIES:
  :custom_id: O1
  :masd.codec.stereotypes: masd::entry_point, dogen::untypable
  :END:

* CMakeLists                                                        :element:
  :PROPERTIES:
  :custom_id: O2
  :masd.codec.stereotypes: masd::build::cmakelists, dogen::handcrafted::cmake
  :END:

* helpers                                                            :module:
  :PROPERTIES:
  :custom_id: O4
  :masd.codec.dia.comment: true
  :END:

Helpers for the physical model.

** template instantiation domains factory                           :element:
   :PROPERTIES:
   :custom_id: O5
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** building error                                                   :element:
   :PROPERTIES:
   :custom_id: O6
   :masd.codec.stereotypes: masd::exception
   :END:

An error occurred while the field factory was building.

** path generator                                                   :element:
   :PROPERTIES:
   :custom_id: O29
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** file status collector                                            :element:
   :PROPERTIES:
   :custom_id: O42
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** files by status                                                  :element:
   :PROPERTIES:
   :custom_id: O45
   :END:

*** unexpected                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<boost::filesystem::path>
    :END:

*** ignored                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<boost::filesystem::path>
    :END:

** unified differ                                                   :element:
   :PROPERTIES:
   :custom_id: O46
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** meta model validator                                             :element:
   :PROPERTIES:
   :custom_id: O75
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** validation error                                                 :element:
   :PROPERTIES:
   :custom_id: O76
   :masd.codec.stereotypes: masd::exception
   :END:

An error occurred during validation.

** header guard factory                                             :element:
   :PROPERTIES:
   :custom_id: O163
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

* entities                                                           :module:
  :PROPERTIES:
  :custom_id: O3
  :masd.codec.dia.comment: true
  :END:

Defines the MASD physical space.

** meta model                                                       :element:
   :PROPERTIES:
   :custom_id: O7
   :masd.codec.stereotypes: ContainingMetaElement
   :END:

Describes the geometry of physical space.

Provides details of the backends available in the current instance of Dogen.

*** template instantiation domains                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<std::string, std::vector<std::string>>
    :END:

Provides all of the domains to be used for template instantiation.

Example of a domain is "masd.facet" which contains the list of all available facets.
Templates (facet and profile) are then instantiated over this range, depending on
user choices.

*** backends                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<backend>
    :END:

All backends available in this meta-model.

*** indexed names                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::physical_meta_name_indices
    :END:

Repository with all the meta-names in this meta-model, indexed appropriately.

** backend                                                          :element:
   :PROPERTIES:
   :custom_id: O8
   :masd.codec.stereotypes: ContainingMetaElement, HasTechnicalSpace
   :END:

Represents a meta-region in physical space with archetypes for a primary technical
space, and associated secondary technical spaces.

*** parts                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, part>
    :END:

Parts by part ID.

*** facets                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, facet>
    :END:

Facets by facet ID.

*** archetypes                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, archetype>
    :END:

Archetypes by archetype ID.

*** archetype kinds                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<std::string, archetype_kind>
    :END:

Archetype kinds by ID.

** part                                                             :element:
   :PROPERTIES:
   :custom_id: O9
   :masd.codec.stereotypes: ContainingMetaElement
   :END:

Represents a meta-region in physical space with archetypes for a given part of a
component in a backend.

*** path configuration                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: path_configuration
    :END:

*** facets                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, facet>
    :END:

*** archetypes                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, archetype>
    :END:

*** requires relative path                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, this part needs a path relative to its root.

** path configuration                                               :element:
   :PROPERTIES:
   :custom_id: O10
   :END:

Describes how paths are handled within a part.

*** external modules                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: path_contribution_type
    :END:

What kind of contribution do the external modules make to the final path.

*** model modules                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: path_contribution_type
    :END:

What kind of contribution do the model modules make to the final path.

*** facet                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: path_contribution_type
    :END:

What kind of contribution does the facet make to the final path.

*** internal modules                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: path_contribution_type
    :END:

What kind of contribution do the internal modules make to the final path.

** path contribution type                                           :element:
   :PROPERTIES:
   :custom_id: O11
   :masd.codec.stereotypes: masd::enumeration
   :END:

Different kinds of contributions that can be made to the final path computation.

*** none                                                          :attribute:

The item does not contribute at all to the path.

*** as directories                                                :attribute:

The item contributes folders to the path.

*** as path components                                            :attribute:

The item contributes a single folder to the path, as a delimited string.

** facet                                                            :element:
   :PROPERTIES:
   :custom_id: O12
   :masd.codec.stereotypes: ContainingMetaElement, Postfixable
   :END:

Represents a meta-region in physical space with archetypes for a given theme.

*** archetypes                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, archetype>
    :END:

*** helpers                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, helper>
    :END:

*** default archetype for logical meta model id                   :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<std::string, archetype>
    :END:

Maps the logical model element ID to the default archetype for this facet.

Used to obtain the default archetype for referencing.

** archetype                                                        :element:
   :PROPERTIES:
   :custom_id: O13
   :masd.codec.stereotypes: MetaElement, Postfixable, Associatable, HasTechnicalSpace
   :END:

Represents a meta-artefact.

*** archetype kind id                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

ID for the archetype kind that this archetype is an instance of.

*** logical meta element id                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_meta_id
    :END:

ID of the meta-element in the logical model this archetype binds to.

*** part                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::physical_meta_id
    :END:

Part in which we are located.

*** relations                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: relations
    :END:

Properties of this archetype with regards to relations.

** archetype kind                                                   :element:
   :PROPERTIES:
   :custom_id: O14
   :masd.codec.stereotypes: Describable
   :END:

Represents a type of archetypes.

*** id                                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** file extension                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

** model                                                            :element:
   :PROPERTIES:
   :custom_id: O15
   :masd.codec.stereotypes: Element
   :END:

Collection of entities representing objects in physical space.

*** technical space                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Primary technical space that this model belongs to.

*** managed directories                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<boost::filesystem::path>
    :END:

*** outputting properties                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: outputting_properties
    :END:

*** orphan artefacts                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<boost::shared_ptr<physical::entities::artefact>>
    :END:

Artefacts that exist in the physical dimension only.

*** meta model properties                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: meta_model_properties
    :END:

Meta-model configuration supplied by this model.

*** has generatable artefacts                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true the repository has at least one generable artefact, false otherwise.

*** regions by logical id                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::logical_id, region>
    :END:

All physical regions in  this model, by logical ID.

** Describable                                                      :element:
   :PROPERTIES:
   :custom_id: O17
   :masd.codec.stereotypes: masd::object_template
   :END:

*** description                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Human readable description of the entity.

** MetaNameable                                                     :element:
   :PROPERTIES:
   :custom_id: O73
   :masd.codec.stereotypes: masd::object_template
   :END:

Ability to have a meta-name.

*** meta name                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::physical_meta_name
    :END:

Meta-name for this meta-element.

** Labelable                                                        :element:
   :PROPERTIES:
   :custom_id: O97
   :masd.codec.stereotypes: masd::object_template
   :END:

The ability to attach labels to an element.

*** labels                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::label>
    :END:

All labels associated with this element.

** MetaElement                                                      :element:
   :PROPERTIES:
   :custom_id: O19
   :masd.codec.parent: entities::Describable, entities::MetaNameable, entities::Labelable
   :masd.codec.stereotypes: masd::object_template
   :END:

** ContainingMetaElement                                            :element:
   :PROPERTIES:
   :custom_id: O18
   :masd.codec.parent: entities::MetaElement
   :masd.codec.stereotypes: masd::object_template
   :END:

The meta-element can contain other meta-elements.

*** directory name                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Default name to use for the directory in the file-system representing this element.

** Postfixable                                                      :element:
   :PROPERTIES:
   :custom_id: O23
   :masd.codec.stereotypes: masd::object_template
   :END:

*** postfix                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Postfix to apply to artefacts within this element, if any.

** artefact                                                         :element:
   :PROPERTIES:
   :custom_id: O30
   :masd.codec.stereotypes: Element, HasTechnicalSpace
   :END:

Represents an entity in physical space.

*** file path                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

Full path to the file corresponding to this artefact.

*** content                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

#+begin_src mustache
Textual content of the artefact.
#+end_src

*** path properties                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: path_properties
    :END:

Properties related to paths in the filesystem.

*** dependencies                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: std::vector<boost::filesystem::path>
    :END:

Files in the project directory that this file depends on, but which are not generated.

*** unified diff                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Unified diff between the in-memory artefact and the file in the filesystem.

*** operation                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: operation
    :END:

Operation to be applied to this artefact.

*** enablement properties                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: enablement_properties
    :END:

Stores the properties related to the enablement, as read out from configuration.

*** formatting input                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Template used as input in order to generate the artefact's content, if any.

*** relations                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: relation_properties
    :END:

** Configurable                                                     :element:
   :PROPERTIES:
   :custom_id: O31
   :masd.codec.stereotypes: masd::object_template
   :END:

Ability to have meta-data associated.

*** configuration                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<variability::entities::configuration>
    :END:

Configuration for this element.

** Provenance                                                       :element:
   :PROPERTIES:
   :custom_id: O32
   :masd.codec.stereotypes: masd::object_template
   :END:

Properties related to the origin of the modeling element.

*** provenance                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_provenance
    :END:

Details of the provenance of this model element.

** Nameable                                                         :element:
   :PROPERTIES:
   :custom_id: O78
   :masd.codec.stereotypes: masd::object_template
   :END:

Ability to have a name.

*** name                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::physical_name
    :END:

Name of the physical element.

** LogicalPhysicalSpaceIdentity                                     :element:
   :PROPERTIES:
   :custom_id: O168
   :masd.codec.stereotypes: masd::object_template
   :END:

*** id                                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::logical_meta_physical_id
    :END:

Point in logical-physical space represented by this element.

** Element                                                          :element:
   :PROPERTIES:
   :custom_id: O33
   :masd.codec.parent: entities::MetaNameable, entities::Configurable, entities::Provenance, entities::Nameable, entities::LogicalPhysicalSpaceIdentity
   :masd.codec.stereotypes: masd::object_template
   :END:

** outputting properties                                            :element:
   :PROPERTIES:
   :custom_id: O36
   :END:

Properties related to outputting.

*** force write                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

*** delete extra files                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

*** ignore files matching regex                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: std::vector<std::string>
    :END:

*** delete empty directories                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

** operation                                                        :element:
   :PROPERTIES:
   :custom_id: O38
   :END:

Operation to apply to an artefact.

*** type                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: operation_type
    :END:

*** reason                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: operation_reason
    :END:

** operation type                                                   :element:
   :PROPERTIES:
   :custom_id: O39
   :masd.cpp.hash.enabled: true
   :masd.codec.stereotypes: masd::enumeration
   :END:

Operation to perform to a given artefact.

*** create only                                                   :attribute:

Creates a file from an artefact only if it does not yet exist.

*** write                                                         :attribute:

Unconditionally writes an artefact into file.

*** ignore                                                        :attribute:

Ingores an artefact.

*** remove                                                        :attribute:

Deletes a file.

** operation reason                                                 :element:
   :PROPERTIES:
   :custom_id: O40
   :masd.cpp.hash.enabled: true
   :masd.codec.stereotypes: masd::enumeration
   :END:

Reasons for performing an operation.

*** newly generated                                               :attribute:

Artefact will produce a new generated file.

*** changed generated                                             :attribute:

Artefact will produce a changed generated file.

*** unchanged generated                                           :attribute:

Generated artefact contents match file contents.

*** already exists                                                :attribute:

The file already exists and we we're asked to create only.

*** ignore generated                                              :attribute:

User requested artefact to be ignored.

*** force write                                                   :attribute:

User requested to always write generated artefacts.

*** unexpected                                                    :attribute:

Artefact represents an unexpected file in project.

*** ignore unexpected                                             :attribute:

File is unexpected but the user asked us not to delete it.

*** ignore regex                                                  :attribute:

File is unexpected but the user asked us to ignore it via regexes.

** Associatable                                                     :element:
   :PROPERTIES:
   :custom_id: O80
   :masd.codec.stereotypes: masd::object_template
   :END:

The meta-element is associated with other meta-elements

*** depends                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:

List of meta-elements this meta-element depends upon, if any.

*** generates                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:

List of meta-elements this meta-element is used to generate, if any.

*** generated by                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Meta-element used to generate this meta-element, if any.

** model set                                                        :element:
   :PROPERTIES:
   :custom_id: O83
   :masd.codec.stereotypes: Nameable
   :END:

Represents a set of related physical models.

*** models                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<model>
    :END:

All models that are a member of this set.

** relation status                                                  :element:
   :PROPERTIES:
   :custom_id: O91
   :masd.codec.stereotypes: masd::enumeration, dogen::convertible
   :END:

Status of a given archetype with regards to being related to other archetypes.

*** not relatable                                                 :attribute:

Archertype cannot be legally related to other archetypes.

*** relatable                                                     :attribute:

Archetype can be related to archetypes.

*** facet default                                                 :attribute:

FIXME: hack for now

** constant relation                                                :element:
   :PROPERTIES:
   :custom_id: O99
   :masd.codec.stereotypes: Urnable, Labelable
   :END:

Represents a relation between archetypes, fixed to a logical model element.

*** logical model element id                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

ID of the logical model element that the relation is fixed against.

Element must exist in the current loaded models.

** variable relation                                                :element:
   :PROPERTIES:
   :custom_id: O100
   :masd.codec.stereotypes: Urnable
   :END:

*** type                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: variable_relation_type
    :END:

How these archetypes are related.

** Urnable                                                          :element:
   :PROPERTIES:
   :custom_id: O101
   :masd.codec.stereotypes: masd::object_template
   :END:

*** original urn                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

URN which may or may not be an archetype URN.

 It must have the form "archetype:" if pointing to an archetype, or  "label:" if
pointing to a label, and then is followed by "KEY:VALUE". The label must resolve
to a unique archetype.

*** resolved urn                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

URN pointing to the archetype.

 It must have the form "archetype:".

** variable relation type                                           :element:
   :PROPERTIES:
   :custom_id: O102
   :masd.codec.stereotypes: masd::enumeration
   :END:

Lists all of the valid variable relation types.

*** self                                                          :attribute:

Logical element is related to itself across different projections.

*** parent                                                        :attribute:

Parent of logical element.

*** child                                                         :attribute:

Child of logical element.

*** transparent                                                   :attribute:

The relation with another logical element requires the element's full definition.

*** opaque                                                        :attribute:

The relation with another logical element does not requires its full definition.

*** associative key                                               :attribute:

The associated element is used as an associative key.

*** visitation                                                    :attribute:

The associated element visits or is visited by the current element.

** relations                                                        :element:
   :PROPERTIES:
   :custom_id: O103
   :END:

Models relationships between archetypes.

*** status                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: relation_status
    :END:

Status of this archetype with regards to being related to archetypes.

*** constant                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<constant_relation>
    :END:

All archetypes this archetype is related to,  over a fixed logical meta-model
element.

*** variable                                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<variable_relation>
    :END:

All archetypes this archetype is related to,  over a variable logical meta-model
element.

*** hard coded                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<hard_coded_relation>
    :END:

** hard coded relation                                              :element:
   :PROPERTIES:
   :custom_id: O104
   :END:

Relations against hard-coded values.

*** value                                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

** region                                                           :element:
   :PROPERTIES:
   :custom_id: O110
   :masd.codec.stereotypes: Configurable, Provenance
   :END:

Represents a region of logical-physical space fixed at one logical point.

*** artefacts by archetype                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, boost::shared_ptr<physical::entities::artefact>>
    :END:

All artefacts that are contained within this set, organised by archetype.

*** archetype for role                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<std::string, identification::entities::physical_meta_id>
    :END:

Resolves a role into a concrete archetype, in the context of this logical element.

*** is generatable                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If false, the entire artefact set is not generatable.

** enablement properties                                            :element:
   :PROPERTIES:
   :custom_id: O114
   :END:

Stores the properties related to the enablement.

*** enabled                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the artefact is enabled and its content will be computed.

The enabled flag is computed from the configuration read out.

*** overwrite                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the artefact will be expressed to the filesystem if there are changes.

The overwrite flag is computed from the configuration read out.

*** facet enabled                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<bool>
    :END:

If supplied and true, the facet is enabled.

*** archetype enabled                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<bool>
    :END:

If supplied and true, the archetype is enabled.

*** facet overwrite                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<bool>
    :END:

If supplied and true, the facet will have overwrite on.

*** archetype overwrite                                           :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<bool>
    :END:

If supplied and true, the archetype will have overwrite on.

** backend properties                                               :element:
   :PROPERTIES:
   :custom_id: O127
   :masd.codec.stereotypes: MetaIdentifiable
   :END:

Properties related to the backend.

*** enabled                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the backend is enabled.

*** file path                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

Full path to the backend.

*** technical space version                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Technical space version to use.

*** enable backend directories                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

Copy of the component level configuration for backend directory enablement.

*** directory name                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Directory name as read out from the configuration.

*** computed directory name                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Name of the directory to use for the backend, computed from configuration.

** archetype kind properties                                        :element:
   :PROPERTIES:
   :custom_id: O128
   :masd.codec.stereotypes: MetaNameable
   :END:

*** file extension                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

** facet properties                                                 :element:
   :PROPERTIES:
   :custom_id: O129
   :masd.codec.stereotypes: MetaIdentifiable
   :END:

Properties related to the facet.

*** enabled                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the facet is enabled.

*** overwrite                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, all archetypes in this facet will be set to overwrite.

*** directory name                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Directory name as read out from the configuration.

*** computed directory name                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Computed name of the directory to use for the facet.

*** postfix                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Postfix as read out from the configuration, if any.

*** computed postfix                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Computed postfix to apply to all artefacts in this facet.

** archetype properties                                             :element:
   :PROPERTIES:
   :custom_id: O130
   :masd.codec.stereotypes: MetaIdentifiable
   :END:

Properties related to the archetype.

*** enabled                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, the archetype is enabled.

*** overwrite                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<bool>
    :END:

If true, all artefacts for this archetype will be set to overwrite.

*** postfix                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Postfix as read out from the configuration.

*** computed postfix                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Computed postfix to apply to all artefacts of this archetype.

*** backend properties                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: backend_properties
    :END:

*** facet properties                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: facet_properties
    :END:

*** part properties                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: part_properties
    :END:

** meta model properties                                            :element:
   :PROPERTIES:
   :custom_id: O131
   :END:

Meta-model configuration supplied by this model.

The meta-model properties represent a set of variability overrides supplied on top
of the existing physical meta-model. In addition, the properties also contain
computed values on the back of physical transforms.

*** output directory path                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

Full path to the output directory chosen by the user.

*** file path                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

Full path to the component.

*** backend properties                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, backend_properties>
    :END:

*** facet properties                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, facet_properties>
    :END:

*** archetype properties                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, archetype_properties>
    :END:

*** archetype kind properties                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, archetype_kind_properties>
    :END:

*** part properties                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, part_properties>
    :END:

*** enabled backends                                              :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::physical_meta_id>
    :END:

Contains the IDs of all of the backends which are enabled.

*** enabled archetype for element                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: std::unordered_set<identification::entities::logical_meta_physical_id>
    :END:

*** project path properties                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: project_path_properties
    :END:

** part properties                                                  :element:
   :PROPERTIES:
   :custom_id: O132
   :masd.codec.stereotypes: MetaIdentifiable
   :END:

Properties related to the part.

*** file path                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

Full path to the facet.

*** relative path                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

Path to the part, relative to the component directory.

Only required when the part is located outside of the component directory.

*** directory name                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Directory name as read out from the configuration.

*** computed directory name                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Computed name of the directory to use for the part.

** path properties                                                  :element:
   :PROPERTIES:
   :custom_id: O135
   :END:

*** file path                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

Full path to the file corresponding to this artefact.

*** header guard                                                  :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

C++ header guard for this artefact, if any,

*** inclusion path                                                :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

Path for inclusion for this artefact, computed from the path.

Note that this is will not necessarily be used for the inclusion directive.

*** inclusion directives                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: inclusion_directives
    :END:

*** inclusion dependencies                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:

C++ Inlusion dependencies for this artefact.

*** using dependencies                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:

*** relative path                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

** project path properties                                          :element:
   :PROPERTIES:
   :custom_id: O143
   :END:

Legacy type containing all proprties related to paths.

*** include directory name                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** source directory name                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** disable facet directories                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

*** header file extension                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** implementation file extension                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** tests directory name                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** templates directory name                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** templates file extension                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** enable unique file names                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

*** headers output directory                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

Directory in which to place C++ header files. Must be a relative path.

*** enable backend directories                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

If true, backends should have backend-specific directories to store their artefacts.

*** implementation directory full path                            :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

*** include directory full path                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

*** templates directory full path                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

** MetaIdentifiable                                                 :element:
   :PROPERTIES:
   :custom_id: O149
   :masd.codec.stereotypes: masd::object_template
   :END:

*** meta id                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::physical_meta_id
    :END:

Meta-id of the physical meta-element.

** legacy archetype kind                                            :element:
   :PROPERTIES:
   :custom_id: O154
   :masd.codec.stereotypes: masd::enumeration
   :END:

Kinds of archetypes available across all technical spaces.

*** visual studio solution                                        :attribute:

*** visual studio project                                         :attribute:

*** odb options                                                   :attribute:

*** msbuild targets                                               :attribute:

*** tests cmakelists                                              :attribute:

*** source cmakelists                                             :attribute:

*** include cmakelists                                            :attribute:

*** cpp header                                                    :attribute:

*** cpp implementation                                            :attribute:

*** tests cpp main                                                :attribute:

*** tests cpp implementation                                      :attribute:

*** templates                                                     :attribute:

*** csharp implementation                                         :attribute:

** relation properties                                              :element:
   :PROPERTIES:
   :custom_id: O157
   :END:

*** status                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: relation_status
    :END:

*** relations                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:

Artefacts that this artefact depends on.

The format used is dependent on the technical space the artefact belongs to.

** inclusion directives                                             :element:
   :PROPERTIES:
   :custom_id: O166
   :END:

Represents the group of inclusion directives associated with a name and an archetype.

*** primary                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

The main inclusion directive needed for this element.

*** secondary                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<std::string>
    :END:

Any other directives that are also needed for this element.

** HasTechnicalSpace                                                :element:
   :PROPERTIES:
   :custom_id: O170
   :masd.codec.stereotypes: masd::object_template
   :END:

*** technical space                                               :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::technical_space
    :END:

Technical space to which this physical element belongs to.

** helper                                                           :element:
   :PROPERTIES:
   :custom_id: O171
   :masd.codec.stereotypes: MetaElement, Associatable, HasTechnicalSpace
   :END:

*** relations                                                     :attribute:
    :PROPERTIES:
    :masd.codec.type: relations
    :END:

Properties of this helper with regards to relations.

*** part                                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: identification::entities::physical_meta_id
    :END:

Part in which we are located.

*** family                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: std::string
    :END:

*** owning formatters                                             :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::physical_meta_id>
    :END:

*** owning facets                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: std::list<identification::entities::physical_meta_id>
    :END:

* features                                                           :module:
  :PROPERTIES:
  :custom_id: O24
  :masd.codec.dia.comment: true
  :END:

Features for the MASD physical model.

** facet features                                                   :element:
   :PROPERTIES:
   :custom_id: O25
   :masd.variability.instantiation_domain_name: masd.facet
   :masd.codec.stereotypes: masd::variability::feature_template_bundle
   :END:

Physical features common to all facets.

*** directory name                                                :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.variability.default_value_override.cpp.types: "types"
    :masd.variability.default_value_override.cpp.hash: "hash"
    :masd.variability.default_value_override.cpp.tests: "generated_tests"
    :masd.variability.default_value_override.cpp.io: "io"
    :masd.variability.default_value_override.cpp.lexical_cast: "lexical_cast"
    :masd.variability.default_value_override.cpp.templates: "templates"
    :masd.variability.default_value_override.cpp.odb: "odb"
    :masd.variability.default_value_override.cpp.test_data: "test_data"
    :masd.variability.default_value_override.cpp.serialization: "serialization"
    :masd.variability.default_value_override.csharp.types: "Types"
    :masd.variability.default_value_override.csharp.io: "Dumpers"
    :masd.variability.default_value_override.csharp.test_data: "SequenceGenerators"
    :masd.codec.type: masd::variability::text
    :masd.codec.value: ""
    :END:

Directory in which to place this facet.

*** postfix                                                       :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.variability.default_value_override.cpp.tests: "tests"
    :masd.variability.default_value_override.cpp.hash: "hash"
    :masd.variability.default_value_override.cpp.lexical_cast: "lc"
    :masd.variability.default_value_override.cpp.io: "io"
    :masd.variability.default_value_override.cpp.odb: "pragmas"
    :masd.variability.default_value_override.cpp.test_data: "td"
    :masd.variability.default_value_override.cpp.serialization: "ser"
    :masd.variability.default_value_override.csharp.io: "Dumper"
    :masd.variability.default_value_override.csharp.test_data: "SequenceGenerator"
    :masd.codec.type: masd::variability::text
    :masd.codec.value: ""
    :END:

Postfix to use for all files that belong to this facet.

*** overwrite                                                     :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:

If true, the generated files will overwrite existing files.

** archetype features                                               :element:
   :PROPERTIES:
   :custom_id: O26
   :masd.variability.instantiation_domain_name: masd.archetype
   :masd.codec.stereotypes: masd::variability::feature_template_bundle
   :END:

Features common to all archetypes.

*** postfix                                                       :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.variability.default_value_override.forward_declarations: "fwd"
    :masd.variability.default_value_override.factory: "factory"
    :masd.variability.default_value_override.transform: "transform"
    :masd.codec.type: masd::variability::text
    :masd.codec.value: ""
    :END:

Postfix to use for all files that belong to this facet.

*** overwrite                                                     :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:

If true, the generated files will overwrite existing files.

** initializer                                                      :element:
   :PROPERTIES:
   :custom_id: O27
   :masd.codec.stereotypes: masd::variability::initializer
   :END:

** filesystem                                                       :element:
   :PROPERTIES:
   :custom_id: O48
   :masd.variability.default_binding_point: global
   :masd.variability.key_prefix: masd.physical
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Features related to filesystem operations.

*** force write                                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, artefacts are always written to the filesystem.

If false, the system will check to see if writing is needed by performing a binary
diff. If no changes are detected, no writting is performed.

*** delete extra files                                            :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:

If true, any files the code generator is not aware of are deleted.

If you'd like to skip the deletion of certain files, set  "ignore_files_matching_regex" accordingly.

*** ignore files matching regex                                   :attribute:
    :PROPERTIES:
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text_collection
    :END:

Regular expressions to filter files prior to deletion.

Only applicable if "delete_extra_files" is enabled.

*** delete empty directories                                      :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, all directories without any files will be deleted.

This setting is recursive: if a directory is composed of one or more directories that
are themselves empty, the entire directory tree is deleted.

*** enable backend directories                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, a directory is created for each technical space targeted.

Note that this setting is only relevant if you are targetting a single output technical
space. If you are targetting more than one, it will automatically be set to true.

** enablement                                                       :element:
   :PROPERTIES:
   :custom_id: O72
   :masd.variability.default_binding_point: any
   :masd.variability.generate_static_configuration: false
   :masd.variability.instantiation_domain_name: masd
   :masd.codec.stereotypes: masd::variability::feature_template_bundle
   :END:

Enablement related properties.

*** enabled                                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:

If true, decorations are enabled on this modeling element.

** backend features                                                 :element:
   :PROPERTIES:
   :custom_id: O140
   :masd.variability.instantiation_domain_name: masd.backend
   :masd.codec.stereotypes: masd::variability::feature_template_bundle
   :END:

Physical features common to all backends.

*** directory name                                                :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.variability.default_value_override.cpp: "cpp"
    :masd.variability.default_value_override.csharp: "cs"
    :masd.codec.type: masd::variability::text
    :masd.codec.value: ""
    :END:

Directory in which to place this backend.

** path features                                                    :element:
   :PROPERTIES:
   :custom_id: O144
   :masd.variability.generate_static_configuration: true
   :masd.variability.key_prefix: masd.cpp
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

Set of features related to path processing.

*** headers output directory                                      :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.variability.is_optional: true
    :masd.codec.type: masd::variability::text
    :END:

Override location of public c++ headers.

*** source directory name                                         :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.codec.type: masd::variability::text
    :masd.codec.value: "src"
    :END:

Directory in which to place C++ source files.

*** include directory name                                        :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.codec.type: masd::variability::text
    :masd.codec.value: "include"
    :END:

Directory in which to place include headers.

*** tests directory name                                          :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.codec.type: masd::variability::text
    :masd.codec.value: "generated_tests"
    :END:

Directory in which to place c++ tests.

*** templates directory name                                      :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.codec.type: masd::variability::text
    :masd.codec.value: "templates"
    :END:

Directory in which to place text templates.

*** header file extension                                         :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.codec.type: masd::variability::text
    :masd.codec.value: "hpp"
    :END:

Extension to use for C++ header files.

*** implementation file extension                                 :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.codec.type: masd::variability::text
    :masd.codec.value: "cpp"
    :END:

Extension to use for C++ implementation files.

*** templates file extension                                      :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.codec.type: masd::variability::text
    :masd.codec.value: "wale"
    :END:

Extension to use for text templates.

*** enable unique file names                                      :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:

If true, make all file names unique within a model.

*** disable facet directories                                     :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: global
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "false"
    :END:

If true, facet directories will not be used.

** directive features                                               :element:
   :PROPERTIES:
   :custom_id: O161
   :masd.variability.default_binding_point: element
   :masd.variability.instantiation_domain_name: masd.cpp.archetype
   :masd.codec.stereotypes: masd::variability::feature_template_bundle
   :END:

*** primary inclusion directive                                   :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::text
    :END:

*** secondary inclusion directive                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: masd::variability::text_collection
    :END:

** inclusion features                                               :element:
   :PROPERTIES:
   :custom_id: O162
   :masd.variability.generate_static_configuration: false
   :masd.variability.key_prefix: masd.cpp
   :masd.codec.stereotypes: masd::variability::feature_bundle
   :END:

*** inclusion required                                            :attribute:
    :PROPERTIES:
    :masd.variability.binding_point: element
    :masd.codec.type: masd::variability::boolean
    :masd.codec.value: "true"
    :END:

If true, inclusion is required for this modeling element.

* transforms                                                         :module:
  :PROPERTIES:
  :custom_id: O28
  :masd.codec.dia.comment: true
  :END:

Contains all of the transforms needed to produce
models and meta-models for the physical model.

** context                                                          :element:
   :PROPERTIES:
   :custom_id: O49
   :masd.cpp.types.class_forward_declarations.enabled: true
   :masd.codec.stereotypes: dogen::typeable, dogen::pretty_printable
   :END:

*** diffing configuration                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<diffing_configuration>
    :END:

*** reporting configuration                                       :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::optional<reporting_configuration>
    :END:

*** dry run mode enabled                                          :attribute:
    :PROPERTIES:
    :masd.codec.type: bool
    :END:

*** feature model                                                 :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<variability::entities::feature_model>
    :END:

*** meta model                                                    :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<entities::meta_model>
    :END:

Meta-model for the physical dimension.

*** tracer                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<tracing::tracer>
    :END:

*** output directory path                                         :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::filesystem::path
    :END:

Full path to the output directory chosen by the user.

** transform exception                                              :element:
   :PROPERTIES:
   :custom_id: O50
   :masd.codec.stereotypes: masd::exception
   :END:

** file generation chain                                            :element:
   :PROPERTIES:
   :custom_id: O51
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** write artefacts transform                                        :element:
   :PROPERTIES:
   :custom_id: O52
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** update outputting properties transform                           :element:
   :PROPERTIES:
   :custom_id: O53
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** remove files transform                                           :element:
   :PROPERTIES:
   :custom_id: O54
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** generate report transform                                        :element:
   :PROPERTIES:
   :custom_id: O55
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** model post processing chain                                      :element:
   :PROPERTIES:
   :custom_id: O56
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** generate diffs transform                                         :element:
   :PROPERTIES:
   :custom_id: O57
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** gather external artefacts transform                              :element:
   :PROPERTIES:
   :custom_id: O58
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** generate patch transform                                         :element:
   :PROPERTIES:
   :custom_id: O59
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** mock content filler transform                                    :element:
   :PROPERTIES:
   :custom_id: O62
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** operation transform                                              :element:
   :PROPERTIES:
   :custom_id: O63
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** merge transform                                                  :element:
   :PROPERTIES:
   :custom_id: O81
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** meta model production chain                                      :element:
   :PROPERTIES:
   :custom_id: O88
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** compute name indices transform                                   :element:
   :PROPERTIES:
   :custom_id: O89
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** minimal context                                                  :element:
   :PROPERTIES:
   :custom_id: O90
   :masd.codec.stereotypes: dogen::typeable, dogen::pretty_printable
   :END:

Smallest possible context required for bootstrapping purposes.

*** tracer                                                        :attribute:
    :PROPERTIES:
    :masd.codec.type: boost::shared_ptr<tracing::tracer>
    :END:

** meta model assembly transform                                    :element:
   :PROPERTIES:
   :custom_id: O92
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** compute template instantiation domains                           :element:
   :PROPERTIES:
   :custom_id: O95
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** model population chain                                           :element:
   :PROPERTIES:
   :custom_id: O115
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** meta model properties transform                                  :element:
   :PROPERTIES:
   :custom_id: O116
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** enablement transform                                             :element:
   :PROPERTIES:
   :custom_id: O117
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** generability transform                                           :element:
   :PROPERTIES:
   :custom_id: O118
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** paths transform                                                  :element:
   :PROPERTIES:
   :custom_id: O133
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** remove regions transform                                         :element:
   :PROPERTIES:
   :custom_id: O137
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** legacy paths transform                                           :element:
   :PROPERTIES:
   :custom_id: O152
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

** relations transform                                              :element:
   :PROPERTIES:
   :custom_id: O159
   :masd.codec.stereotypes: dogen::handcrafted::typeable
   :END:

* registrar                                                         :element:
  :PROPERTIES:
  :custom_id: O71
  :masd.codec.stereotypes: masd::serialization::type_registrar
  :END:
