/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * These files are code-generated via overrides to test dogen. Do not commit them.
 *
 * Generation timestamp: 2022-10-20T10:20:30
 * WARNING: do not edit this file manually.
 * Generated by MASD Dogen v1.0.33
 *
 * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */
#include <sstream>
#include "dogen.physical/test_data/entities/helper_td.hpp"
#include "dogen.physical/test_data/entities/relations_td.hpp"
#include "dogen.identification/test_data/entities/label_td.hpp"
#include "dogen.identification/test_data/entities/technical_space_td.hpp"
#include "dogen.identification/test_data/entities/physical_meta_id_td.hpp"
#include "dogen.identification/test_data/entities/physical_meta_name_td.hpp"

namespace {

std::string create_std_string(const unsigned int position) {
    std::ostringstream s;
    s << "a_string_" << position;
    return s.str();
}

dogen::identification::entities::physical_meta_name
create_dogen_identification_entities_physical_meta_name(const unsigned int position) {
    return dogen::identification::entities::physical_meta_name_generator::create(position);
}

dogen::identification::entities::label
create_dogen_identification_entities_label(const unsigned int position) {
    return dogen::identification::entities::label_generator::create(position);
}

std::list<dogen::identification::entities::label> create_std_list_dogen_identification_entities_label(unsigned int position) {
    std::list<dogen::identification::entities::label> r;
    for (unsigned int i(0); i < 4; ++i) {
        r.push_back(create_dogen_identification_entities_label(position + i));
    }
    return r;
}

std::list<std::string> create_std_list_std_string(unsigned int position) {
    std::list<std::string> r;
    for (unsigned int i(0); i < 4; ++i) {
        r.push_back(create_std_string(position + i));
    }
    return r;
}

dogen::identification::entities::technical_space
create_dogen_identification_entities_technical_space(const unsigned int position) {
    return dogen::identification::entities::technical_space_generator::create(position);
}

dogen::physical::entities::relations
create_dogen_physical_entities_relations(const unsigned int position) {
    return dogen::physical::entities::relations_generator::create(position);
}

dogen::identification::entities::physical_meta_id
create_dogen_identification_entities_physical_meta_id(const unsigned int position) {
    return dogen::identification::entities::physical_meta_id_generator::create(position);
}

std::list<dogen::identification::entities::physical_meta_id> create_std_list_dogen_identification_entities_physical_meta_id(unsigned int position) {
    std::list<dogen::identification::entities::physical_meta_id> r;
    for (unsigned int i(0); i < 4; ++i) {
        r.push_back(create_dogen_identification_entities_physical_meta_id(position + i));
    }
    return r;
}

}

namespace dogen::physical::entities {

helper_generator::helper_generator() : position_(0) { }

void helper_generator::
populate(const unsigned int position, result_type& v) {
    v.description(create_std_string(position + 0));
    v.meta_name(create_dogen_identification_entities_physical_meta_name(position + 1));
    v.labels(create_std_list_dogen_identification_entities_label(position + 2));
    v.depends(create_std_list_std_string(position + 3));
    v.generates(create_std_list_std_string(position + 4));
    v.generated_by(create_std_string(position + 5));
    v.technical_space(create_dogen_identification_entities_technical_space(position + 6));
    v.relations(create_dogen_physical_entities_relations(position + 7));
    v.part(create_dogen_identification_entities_physical_meta_id(position + 8));
    v.family(create_std_string(position + 9));
    v.owning_formatters(create_std_list_dogen_identification_entities_physical_meta_id(position + 10));
    v.owning_facets(create_std_list_dogen_identification_entities_physical_meta_id(position + 11));
}

helper_generator::result_type
helper_generator::create(const unsigned int position) {
    helper r;
    helper_generator::populate(position, r);
    return r;
}

helper_generator::result_type*
helper_generator::create_ptr(const unsigned int position) {
    helper* p = new helper();
    helper_generator::populate(position, *p);
    return p;
}

helper_generator::result_type
helper_generator::operator()() {
    return create(position_++);
}

}
