/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * These files are code-generated via overrides to test dogen. Do not commit them.
 *
 * Generation timestamp: 2022-10-20T10:20:30
 * WARNING: do not edit this file manually.
 * Generated by MASD Dogen v1.0.33
 *
 * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */
#include <sstream>
#include "dogen.physical/test_data/entities/part_properties_td.hpp"
#include "dogen.physical/test_data/entities/facet_properties_td.hpp"
#include "dogen.physical/test_data/entities/backend_properties_td.hpp"
#include "dogen.physical/test_data/entities/archetype_properties_td.hpp"
#include "dogen.physical/test_data/entities/meta_model_properties_td.hpp"
#include "dogen.identification/test_data/entities/physical_meta_id_td.hpp"
#include "dogen.physical/test_data/entities/project_path_properties_td.hpp"
#include "dogen.physical/test_data/entities/archetype_kind_properties_td.hpp"
#include "dogen.identification/test_data/entities/logical_meta_physical_id_td.hpp"

namespace {

boost::filesystem::path
create_boost_filesystem_path(const unsigned int position) {
    std::ostringstream s;
    s << "/a/path/number_" << position;
    return boost::filesystem::path(s.str());
}

dogen::identification::entities::physical_meta_id
create_dogen_identification_entities_physical_meta_id(const unsigned int position) {
    return dogen::identification::entities::physical_meta_id_generator::create(position);
}

dogen::physical::entities::backend_properties
create_dogen_physical_entities_backend_properties(const unsigned int position) {
    return dogen::physical::entities::backend_properties_generator::create(position);
}

std::unordered_map<dogen::identification::entities::physical_meta_id, dogen::physical::entities::backend_properties> create_std_unordered_map_dogen_identification_entities_physical_meta_id_dogen_physical_entities_backend_properties(unsigned int position) {
    std::unordered_map<dogen::identification::entities::physical_meta_id, dogen::physical::entities::backend_properties> r;
    for (unsigned int i(0); i < 4; ++i) {
        r.insert(std::make_pair(create_dogen_identification_entities_physical_meta_id(position + i), create_dogen_physical_entities_backend_properties(position + i)));
    }
    return r;
}

dogen::physical::entities::facet_properties
create_dogen_physical_entities_facet_properties(const unsigned int position) {
    return dogen::physical::entities::facet_properties_generator::create(position);
}

std::unordered_map<dogen::identification::entities::physical_meta_id, dogen::physical::entities::facet_properties> create_std_unordered_map_dogen_identification_entities_physical_meta_id_dogen_physical_entities_facet_properties(unsigned int position) {
    std::unordered_map<dogen::identification::entities::physical_meta_id, dogen::physical::entities::facet_properties> r;
    for (unsigned int i(0); i < 4; ++i) {
        r.insert(std::make_pair(create_dogen_identification_entities_physical_meta_id(position + i), create_dogen_physical_entities_facet_properties(position + i)));
    }
    return r;
}

dogen::physical::entities::archetype_properties
create_dogen_physical_entities_archetype_properties(const unsigned int position) {
    return dogen::physical::entities::archetype_properties_generator::create(position);
}

std::unordered_map<dogen::identification::entities::physical_meta_id, dogen::physical::entities::archetype_properties> create_std_unordered_map_dogen_identification_entities_physical_meta_id_dogen_physical_entities_archetype_properties(unsigned int position) {
    std::unordered_map<dogen::identification::entities::physical_meta_id, dogen::physical::entities::archetype_properties> r;
    for (unsigned int i(0); i < 4; ++i) {
        r.insert(std::make_pair(create_dogen_identification_entities_physical_meta_id(position + i), create_dogen_physical_entities_archetype_properties(position + i)));
    }
    return r;
}

dogen::physical::entities::archetype_kind_properties
create_dogen_physical_entities_archetype_kind_properties(const unsigned int position) {
    return dogen::physical::entities::archetype_kind_properties_generator::create(position);
}

std::unordered_map<dogen::identification::entities::physical_meta_id, dogen::physical::entities::archetype_kind_properties> create_std_unordered_map_dogen_identification_entities_physical_meta_id_dogen_physical_entities_archetype_kind_properties(unsigned int position) {
    std::unordered_map<dogen::identification::entities::physical_meta_id, dogen::physical::entities::archetype_kind_properties> r;
    for (unsigned int i(0); i < 4; ++i) {
        r.insert(std::make_pair(create_dogen_identification_entities_physical_meta_id(position + i), create_dogen_physical_entities_archetype_kind_properties(position + i)));
    }
    return r;
}

dogen::physical::entities::part_properties
create_dogen_physical_entities_part_properties(const unsigned int position) {
    return dogen::physical::entities::part_properties_generator::create(position);
}

std::unordered_map<dogen::identification::entities::physical_meta_id, dogen::physical::entities::part_properties> create_std_unordered_map_dogen_identification_entities_physical_meta_id_dogen_physical_entities_part_properties(unsigned int position) {
    std::unordered_map<dogen::identification::entities::physical_meta_id, dogen::physical::entities::part_properties> r;
    for (unsigned int i(0); i < 4; ++i) {
        r.insert(std::make_pair(create_dogen_identification_entities_physical_meta_id(position + i), create_dogen_physical_entities_part_properties(position + i)));
    }
    return r;
}

std::unordered_set<dogen::identification::entities::physical_meta_id> create_std_unordered_set_dogen_identification_entities_physical_meta_id(unsigned int position) {
    std::unordered_set<dogen::identification::entities::physical_meta_id> r;
    for (unsigned int i(0); i < 4; ++i) {
        r.insert(create_dogen_identification_entities_physical_meta_id(position + i));
    }
    return r;
}

dogen::identification::entities::logical_meta_physical_id
create_dogen_identification_entities_logical_meta_physical_id(const unsigned int position) {
    return dogen::identification::entities::logical_meta_physical_id_generator::create(position);
}

std::unordered_set<dogen::identification::entities::logical_meta_physical_id> create_std_unordered_set_dogen_identification_entities_logical_meta_physical_id(unsigned int position) {
    std::unordered_set<dogen::identification::entities::logical_meta_physical_id> r;
    for (unsigned int i(0); i < 4; ++i) {
        r.insert(create_dogen_identification_entities_logical_meta_physical_id(position + i));
    }
    return r;
}

dogen::physical::entities::project_path_properties
create_dogen_physical_entities_project_path_properties(const unsigned int position) {
    return dogen::physical::entities::project_path_properties_generator::create(position);
}

}

namespace dogen::physical::entities {

meta_model_properties_generator::meta_model_properties_generator() : position_(0) { }

void meta_model_properties_generator::
populate(const unsigned int position, result_type& v) {
    v.output_directory_path(create_boost_filesystem_path(position + 0));
    v.file_path(create_boost_filesystem_path(position + 1));
    v.backend_properties(create_std_unordered_map_dogen_identification_entities_physical_meta_id_dogen_physical_entities_backend_properties(position + 2));
    v.facet_properties(create_std_unordered_map_dogen_identification_entities_physical_meta_id_dogen_physical_entities_facet_properties(position + 3));
    v.archetype_properties(create_std_unordered_map_dogen_identification_entities_physical_meta_id_dogen_physical_entities_archetype_properties(position + 4));
    v.archetype_kind_properties(create_std_unordered_map_dogen_identification_entities_physical_meta_id_dogen_physical_entities_archetype_kind_properties(position + 5));
    v.part_properties(create_std_unordered_map_dogen_identification_entities_physical_meta_id_dogen_physical_entities_part_properties(position + 6));
    v.enabled_backends(create_std_unordered_set_dogen_identification_entities_physical_meta_id(position + 7));
    v.enabled_archetype_for_element(create_std_unordered_set_dogen_identification_entities_logical_meta_physical_id(position + 8));
    v.project_path_properties(create_dogen_physical_entities_project_path_properties(position + 9));
}

meta_model_properties_generator::result_type
meta_model_properties_generator::create(const unsigned int position) {
    meta_model_properties r;
    meta_model_properties_generator::populate(position, r);
    return r;
}

meta_model_properties_generator::result_type*
meta_model_properties_generator::create_ptr(const unsigned int position) {
    meta_model_properties* p = new meta_model_properties();
    meta_model_properties_generator::populate(position, *p);
    return p;
}

meta_model_properties_generator::result_type
meta_model_properties_generator::operator()() {
    return create(position_++);
}

}
