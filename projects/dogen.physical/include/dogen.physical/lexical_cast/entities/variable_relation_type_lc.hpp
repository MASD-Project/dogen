/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * These files are code-generated via overrides to test dogen. Do not commit them.
 *
 * Generation timestamp: 2022-10-20T10:20:30
 * WARNING: do not edit this file manually.
 * Generated by MASD Dogen v1.0.33
 *
 * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */
#ifndef DOGEN_PHYSICAL_LEXICAL_CAST_ENTITIES_VARIABLE_RELATION_TYPE_LC_HPP
#define DOGEN_PHYSICAL_LEXICAL_CAST_ENTITIES_VARIABLE_RELATION_TYPE_LC_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma once
#endif

#include <boost/lexical_cast.hpp>
#include "dogen.physical/types/entities/variable_relation_type.hpp"

namespace boost {

template<>
inline std::string lexical_cast(const dogen::physical::entities::variable_relation_type& v) {
    using dogen::physical::entities::variable_relation_type;

    switch (v) {
    case variable_relation_type::invalid:
        return "variable_relation_type::invalid";
    case variable_relation_type::self:
        return "variable_relation_type::self";
    case variable_relation_type::parent:
        return "variable_relation_type::parent";
    case variable_relation_type::child:
        return "variable_relation_type::child";
    case variable_relation_type::transparent:
        return "variable_relation_type::transparent";
    case variable_relation_type::opaque:
        return "variable_relation_type::opaque";
    case variable_relation_type::associative_key:
        return "variable_relation_type::associative_key";
    case variable_relation_type::visitation:
        return "variable_relation_type::visitation";
    default:
        throw boost::bad_lexical_cast();
    }
}

template<>
inline dogen::physical::entities::variable_relation_type lexical_cast(const std::string & s) {
    using dogen::physical::entities::variable_relation_type;

    if (s == "invalid" || s == "variable_relation_type::invalid")
        return variable_relation_type::invalid;
    if (s == "self" || s == "variable_relation_type::self")
        return variable_relation_type::self;
    if (s == "parent" || s == "variable_relation_type::parent")
        return variable_relation_type::parent;
    if (s == "child" || s == "variable_relation_type::child")
        return variable_relation_type::child;
    if (s == "transparent" || s == "variable_relation_type::transparent")
        return variable_relation_type::transparent;
    if (s == "opaque" || s == "variable_relation_type::opaque")
        return variable_relation_type::opaque;
    if (s == "associative_key" || s == "variable_relation_type::associative_key")
        return variable_relation_type::associative_key;
    if (s == "visitation" || s == "variable_relation_type::visitation")
        return variable_relation_type::visitation;
    throw boost::bad_lexical_cast();
}

}

#endif
