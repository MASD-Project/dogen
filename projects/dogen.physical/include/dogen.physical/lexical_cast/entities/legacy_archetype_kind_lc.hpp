/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * These files are code-generated via overrides to test dogen. Do not commit them.
 *
 * Generation timestamp: 2022-10-20T10:20:30
 * WARNING: do not edit this file manually.
 * Generated by MASD Dogen v1.0.33
 *
 * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */
#ifndef DOGEN_PHYSICAL_LEXICAL_CAST_ENTITIES_LEGACY_ARCHETYPE_KIND_LC_HPP
#define DOGEN_PHYSICAL_LEXICAL_CAST_ENTITIES_LEGACY_ARCHETYPE_KIND_LC_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma once
#endif

#include <boost/lexical_cast.hpp>
#include "dogen.physical/types/entities/legacy_archetype_kind.hpp"

namespace boost {

template<>
inline std::string lexical_cast(const dogen::physical::entities::legacy_archetype_kind& v) {
    using dogen::physical::entities::legacy_archetype_kind;

    switch (v) {
    case legacy_archetype_kind::invalid:
        return "legacy_archetype_kind::invalid";
    case legacy_archetype_kind::visual_studio_solution:
        return "legacy_archetype_kind::visual_studio_solution";
    case legacy_archetype_kind::visual_studio_project:
        return "legacy_archetype_kind::visual_studio_project";
    case legacy_archetype_kind::odb_options:
        return "legacy_archetype_kind::odb_options";
    case legacy_archetype_kind::msbuild_targets:
        return "legacy_archetype_kind::msbuild_targets";
    case legacy_archetype_kind::tests_cmakelists:
        return "legacy_archetype_kind::tests_cmakelists";
    case legacy_archetype_kind::source_cmakelists:
        return "legacy_archetype_kind::source_cmakelists";
    case legacy_archetype_kind::include_cmakelists:
        return "legacy_archetype_kind::include_cmakelists";
    case legacy_archetype_kind::cpp_header:
        return "legacy_archetype_kind::cpp_header";
    case legacy_archetype_kind::cpp_implementation:
        return "legacy_archetype_kind::cpp_implementation";
    case legacy_archetype_kind::tests_cpp_main:
        return "legacy_archetype_kind::tests_cpp_main";
    case legacy_archetype_kind::tests_cpp_implementation:
        return "legacy_archetype_kind::tests_cpp_implementation";
    case legacy_archetype_kind::templates:
        return "legacy_archetype_kind::templates";
    case legacy_archetype_kind::csharp_implementation:
        return "legacy_archetype_kind::csharp_implementation";
    default:
        throw boost::bad_lexical_cast();
    }
}

template<>
inline dogen::physical::entities::legacy_archetype_kind lexical_cast(const std::string & s) {
    using dogen::physical::entities::legacy_archetype_kind;

    if (s == "invalid" || s == "legacy_archetype_kind::invalid")
        return legacy_archetype_kind::invalid;
    if (s == "visual_studio_solution" || s == "legacy_archetype_kind::visual_studio_solution")
        return legacy_archetype_kind::visual_studio_solution;
    if (s == "visual_studio_project" || s == "legacy_archetype_kind::visual_studio_project")
        return legacy_archetype_kind::visual_studio_project;
    if (s == "odb_options" || s == "legacy_archetype_kind::odb_options")
        return legacy_archetype_kind::odb_options;
    if (s == "msbuild_targets" || s == "legacy_archetype_kind::msbuild_targets")
        return legacy_archetype_kind::msbuild_targets;
    if (s == "tests_cmakelists" || s == "legacy_archetype_kind::tests_cmakelists")
        return legacy_archetype_kind::tests_cmakelists;
    if (s == "source_cmakelists" || s == "legacy_archetype_kind::source_cmakelists")
        return legacy_archetype_kind::source_cmakelists;
    if (s == "include_cmakelists" || s == "legacy_archetype_kind::include_cmakelists")
        return legacy_archetype_kind::include_cmakelists;
    if (s == "cpp_header" || s == "legacy_archetype_kind::cpp_header")
        return legacy_archetype_kind::cpp_header;
    if (s == "cpp_implementation" || s == "legacy_archetype_kind::cpp_implementation")
        return legacy_archetype_kind::cpp_implementation;
    if (s == "tests_cpp_main" || s == "legacy_archetype_kind::tests_cpp_main")
        return legacy_archetype_kind::tests_cpp_main;
    if (s == "tests_cpp_implementation" || s == "legacy_archetype_kind::tests_cpp_implementation")
        return legacy_archetype_kind::tests_cpp_implementation;
    if (s == "templates" || s == "legacy_archetype_kind::templates")
        return legacy_archetype_kind::templates;
    if (s == "csharp_implementation" || s == "legacy_archetype_kind::csharp_implementation")
        return legacy_archetype_kind::csharp_implementation;
    throw boost::bad_lexical_cast();
}

}

#endif
