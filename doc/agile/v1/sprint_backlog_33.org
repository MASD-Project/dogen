#+title: Sprint Backlog 33
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) spike(p) }

* Sprint Goals

- Finnish getting PlantUML diagrams into a usable state.
- PMM refactoring

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2023-01-03 Tue 23:46]
| <75>                                   |         |       |       |       |
| Headline                               | Time    |       |       |     % |
|----------------------------------------+---------+-------+-------+-------|
| *Total time*                           | *24:13* |       |       | 100.0 |
|----------------------------------------+---------+-------+-------+-------|
| Stories                                | 24:13   |       |       | 100.0 |
| Active                                 |         | 24:13 |       | 100.0 |
| Edit release notes for previous sprint |         |       | 20:38 |  85.2 |
| Sprint and product backlog refinement  |         |       |  0:10 |   0.7 |
| Nightlies failing with valgrind errors |         |       |  0:27 |   1.9 |
| Fullgen build is not running           |         |       |  0:43 |   3.0 |
| Update vcpkg to latest                 |         |       |  0:11 |   0.8 |
| Update emacs to latest                 |         |       |  0:54 |   3.7 |
| OSX build is failing                   |         |       |  0:19 |   1.3 |
| Check last commit is broken            |         |       |  0:51 |   3.5 |
#+end:

Agenda:

#+begin_src emacs-lisp
(org-agenda-file-to-front)
#+end_src

*** STARTED Edit release notes for previous sprint                    :story:
    :LOGBOOK:
    CLOCK: [2023-01-03 Tue 22:02]--[2023-01-03 Tue 23:20] =>  1:18
    CLOCK: [2023-01-02 Mon 08:02]--[2023-01-02 Mon 08:08] =>  0:06
    CLOCK: [2023-01-01 Sun 23:40]--[2023-01-02 Mon 12:35] => 12:55
    CLOCK: [2022-12-31 Sat 16:12]--[2022-12-31 Sat 17:26] =>  1:14
    CLOCK: [2022-12-31 Sat 14:07]--[2022-12-31 Sat 15:22] =>  1:15
    CLOCK: [2022-12-31 Sat 13:57]--[2022-12-31 Sat 14:06] =>  0:09
    CLOCK: [2022-12-31 Sat 13:39]--[2022-12-31 Sat 13:55] =>  0:16
    CLOCK: [2022-12-30 Fri 16:47]--[2022-12-30 Fri 17:49] =>  1:02
    CLOCK: [2022-12-30 Fri 12:11]--[2022-12-30 Fri 14:34] =>  2:23
    :END:

Add github release notes for previous sprint.

Release announcements:

- [[https://twitter.com/MarcoCraveiro/status/1570851700893941760][twitter]]
- [[https://www.linkedin.com/posts/marco-craveiro-phd-%F0%9F%87%A6%F0%9F%87%B4%F0%9F%87%B5%F0%9F%87%B9-31558919_release-dogen-v1031-exeunt-academia-activity-6976618358418886656-FRBE][linkedin]]
- [[https://gitter.im/MASD-Project/Lobby][Gitter]]

#+begin_src markdown#+end_src

*** Create a demo and presentation for previous sprint                :story:

Time spent creating the demo and presentation.

**** Presentation

***** Dogen v1.0.32, "Natal na BaÃ­a Azul"

    Marco Craveiro
    Domain Driven Development
    Released on 30th December 2022

*** STARTED Sprint and product backlog refinement                     :story:
    :LOGBOOK:
    CLOCK: [2022-12-31 Sat 10:39]--[2022-12-31 Sat 10:49] =>  0:10
    :END:

Updates to sprint and product backlog.

*** STARTED Nightlies failing with valgrind errors                    :story:
    :LOGBOOK:
    CLOCK: [2022-12-31 Sat 11:00]--[2022-12-31 Sat 11:19] =>  0:19
    CLOCK: [2022-12-31 Sat 10:30]--[2022-12-31 Sat 10:38] =>  0:08
    :END:

Error:

: ### unhandled dwarf2 abbrev form code 0x25
: ### unhandled dwarf2 abbrev form code 0x25
: ### unhandled dwarf2 abbrev form code 0x25
: ### unhandled dwarf2 abbrev form code 0x23
: ==15594== Valgrind: debuginfo reader: ensure_valid failed:
: ==15594== Valgrind:   during call to ML_(img_get)
: ==15594== Valgrind:   request for range [346666073, +4) exceeds
: ==15594== Valgrind:   valid image size of 25293440 for image:
: ==15594== Valgrind:   "/home/runner/work/dogen/dogen/build/output/linux-gcc-debug/stage/bin/dogen.cli.tests"
: ==15594==
: ==15594== Valgrind: debuginfo reader: Possibly corrupted debuginfo file.
: ==15594== Valgrind: I can't recover.  Giving up.  Sorry.
: ==15594==

Seems like we are using a non-supported version of DWARF. We need to ensure
Clang and GCC emit a version valgrind supports, e.g.: =-gdwarf-4=.

Alternatively we could look into updating valgrind to latest, if it supports
DWARF 5. Actually looking at the linked ticket seems like its not yet supported.

Links:

- [[https://bugzilla.mozilla.org/show_bug.cgi?id=1758782][Valgrind run fails when building with clang 14]]
- [[https://bugs.kde.org/show_bug.cgi?id=452758][Valgrind does not read properly DWARF5 as generated by Clang14]]

*** STARTED Fullgen build is not running                              :story:
    :LOGBOOK:
    CLOCK: [2022-12-31 Sat 13:12]--[2022-12-31 Sat 13:30] =>  0:18
    CLOCK: [2022-12-31 Sat 13:10]--[2022-12-31 Sat 13:11] =>  0:01
    CLOCK: [2022-12-31 Sat 12:45]--[2022-12-31 Sat 13:09] =>  0:24
    :END:

It seems we are looking for a non-existent commit:

: test -z $(git rev-list --after="24 hours" 74b36a13e1bce390582d9ae3a661c8aae7909911) && echo "::set-output name=should_run::false"
: fatal: bad object 74b36a13e1bce390582d9ae3a661c8aae7909911

The problem seems to be related to how =github.sha= works:

#+begin_quote
*github.sha*: type: string. The commit SHA that triggered the workflow. The
value of this commit SHA depends on the event that triggered the workflow. For
more information, see "Events that trigger workflows." For example,
ffac537e6cbbf934b08745a378932722df287a53.
#+end_quote

Its not obvious what the SHA is when you are triggered from a scheduler, plus we
are creating new commits and deleting commits when we recreate the branch. Best
to ask git for the latest commit instead.

Links:

- [[https://docs.github.com/en/actions/learn-github-actions/contexts#github-context][github context]]

*** COMPLETED Update vcpkg to latest                                  :story:
    :LOGBOOK:
    CLOCK: [2022-12-31 Sat 14:06]--[2022-12-31 Sat 14:07] =>  0:01
    CLOCK: [2022-12-31 Sat 13:55]--[2022-12-31 Sat 13:57] =>  0:02
    CLOCK: [2022-12-31 Sat 13:37]--[2022-12-31 Sat 13:39] =>  0:02
    CLOCK: [2022-12-31 Sat 13:30]--[2022-12-31 Sat 13:36] =>  0:06
    :END:

Boost 1.81 is now available, check to see if its in vcpkg.

*** STARTED Update emacs to latest                                    :story:
    :LOGBOOK:
    CLOCK: [2023-01-01 Sun 19:30]--[2023-01-01 Sun 20:24] =>  1:14
    :END:

We should try to update all packages, the emacs version etc to latest version.

*** STARTED OSX build is failing                                      :story:
    :LOGBOOK:
    CLOCK: [2023-01-01 Sun 20:25]--[2023-01-01 Sun 20:44] =>  0:19
    :END:

Error:

: [347/1212] Building CXX object projects/dogen.variability/src/CMakeFiles/dogen.variability.lib.dir/types/helpers/template_instantiator.cpp.o
: FAILED: projects/dogen.variability/src/CMakeFiles/dogen.variability.lib.dir/types/helpers/template_instantiator.cpp.o
: /usr/local/bin/sccache /Applications/Xcode_14.0.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -DBOOST_BIND_GLOBAL_PLACEHOLDERS -I/.../dogen/build/output/macos-clang-debug/stage/include -I/.../dogen/projects/dogen/include : -I/.../dogen/projects/dogen.identification/include -I/.../dogen/projects/dogen.physical/include -I/.../dogen/projects/dogen.cli/include -I/.../dogen/projects/dogen.utility/include -I/.../dogen/projects/dogen.variability/include -I/.../dogen/projects/dogen.org/include -I/.../dogen/projects/dogen.codec/include -I/.../dogen/projects/dogen.tracing/include -I/.../dogen/projects/dogen.logical/include -I/.../dogen/projects/dogen.orchestration/include -I/.../dogen/projects/dogen.templating/include -I/.../dogen/projects/dogen.text/include -isystem /.../dogen/build/output/macos-clang-debug/vcpkg_installed/x64-osx/include -fprofile-arcs -ftest-coverage -Wall -Wextra -Wconversion -gdwarf-4 -Wno-mismatched-tags -Qunused-arguments -pedantic -Werror -Wno-system-headers -Woverloaded-virtual -Wwrite-strings  -frtti -fvisibility=default  -g -isysroot /Applications/Xcode_14.0.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk -fPIC -std=c++17 -MD -MT projects/dogen.variability/src/CMakeFiles/dogen.variability.lib.dir/types/helpers/template_instantiator.cpp.o -MF projects/dogen.variability/src/CMakeFiles/dogen.variability.lib.dir/types/helpers/template_instantiator.cpp.o.d -o projects/dogen.variability/src/CMakeFiles/dogen.variability.lib.dir/types/helpers/template_instantiator.cpp.o -c /.../dogen/projects/dogen.variability/src/types/helpers/template_instantiator.cpp
: In file included from projects/dogen.variability/src/types/helpers/template_instantiator.cpp:21:
: In file included from build/output/macos-clang-debug/vcpkg_installed/x64-osx/include/boost/lexical_cast.hpp:30:
: In file included from build/output/macos-clang-debug/vcpkg_installed/x64-osx/include/boost/range/iterator_range_core.hpp:26:
: In file included from build/output/macos-clang-debug/vcpkg_installed/x64-osx/include/boost/iterator/iterator_traits.hpp:10:
: In file included from /Applications/Xcode_14.0.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk/usr/include/c++/v1/iterator:5: 78:
: In file included from /Applications/Xcode_14.0.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk/usr/include/c++/v1/__functional_base:26:
: In file included from /Applications/Xcode_14.0.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk/usr/include/c++/v1/utility:221:
: /Applications/Xcode_14.0.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk/usr/include/c++/v1/__utility/pair.h:51:9: error: implicit instantiation of undefined template 'std::vector<std::string>'

This seems to be an OSX specific problem. Add includes to these classes prior to
boost lexical and see if it fixes the problem.

*** STARTED Check last commit is broken                               :story:
    :LOGBOOK:
    CLOCK: [2023-01-03 Tue 23:20]--[2023-01-03 Tue 23:46] =>  0:26
    CLOCK: [2023-01-02 Mon 07:50]--[2023-01-02 Mon 08:01] =>  0:11
    CLOCK: [2023-01-01 Sun 23:25]--[2023-01-01 Sun 23:38] =>  0:13
    CLOCK: [2023-01-01 Sun 20:46]--[2023-01-01 Sun 20:47] =>  0:01
    :END:

At present we are not checking the last commit correctly.

Notes:

- remove the use of two steps, retrieve and use the latest commit in a single
  step.

Links:

- [[https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs][jobs.<job_id>.outputs]]
- [[https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files][Environment files]]

*** Ignore vcpkg path length warning                                  :story:

#+begin_example
Building boost-system[core]:x64-windows...
CMake Warning at scripts/cmake/vcpkg_buildpath_length_warning.cmake:4 (message):
  boost-system's buildsystem uses very long paths and may fail on your
  system.

  We recommend moving vcpkg to a short path such as 'C:\src\vcpkg' or using
  the subst command.
Call Stack (most recent call first):
  ports/boost-system/portfile.cmake:3 (vcpkg_buildpath_length_warning)
  scripts/ports.cmake:147 (include)
#+end_example

Clues about path length:

#+begin_example
-- Downloading https://github.com/boostorg/system/archive/boost-1.80.0.tar.gz -> boostorg-system-boost-1.80.0.tar.gz...
-- Extracting source D:/a/dogen/dogen/vcpkg/downloads/boostorg-system-boost-1.80.0.tar.gz
#+end_example

Links:

- [[https://github.com/microsoft/vcpkg/issues/11119][[vcpkg_buildpath_length_warning] Please add advice to enable long paths on
  Windows 10 #11119]]
- [[https://github.com/microsoft/vcpkg/discussions/19141][[vcpkg_buildpath_length_warning] Please add advice to enable long paths on
  Windows 10 #19141]]
- [[https://learn.microsoft.com/en-gb/windows/win32/fileio/maximum-file-path-limitation?tabs=registry][Maximum Path Length Limitation]]
- [[https://github.com/actions/runner-images/issues/1052][MAX_PATH lengths on Windows environment #1052]]

*** Windows package is broken                                         :story:

When we install the windows package under wine, it fails with:

: E0fc:err:module:import_dll Library boost_log-vc143-mt-x64-1_78.dll (which is needed by L"C:\\Program Files\\DOGEN\\bin\\dogen.cli.exe") not found
: 00fc:err:module:import_dll Library boost_filesystem-vc143-mt-x64-1_78.dll (which is needed by L"C:\\Program Files\\DOGEN\\bin\\dogen.cli.exe") not found
: 00fc:err:module:import_dll Library boost_program_options-vc143-mt-x64-1_78.dll (which is needed by L"C:\\Program Files\\DOGEN\\bin\\dogen.cli.exe") not found
: 00fc:err:module:import_dll Library libxml2.dll (which is needed by L"C:\\Program Files\\DOGEN\\bin\\dogen.cli.exe") not found
: 00fc:err:module:import_dll Library boost_thread-vc143-mt-x64-1_78.dll (which is needed by L"C:\\Program Files\\DOGEN\\bin\\dogen.cli.exe") not found
: 00fc:err:module:LdrInitializeThunk Importing dlls for L"C:\\Program Files\\DOGEN\\bin\\dogen.cli.exe" failed, status c0000135

This will probably be fixed when we move over to the new way of specifying
dependencies in CMake. Do that first and revisit this problem.

Actually, this did not help. We then used the new VCPKG macro (see links) which
now includes all of boost. We are failing on:

: 00fc:err:module:import_dll Library MSVCP140_CODECVT_IDS.dll (which is needed by L"C:\\Program Files\\DOGEN\\bin\\boost_log-vc143-mt-x64-1_78.dll") not found
: 00fc:err:module:import_dll Library boost_log-vc143-mt-x64-1_78.dll (which is needed by L"C:\\Program Files\\DOGEN\\bin\\dogen.cli.exe") not found

Notes:

- Check if we are on latest MSVC.

Links:

- [[https://github.com/microsoft/vcpkg/issues/1653][CMake: provide option to deploy DLLs on install() like VCPKG_APPLOCAL_DEPS
  #1653]]
- [[https://gitlab.kitware.com/cmake/cmake/-/issues/22623][InstallRequiredSystemLibraries MSVCP140.dll is missing]]
- [[https://stackoverflow.com/questions/4134725/installrequiredsystemlibraries-purpose][InstallRequiredSystemLibraries purpose]]
- [[https://gitlab.kitware.com/cmake/cmake/-/issues/20228][IRSL should install MSVCP140_CODECVT_IDS.dll]]: CMake versions after 3.16 should
  install this DLL.

*** Warning on OSX build                                              :story:

We seem to have a single warning on OSX:

#+begin_example
ld: warning: direct access in function

'boost::archive::basic_text_oprimitive<
    std::__1::basic_ostream<char,
                            std::__1::char_traits<char>
                            >
>
::~basic_text_oprimitive()'

from file

'vcpkg_installed/x64-osx/debug/lib/libboost_serialization.a(basic_text_oprimitive.o)'

to global weak symbol

'std::__1::basic_ostream<
    char, std::__1::char_traits<char>
>&
std::__1::endl<char, std::__1::char_traits<char> >(
    std::__1::basic_ostream<char, std::__1::char_traits<char> >&
)'

from file 'projects/dogen.utility/tests/CMakeFiles/dogen.utility.tests.dir/indenter_filter_tests.cpp.o'

means the weak symbol cannot be overridden at runtime. This was likely caused by
different translation units being compiled with different visibility settings.
#+end_example

The flags that control this behaviour are:

: cxxflags=-fvisibility=hidden
: cxxflags=-fvisibility-inlines-hidden

Compare our settings with Boost.

By removing the current settings for OSX we get over 50 warnings:

: ld: warning: direct access in function 'boost::test_tools::tt_detail::print_log_value<char [48]>::operator()(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const (&) [48])' from file 'projects/dogen.identification/tests/CMakeFiles/dogen.identification.tests.dir/legacy_logical_name_tree_parser_tests.cpp.o' to global weak symbol 'boost::test_tools::tt_detail::static_const<boost::test_tools::tt_detail::impl::boost_test_print_type_impl>::value' from file 'vcpkg_installed/x64-osx/debug/lib/libboost_unit_test_framework.a(framework.o)' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.

In addition it also causes failures in tests:

: dogen.utility.tests/resolver_tests/resolver_returns_test_data_directory_for_empty_path
: dogen.utility.tests/resolver_tests/validating_resolver_returns_test_data_directory_for_empty_paths

Notes:

- try removing special handling for boost.

#+begin_src markdown
Since every single warning on my debug builds is related to ```~basic_text_oprimitive```, I decided to investigate how this symbol is exported in boost. We start with macro ```BOOST_SYMBOL_VISIBLE``` which is defined as follows [1]:

> Defines the syntax of a C++ language extension that indicates a symbol is to be globally visible. If the compiler has no such extension, the macro is defined with no replacement text. Needed for classes that are not otherwise exported, but are used by RTTI. Examples include class for objects that will be thrown as exceptions or used in dynamic_casts, across shared library boundaries.

This appears sensible enough. We can see ```basic_text_oprimitive``` making use of it [2]:

```c++
// class basic_text_oprimitive - output of prmitives to stream
template<class OStream>
class BOOST_SYMBOL_VISIBLE basic_text_oprimitive
{
```

In GCC [3] this macro is defined as follows:

```
#define BOOST_SYMBOL_VISIBLE __attribute__((__visibility__("default")))
```

In Clang too [4]:

```
 define BOOST_SYMBOL_VISIBLE __attribute__((__visibility__("default")))
```

The general conclusion is that by setting visibility to default we should match the symbols definition. We now turn our attention to the destructor [2]:

```c++
    BOOST_ARCHIVE_OR_WARCHIVE_DECL
    basic_text_oprimitive(OStream & os, bool no_codecvt);
    BOOST_ARCHIVE_OR_WARCHIVE_DECL
    ~basic_text_oprimitive();
```

The macro ```BOOST_ARCHIVE_OR_WARCHIVE_DECL``` is defined as follows:

```c++
    #if defined(BOOST_WARCHIVE_SOURCE) || defined(BOOST_ARCHIVE_SOURCE)
        #define BOOST_ARCHIVE_OR_WARCHIVE_DECL BOOST_SYMBOL_EXPORT
    #else
        #define BOOST_ARCHIVE_OR_WARCHIVE_DECL BOOST_SYMBOL_IMPORT
    #endif
```

The macros ```BOOST_SYMBOL_EXPORT``` and ```BOOST_SYMBOL_IMPORT``` are cousins of BOOST_SYMBOL_VISIBLE. Once more, clang and GCC are identical. GCC [3]:

```c++
#    define BOOST_SYMBOL_EXPORT __attribute__((__visibility__("default")))
#    define BOOST_SYMBOL_IMPORT
```

Whereas Clang says [4]:

```c++
#  define BOOST_SYMBOL_EXPORT __attribute__((__visibility__("default")))
...
#  define BOOST_SYMBOL_IMPORT
```

This means when we are importing, visibility is not defined. We now need to find out if that is a good thing or bad.

[1] https://www.boost.org/doc/libs/master/libs/config/doc/html/boost_config/boost_macro_reference.html
[2] https://www.boost.org/doc/libs/1_80_0/boost/archive/basic_text_oprimitive.hpp
[3] https://www.boost.org/doc/libs/1_80_0/boost/config/compiler/gcc.hpp
[4] https://www.boost.org/doc/libs/1_80_0/boost/config/compiler/clang.hpp
#+end_src

Sent email to boost users.

Actually a really easy way to test this is to hack a script that overwrites this
file in OSX with the fixes and see what happens to the warnings. We can even
leave it in for now until the PR is merged.

We were patching the wrong file it seems, the problem is not with =oarchive=,
its with =oprimitive=.

Links:

- [[https://stackoverflow.com/questions/36567072/why-do-i-get-ld-warning-direct-access-in-main-to-global-weak-symbol-in-this][Why do I get "ld: warning: direct access in _main to global weak symbol" in
  this simple code? [duplicate]â]]
- [[https://stackoverflow.com/questions/8685045/xcode-with-boost-linkerid-warning-about-visibility-settings/11879361#11879361][xcode with boost : linker(Id) Warning about visibility settings]]
- [[https://github.com/Microsoft/vcpkg/issues/4497][Boost linker warnings on OSX #4497]]
- [[https://github.com/boostorg/serialization/issues/265][Strange "direct access" warning on OSX for basic_text_oprimitive #265]]

*** Use clang format to format the code base                          :story:

It seems clang-format is being used by quite a lot of people to save
time with the formatting of the code. More info:

- http://clang.llvm.org/docs/ClangFormat.html

Emacs support:

- https://github.com/llvm-mirror/clang/blob/master/tools/clang-format/clang-format.el

Links:

- [[https://github.com/marketplace/actions/clang-format-check][clang-format-check]]: GitHub Action for clang-format checks. Note that this
  Action does NOT format your code for you - it only verifies that your
  repository's code follows your project's formatting conventions. [[https://github.com/search?o=desc&q=uses%3A+jidicula%2Fclang-format-action+-user%3Ajidicula&s=indexed&type=Code][Example
  repos]].
- [[https://github.com/STEllAR-GROUP/hpx/blob/master/.clang-format][HPX clang format]]
- [[https://engineering.mongodb.com/post/succeeding-with-clangformat-part-1-pitfalls-and-planning][Succeeding With ClangFormat, Part 1: Pitfalls And Planning]]
- [[https://github.com/basiliscos/cpp-rotor/blob/master/.clang-format][example: clang format in rotor]]
- [[https://github.com/jbapple-cloudera/clang-format-infer][clang-format-infer GH]]
- [[https://zed0.co.uk/clang-format-configurator/][clang-format-configurator]]
- http://clangformat.com/
- [[https://github.com/johnmcfarlane/unformat][Unformat]]: Python3 utility to generate a .clang-format file from
  example code-base.
- [[https://www.reddit.com/r/cpp/comments/pnli5r/cc_precommit_hooks_for_static_analyzers_and/][C/C++ pre-commit hooks for static analyzers and linters]]
- [[https://github.com/lballabio/QuantLib/blob/master/.clang-format][quant lib]] clang format.
- [[https://github.com/OpenSourceRisk/Engine/blob/master/.clang-format][ORE clang format]]

*** Add PlantUML relationships to diagrams                            :story:

We need to go through each and every model and add the relations we add in Dia
to make diagrams more readable. Models:

- dogen: done
- dogen.cli: done
- dogen.codec: done
- dogen.identification: done
- dogen.logical: done
- dogen.modeling: no changes
- dogen.orchestration: done
- dogen.org: done
- dogen.physical: done
- dogen.text: started

Links:

- [[https://github.com/plantuml/plantuml/issues/1187][Class diagrams: attaining a more "square-like" use of space in large diagrams
  #1187]]
- [[https://plantuml.com/class-diagram][Section "Help on layout" in manual]]
- [[https://plantuml.com/elk][Using ELK layout engine]]
- [[https://crashedmind.github.io/PlantUMLHitchhikersGuide/layout/layout.html]["The Hitchhiker's Guide to PlantUML", section 6. "Layout"]]
- [[https://www.augmentedmind.de/2021/01/17/plantuml-layout-tutorial-styles/]["PlantUML layout and styles tutorial"]]
- [[https://isgb.otago.ac.nz/infosci/mark.george/Wiki/wiki/PlantUML%20GraphViz%20Layout]["PlantUML GraphViz Layout"]]

*** Update CMakeLists to match latest                                 :story:

We have modified locally the CMakeLists to match the modern approach, but we
never updated the templates. As part of doing this, we should remove ODB
support. This is because:

- we don't use ODB at present;
- when we do look into ODB again, it will be done as part of a cartridge
  framework rather than via build files.

Actually this is a big ask. We have a lot of missing requirements in order to do
this:

- component type: library or executable. However, if its executable, we are
  still building a library and we need to supply dependencies for both.
- missing parts: we need a part for modeling and another for generated tests.
- features: we need a templatised feature which expands across the parts. The
  feature will carry dependencies.
- the dependency needs to have the following information:
  - include: public or private
  - standard dogen model or exogenous?
  - link
- official location for generated files:
  : PRIVATE ${stage_inc_dir}/ # generated header files

One possible approach is to create a model element for references which contains
all of the required information. Example:

: * some reference                                      :reference:
:   :PROPERTIES:
:   :masd.codec.reference: dogen.tracing
:   :masd.logical.reference.type: public
:   :masd.logical.reference.link: boost::boost
:   :END:
:
: [[../../dogen.tracing/modeling/dogen.tracing.org]]

Notes:

- we do not want to handle transitive references in this way; from a dogen
  perspective we want to load these models, but from a code generation
  perspective we do not want to add references recursively. We want instead to
  rely on transitivity.

*** Configuration as stereotype causes noise                          :story:

At present we have very large classes (in terms of width) because they have
configuration associated with them as stereotypes. This is a particular problem
in the text model. Nothing stops us from having a separate way of handling
configuration - for example a different property which is not a stereotype. It
could be expressed differently in PlantUML - perhaps a separate section as per
"Advanced class body". We could name the section "Configuration" or "Profiles".

Notes:

- at present we have several different "kinds" of information in the stereotypes
  field:
  - the meta-type (e.g. enumeration, object, etc). This is probably the most in
    keeping with UML's notion of stereotypes.
  - the associated object templates used by the class.
  - the associated configurations.

  We could have two fields for each of these (e.g. templates, configurations)
  and then combine them all as stereotypes in logical model. This allows us to
  express them as different groups within PlantUML.
- we should express =masd::object= in the UML diagrams even though its the
  default. This would make diagrams clearer.
- we could create a named section for enumerators, fields, etc.
- we could express the type of an enumeration, if supplied.
- we could express the type of a primitive, if supplied.
- meta information could appear in a group called "meta-information".
- consider using =struct= or =entity= for =masd::object= and =annotation= for
  =masd::object_template=.
- if class is abstract, use =abstract=.
- check why feature model is not available on codec to codec transform and see
  how hard it is to get it.

*** Consider using meta-data within codec model                       :story:

At present we are hooking directly into the tags within the codec model in order
to access meta-data. This is because we only read in profiles etc later on in
the transform graph. In fact the problem is somewhat recursive: the fundamental
problem is that we did not expect to bootstrap a full context at the codec
level; instead we relied on a "minimal context" bootstrapped within the codec
model itself, allowing us to run the conversions without needing orchestration.
However, this has now proven to be incorrect: we need meta-data in the codec
model therefore we should bootstrap a full context before we perform conversion.
This requires a fair bit of surgery.

Notes:

- we need to move the conversion tests back to orchestration.

*** Thoughts on refactoring variability                               :story:

Originally, we introduced tagged values in Dia because we needed to add
meta-data to types which was not directly supported by the tool. We soon
extended it to all sorts of annotations. But now that we are no longer
constrained to Dia, we need to revisit this decision. Fundamentally, there are
two kinds of datum modeled as features:

- data which has a functional dependency on the geometry of physical space; and
- data which does not.

The first case involves the use of templates which expand over physical space,
and this cannot be avoided (e.g. whether a facet is =enabled= or not). The
second case however is quite trivial. In fact, org-mode does not suffer from the
same limitations as Dia; one can add all necessary properties as tags, and these
can be deserialised (manually?) into what we call the codec model at present. In
this particular case, variability is a bit of an overkill: we know precisely
what needs to be read, and where to put it. We could simply add logic around
codec object creation to read these properties in.

Having said that, we would still end up with something looking like the
features. This is because we still need code to loop through the list of KVPs,
convert them to a well-defined type, etc. So we need variability as-is; its just
that we have 2 use cases (regular/static and template-expansion/dynamic). In
reality, the key problem we have is that we do not want to pull in the physical
model into the codec model. There are two cases:

- in "the real world": this is a full blown instantiation of Dogen. We do not
  need to worry about this since the context is created in orchestration.
  Therefore we do not need to add a dependency because of this, just refactor
  how context bootstrapping works so that we can have a feature model in the
  codec context.
- for testing purposes: since in the intermediate model we do not rely on
  features that depend on template instantiation, we can just use any old set of
  template instantiation domains. This should be sufficient for the tests.

Notes:

- update the existing workflow for conversion to bootstrap a complete context.

*** Conversion as code generation                                     :story:

We may have made a modeling error when we created a distinction between
"generation" and "conversion". Generation was the full blown code generation of
a project and conversion was taking a model file in one representation and
writing it as another (/e.g./ Dia to JSON, org to JSON /etc/). That then
resulted in a "conversion" workflow inside of codec, which made things strange -
it was as if we were duplicating functionality. In reality, conversion is
generation, we just modeled it wrong. We should have an entity that represents a
PlantUML diagram and another for org-mode documents inside the LPS. When we read
in a model, we must use it to generate these entities. We then need to create a
template that generates these files.

Notes:

- now that we do not need to convert (org files are final) we can probably get
  rid of the org-to-org conversion. Having said that, it may be useful to
  regenerate the org file for other purposes. Round-tripping was considered
  important in the past, but the reasons for it have been lost in the mists of
  time. Since we do not have a use case for it yet, maybe we should just remove
  it.
- once this is done for PlantUML, the codec model is now clean from all
  codec-related responsibilities and becomes a true "intermediate
  representation".
- we no longer need the CMake targets to generate PlantUML, two steps to run
  tests, etc. which seems to imply we are going in the right direction.

** Deprecated
